{
  "openapi": "3.0.0",
  "paths": {
    "/card/by-id/{id}": {
      "get": {
        "operationId": "getCardById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          }
        },
        "tags": [
          "Card"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/card/by-ids/for-open-packs": {
      "get": {
        "operationId": "getCardsByIdsForOpenPacks",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetCardsByIdsForOpenPacksDTO"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Card"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/card/all": {
      "get": {
        "operationId": "findAllCards",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "default": 50,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCardResult"
                }
              }
            }
          }
        },
        "tags": [
          "Card"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/card/player-all-cards/{playerId}": {
      "get": {
        "operationId": "getIndividualCardsByPlayerId",
        "parameters": [
          {
            "name": "playerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/GetPlayerAllCardsDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCardWithNumberResult"
                }
              }
            }
          }
        },
        "tags": [
          "Card"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/card/player/{playerId}": {
      "get": {
        "operationId": "getCardsByPlayerId",
        "parameters": [
          {
            "name": "playerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/GetPlayerGroupedCardsDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCardWithNumberResult"
                }
              }
            }
          }
        },
        "tags": [
          "Card"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/card/deck-builder/{playerId}": {
      "get": {
        "operationId": "getDeckBuilderCardsByPlayerId",
        "parameters": [
          {
            "name": "playerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/GetCardsForDeckBuilderDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCardWithNumberResult"
                }
              }
            }
          }
        },
        "tags": [
          "Card"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/card/supply/{heroId}": {
      "get": {
        "operationId": "getHeroSupply",
        "parameters": [
          {
            "name": "heroId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HeroSupplyDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Card"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/hero/search/ids": {
      "get": {
        "operationId": "getHeroesByIds",
        "summary": "Get heroes by IDs",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of heroes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Hero"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Hero"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/hero/search/name": {
      "get": {
        "operationId": "getHeroesByHandleOrName",
        "summary": "Get heroes by name or handle",
        "parameters": [
          {
            "name": "search",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found heroes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Hero"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Hero"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/hero/all": {
      "get": {
        "operationId": "getAllHeroes",
        "summary": "Get all heroes with pagination",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit the number of heroes returned",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "order_by_stars_change",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all heroes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedHeroResult"
                }
              }
            }
          }
        },
        "tags": [
          "Hero"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/hero/transactions": {
      "get": {
        "operationId": "getHeroTransactions",
        "summary": "Get hero transactions",
        "parameters": [
          {
            "name": "query",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/GetTransactionDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Hero transactions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedTradesDTOResult"
                }
              }
            }
          }
        },
        "tags": [
          "Hero"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/hero/history": {
      "get": {
        "operationId": "getHeroHistory",
        "summary": "Get hero score history and tournament scores",
        "parameters": [
          {
            "name": "heroId",
            "required": true,
            "in": "query",
            "description": "ID of the hero",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Hero score history and tournament scores",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HeroHistoryDTO"
                }
              }
            }
          }
        },
        "tags": [
          "Hero"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/hero/holders": {
      "get": {
        "operationId": "getHeroHolders",
        "summary": "Get hero holders",
        "parameters": [
          {
            "name": "query",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/GetHeroHoldersDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Hero holders",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedHeroHolderDTOResult"
                }
              }
            }
          }
        },
        "tags": [
          "Hero"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/hero/get-hero-by-handle": {
      "get": {
        "operationId": "getHeroByHandle",
        "summary": "Get hero by handle",
        "parameters": [
          {
            "name": "handle",
            "required": true,
            "in": "query",
            "description": "Handle of the hero",
            "schema": {
              "example": "greg16676935420",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Hero",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetHeroByHandleOrAddressDTO"
                }
              }
            }
          }
        },
        "tags": [
          "Hero"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/player/search": {
      "get": {
        "operationId": "findPlayersBySearch",
        "summary": "Search players by name, address or handle",
        "parameters": [
          {
            "name": "search",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Player"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Player"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/player/all": {
      "get": {
        "operationId": "getAllPlayersWithPagination",
        "summary": "Get all paginated players",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "default": 50,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPlayerResult"
                }
              }
            }
          }
        },
        "tags": [
          "Player"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/player/bids/{playerId}": {
      "get": {
        "operationId": "getBidsForPlayerId",
        "summary": "Get all bids for a player",
        "parameters": [
          {
            "name": "playerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BidOrderWithTopBidAndFloorPrice"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Player"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/player/bids/{playerId}/{heroId}/{rarity}": {
      "get": {
        "operationId": "getBidsForPlayerIdAndHeroIdAndRarity",
        "summary": "Get all bids for a player for a specific card",
        "parameters": [
          {
            "name": "playerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "heroId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rarity",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BidOrderWithTopBidAndFloorPrice"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Player"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/player/listings/{playerId}": {
      "get": {
        "operationId": "getListingsForPlayer",
        "summary": "Get all listings for a player",
        "parameters": [
          {
            "name": "playerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SellOrder"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Player"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/player/activity/{playerId}": {
      "get": {
        "operationId": "getActivityForPlayer",
        "summary": "Get all activity for a player",
        "parameters": [
          {
            "name": "playerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/GetPlayerActivityDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedGetLastActivityDtoResult"
                }
              }
            }
          }
        },
        "tags": [
          "Player"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/player/game-stats/{playerId}": {
      "get": {
        "operationId": "getGameStatsForPlayer",
        "summary": "Get game stats for a player",
        "parameters": [
          {
            "name": "playerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameStatsDto"
                }
              }
            }
          }
        },
        "tags": [
          "Player"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/player/basic-data/{playerId}": {
      "get": {
        "operationId": "getPlayerBasicData",
        "summary": "Get player basic data including portfolio and cards",
        "parameters": [
          {
            "name": "playerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPlayerBasicDataResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Player"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/tactics": {
      "get": {
        "operationId": "get",
        "summary": "Get all tactics",
        "parameters": [
          {
            "name": "query",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/GetTacticsQueryDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of tactics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedTacticsResult"
                }
              }
            }
          }
        },
        "tags": [
          "Tactics"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/tactics/byId/{id}": {
      "get": {
        "operationId": "getById",
        "summary": "Get tactic by id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/GetTacticByIdQueryDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "One tactic",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tactics"
                }
              }
            }
          }
        },
        "tags": [
          "Tactics"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/tactics/hero-scores/{tacticId}": {
      "get": {
        "operationId": "getHeroScoresByTacticId",
        "summary": "Get heros scores for a given tactic",
        "parameters": [
          {
            "name": "tacticId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/GetHeroScoresQueryDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of heros scores for a given tactic",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedTacticsHeroScoreResult"
                }
              }
            }
          }
        },
        "tags": [
          "Tactics"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/tactics/tickets/count/{playerId}": {
      "get": {
        "operationId": "countTicketsByPlayerId",
        "summary": "Get the total number of tickets for a player",
        "parameters": [
          {
            "name": "playerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The total number of tickets for a player",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "Tactics"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/tactics/tickets/total-gains/{playerId}": {
      "get": {
        "operationId": "getTotalGains",
        "summary": "Get the total gains of a player",
        "parameters": [
          {
            "name": "playerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The total gains of a player",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTotalTicketsGainsResponseDTO"
                }
              }
            }
          }
        },
        "tags": [
          "Tactics"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/tactics/entry/total/{playerId}": {
      "get": {
        "operationId": "countEntriesByPlayerId",
        "summary": "Get the total number of entries for a player",
        "parameters": [
          {
            "name": "playerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The total number of entries for a player",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "Tactics"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/tournaments/count-registered-decks/{playerId}": {
      "get": {
        "operationId": "countRegisteredDecksByPlayerId",
        "summary": "Count registered decks by player ID",
        "parameters": [
          {
            "name": "playerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Count of registered decks by player ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "Tournaments"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/tournaments/byId/{tournamentId}": {
      "get": {
        "operationId": "getTournamentById",
        "summary": "Get tournament by ID",
        "parameters": [
          {
            "name": "tournamentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get tournament by ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tournament"
                }
              }
            }
          }
        },
        "tags": [
          "Tournaments"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/tournaments/user-registered-tournaments/{playerId}": {
      "get": {
        "operationId": "getUserRegisteredTournaments",
        "parameters": [
          {
            "name": "playerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get user registered tournaments with decks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserRegisteredTournamentsDTO"
                }
              }
            }
          }
        },
        "tags": [
          "Tournaments"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/tournaments/currentDecksAndWinnings/{playerId}": {
      "get": {
        "operationId": "getCurrentDecksAndWinnings",
        "parameters": [
          {
            "name": "playerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get current decks and winnings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserRegisteredTournamentsAndWinningsDTO"
                }
              }
            }
          }
        },
        "tags": [
          "Tournaments"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/tournaments/hero-progress-over-tournament/{tournamentNumber}": {
      "get": {
        "operationId": "getHeroProgressOverTournament",
        "parameters": [
          {
            "name": "tournamentNumber",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_rank",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end_rank",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get hero progress over tournament",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetHeroProgressOverTournamentDTO"
                }
              }
            }
          }
        },
        "tags": [
          "Tournaments"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/tournaments/historicalDecksAndWinnings/{tournamentNumber}/{playerId}": {
      "get": {
        "operationId": "getHistoricalDecksAndWinnings",
        "parameters": [
          {
            "name": "tournamentNumber",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "playerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get current decks and winnings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetHistoricalDecksAndWinningsDTO"
                }
              }
            }
          }
        },
        "tags": [
          "Tournaments"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/tournaments/players/{tournamentId}": {
      "get": {
        "operationId": "getPlayersInTournament",
        "parameters": [
          {
            "name": "tournamentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/GetAllPlayersDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get players in tournament",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedTournamentPlayerResult"
                }
              }
            }
          }
        },
        "tags": [
          "Tournaments"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/tournaments/player-decks/{playerId}/{tournamentId}": {
      "get": {
        "operationId": "getPlayerDecksByTournamentIdAndPlayerId",
        "summary": "Get player decks",
        "parameters": [
          {
            "name": "playerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tournamentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get player decks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TournamentPlayer"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Tournaments"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/tournaments/summary/{tournamentNumber}": {
      "get": {
        "operationId": "getSummaryOfTournamentNumber",
        "summary": "Get all summary",
        "parameters": [
          {
            "name": "tournamentNumber",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get deck history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SummaryOfTournamentNumberDTO"
                }
              }
            }
          }
        },
        "tags": [
          "Tournaments"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/vote/configs": {
      "get": {
        "operationId": "getConfigs",
        "summary": "Get all voting configurations",
        "parameters": [
          {
            "name": "query",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/GetVoteConfigQueryDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of vote configurations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedVoteConfigResult"
                }
              }
            }
          }
        },
        "tags": [
          "Voting"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/vote/my-vote/{vote_config_id}": {
      "get": {
        "operationId": "getMyVote",
        "summary": "Query to get vote of the current user",
        "parameters": [
          {
            "name": "vote_config_id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of user votes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Vote"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Voting"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/vote/heros/{vote_config_id}": {
      "get": {
        "operationId": "getVotesByHero",
        "summary": "Get all vote by hero",
        "parameters": [
          {
            "name": "vote_config_id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "List of heroes with their votes count",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HeroWithVotesCount"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Voting"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/marketplace/sell-orders": {
      "get": {
        "operationId": "getMarketplaceData",
        "summary": "Get marketplace data",
        "parameters": [
          {
            "name": "query",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/GetAndFilterSellOrdersQueryDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Marketplace data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedSellOrderWithHighestBidResult"
                }
              }
            }
          }
        },
        "tags": [
          "Marketplace"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/marketplace/lowest-price-for-hero-rarity/{heroRarityIndex}": {
      "get": {
        "operationId": "getLowestPriceForHeroRarity",
        "summary": "Get lowest price for hero rarity",
        "parameters": [
          {
            "name": "heroRarityIndex",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The lowest price for hero rarity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "Marketplace"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/marketplace/sell-orders/{heroRarityIndex}": {
      "get": {
        "operationId": "getSellOrdersByHeroRarityIndex",
        "summary": "Get sell orders by hero rarity index",
        "parameters": [
          {
            "name": "heroRarityIndex",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The sell orders with total count - type short or long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SellOrdersResponseDTO"
                }
              }
            }
          }
        },
        "tags": [
          "Marketplace"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/marketplace/get-card-market-basic-info/{hero_rarity_index}": {
      "get": {
        "operationId": "getCardMarketBasicInfo",
        "parameters": [
          {
            "name": "hero_rarity_index",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCardMarketBasicInfoDTO"
                }
              }
            }
          }
        },
        "tags": [
          "Marketplace"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/marketplace/bid-orders": {
      "get": {
        "operationId": "getBidOrders",
        "parameters": [
          {
            "name": "heroId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rarity",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "includeOrderbook",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includePersonalBids",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeHighestFiveBids",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBidOrdersDTO"
                }
              }
            }
          }
        },
        "tags": [
          "Marketplace"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/marketplace/card-market-info/{heroId}/{rarity}/{order}": {
      "get": {
        "operationId": "getCardMarketInfo",
        "parameters": [
          {
            "name": "heroId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rarity",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "order",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCardMarketInfoDTO"
                }
              }
            }
          }
        },
        "tags": [
          "Marketplace"
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    }
  },
  "info": {
    "title": "Fantasy API | PRO",
    "description": "The Fantasy API documentation",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [
    {
      "url": "https://api-v2.fantasy.top",
      "description": "Production server"
    }
  ],
  "components": {
    "securitySchemes": {
      "apiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key"
      }
    },
    "schemas": {
      "MaintenanceConfigRequest": {
        "type": "object",
        "properties": {
          "activated": {
            "type": "boolean",
            "description": "If maintenance mode is activated"
          },
          "message": {
            "type": "string",
            "description": "Message to be displayed in maintenance mode"
          },
          "until": {
            "format": "date-time",
            "type": "string",
            "description": "Date until maintenance mode is activated"
          },
          "app_version": {
            "type": "string",
            "description": "App version"
          }
        },
        "required": [
          "activated",
          "app_version"
        ]
      },
      "MaintenanceConfig": {
        "type": "object",
        "properties": {
          "maintenance_on": {
            "type": "boolean",
            "description": "If maintenance mode is activated"
          },
          "maintenance_message": {
            "type": "string",
            "description": "Message to be displayed in maintenance mode"
          },
          "maintenance_until": {
            "type": "string",
            "description": "Date until maintenance mode is activated",
            "nullable": true
          },
          "app_version": {
            "type": "string",
            "description": "App version"
          }
        },
        "required": [
          "maintenance_on",
          "app_version"
        ]
      },
      "Banner": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the banner"
          },
          "title": {
            "type": "string",
            "description": "Title of the banner"
          },
          "description": {
            "type": "string",
            "description": "Description of the banner"
          },
          "image": {
            "type": "string",
            "description": "Image of the banner"
          },
          "link": {
            "type": "string",
            "description": "Link of the banner"
          },
          "cta_text": {
            "type": "string",
            "description": "CTA text of the banner"
          },
          "active": {
            "type": "boolean",
            "description": "Active status of the banner"
          },
          "created_at": {
            "type": "string",
            "description": "Created at of the banner"
          },
          "updated_at": {
            "type": "string",
            "description": "Updated at of the banner"
          }
        },
        "required": [
          "id",
          "title",
          "description",
          "image",
          "link",
          "cta_text",
          "active",
          "created_at",
          "updated_at"
        ]
      },
      "SearchHeroAndPlayerQueryParams": {
        "type": "object",
        "properties": {
          "search": {
            "type": "string",
            "description": "Search query",
            "example": "kipit"
          }
        },
        "required": [
          "search"
        ]
      },
      "SearchHeroAndPlayerResponse_HeroResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the hero",
            "example": "unique-id-string"
          },
          "handle": {
            "type": "string",
            "description": "Handle of the hero",
            "example": "hero_handle"
          },
          "name": {
            "type": "string",
            "description": "Name of the hero",
            "example": "Hero Name"
          },
          "is_player": {
            "type": "boolean",
            "description": "Indicates if the hero is a player",
            "example": false
          },
          "profile_image_url_https": {
            "type": "string",
            "description": "URL of the profile image in HTTPS",
            "example": "http://profileimage.url"
          }
        },
        "required": [
          "id",
          "handle",
          "name",
          "is_player"
        ]
      },
      "SearchHeroAndPlayerResponse_PlayerResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "handle": {
            "type": "string"
          },
          "profile_picture": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "handle",
          "profile_picture"
        ]
      },
      "SearchHeroAndPlayerResponseDto": {
        "type": "object",
        "properties": {
          "heroes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchHeroAndPlayerResponse_HeroResponseDto"
            }
          },
          "players": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchHeroAndPlayerResponse_PlayerResponseDto"
            }
          }
        },
        "required": [
          "heroes",
          "players"
        ]
      },
      "PlayerSearchHistoryResponseDto": {
        "type": "object",
        "properties": {
          "ressource_id": {
            "type": "string"
          },
          "ressource_type": {
            "type": "string"
          },
          "ressource_name": {
            "type": "string"
          }
        },
        "required": [
          "ressource_id",
          "ressource_type"
        ]
      },
      "CreateSearchHistoryDTO": {
        "type": "object",
        "properties": {
          "ressource_id": {
            "type": "string"
          },
          "ressource_type": {
            "type": "string"
          },
          "ressource_name": {
            "type": "string"
          }
        },
        "required": [
          "ressource_id",
          "ressource_type"
        ]
      },
      "QueryGetVrgdaHistoricalDataDTO": {
        "type": "object",
        "properties": {
          "mint_id": {
            "type": "number",
            "example": 17
          },
          "minter_address": {
            "type": "string",
            "example": "0x86b58ca576c24F79aD1e5459aee01d40BEA22828"
          }
        },
        "required": [
          "mint_id",
          "minter_address"
        ]
      },
      "VrgdaPriceChart": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "mint_id": {
            "type": "number",
            "example": 17
          },
          "minter_address": {
            "type": "string",
            "example": "0x86b58ca576c24F79aD1e5459aee01d40BEA22828"
          },
          "price": {
            "type": "string",
            "example": "0.5"
          },
          "timestamp": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "mint_id",
          "minter_address",
          "price",
          "timestamp"
        ]
      },
      "GetLastMintResponseDTO_Player": {
        "type": "object",
        "properties": {
          "handle": {
            "type": "string"
          },
          "profile_picture": {
            "type": "string"
          }
        },
        "required": [
          "handle",
          "profile_picture"
        ]
      },
      "GetLastMintsResponseDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "buyer": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          },
          "block_number": {
            "type": "number"
          },
          "price": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "player": {
            "$ref": "#/components/schemas/GetLastMintResponseDTO_Player"
          }
        },
        "required": [
          "id",
          "buyer",
          "timestamp",
          "block_number",
          "price",
          "created_at",
          "player"
        ]
      },
      "CacheInvalidatorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the cache invalidator",
            "example": "successful"
          },
          "message": {
            "type": "string",
            "description": "Details of the cache invalidator"
          }
        },
        "required": [
          "status",
          "message"
        ]
      },
      "CreateApiKeyDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "telegram_handle": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "telegram_handle"
        ]
      },
      "ApiKey": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "nb_calls_allowed": {
            "type": "number"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "player_address": {
            "type": "string"
          },
          "telegram_handle": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "nb_calls_allowed",
          "created_at",
          "player_address",
          "telegram_handle"
        ]
      },
      "SignInRequestBodyDTO": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "Wallet address"
          }
        },
        "required": [
          "address"
        ]
      },
      "Auth": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        },
        "required": [
          "token"
        ]
      },
      "AuthRefresh": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          }
        },
        "required": [
          "accessToken"
        ]
      },
      "GetIsAlreadyReferredDTO": {
        "type": "object",
        "properties": {
          "isAlreadyReferred": {
            "type": "boolean"
          }
        },
        "required": [
          "isAlreadyReferred"
        ]
      },
      "InsertReferralBodyDTO": {
        "type": "object",
        "properties": {
          "referralCode": {
            "type": "string",
            "description": "The referral code to insert",
            "example": "1234567890"
          }
        },
        "required": [
          "referralCode"
        ]
      },
      "InsertReferralResponseDTO": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success of the operation",
            "example": true
          }
        },
        "required": [
          "success"
        ]
      },
      "DecimalNumber": {
        "type": "object",
        "properties": {}
      },
      "OmitTypeClass": {
        "type": "object",
        "properties": {
          "tactic_id": {
            "type": "string",
            "description": "Tactic ID",
            "example": "some-tactic-id"
          },
          "hero_id": {
            "type": "string",
            "description": "Hero ID",
            "example": "hero-id"
          },
          "stars": {
            "type": "number",
            "description": "Stars",
            "example": 5
          },
          "fantasy_score": {
            "description": "Fantasy score",
            "example": "100.0",
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "id": {
            "type": "string",
            "description": "Hero score ID",
            "example": "hero-score-id"
          },
          "tweet_count": {
            "type": "number",
            "description": "Tweet count",
            "example": 100,
            "nullable": true
          },
          "current_rank": {
            "type": "number",
            "description": "Current rank",
            "example": 1,
            "nullable": true
          },
          "previous_rank": {
            "type": "number",
            "description": "Previous rank",
            "example": 1,
            "nullable": true
          },
          "views": {
            "type": "number",
            "description": "Views",
            "example": 1000,
            "nullable": true
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Updated at",
            "example": "2024-05-27T00:00:00.000Z"
          }
        },
        "required": [
          "tactic_id",
          "hero_id",
          "stars",
          "fantasy_score",
          "id",
          "tweet_count",
          "current_rank",
          "previous_rank",
          "views",
          "updated_at"
        ]
      },
      "CredibilityAverage": {
        "type": "object",
        "properties": {
          "hero_id": {
            "type": "string",
            "description": "ID of the hero associated with this credibility average",
            "example": "hero-id-456"
          },
          "avg_cred_score": {
            "type": "number",
            "description": "Average credibility score for the hero",
            "example": 2.5
          },
          "avg_certified_views": {
            "type": "number",
            "description": "Average number of certified views for the hero",
            "example": 150
          }
        },
        "required": [
          "hero_id",
          "avg_cred_score",
          "avg_certified_views"
        ]
      },
      "CoinPriceHistory": {
        "type": "object",
        "properties": {
          "contract_address_network": {
            "type": "string",
            "description": "Contract address and network",
            "example": "0x1234...5678_ethereum"
          },
          "datetime": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp of the price data",
            "example": "2023-04-01T12:00:00Z"
          },
          "market_cap": {
            "type": "string",
            "description": "Market capitalization of the token",
            "example": "830660"
          },
          "price_usd": {
            "description": "Current price in USD",
            "example": "0.000830772464172",
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "price_usd_24": {
            "description": "Price in USD 24 hours ago",
            "example": "0.000835123456789",
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "price_usd_7days": {
            "description": "Price in USD 7 days ago",
            "example": "0.000840987654321",
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "price_usd_30days": {
            "description": "Price in USD 30 days ago",
            "example": "0.000845678901234",
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "change_24": {
            "description": "24-hour price change percentage",
            "example": "-0.12893800388274532",
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "change_7days": {
            "description": "7-day price change percentage",
            "example": "1.5678901234567890",
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "change_30days": {
            "description": "30-day price change percentage",
            "example": "-2.3456789012345678",
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          }
        },
        "required": [
          "contract_address_network",
          "datetime",
          "market_cap",
          "price_usd",
          "price_usd_24",
          "price_usd_7days",
          "price_usd_30days",
          "change_24",
          "change_7days",
          "change_30days"
        ]
      },
      "Coin": {
        "type": "object",
        "properties": {
          "contract_address_network": {
            "type": "string",
            "description": "Unique identifier: contract address and network id of codex.io",
            "example": "acatzTjUeHDT3SoufN6NMxGUmBFtoqFHnFwusdw8kYX:1399811149"
          },
          "token_name": {
            "type": "string",
            "description": "Name of the token",
            "example": "Apple Cat"
          },
          "symbol": {
            "type": "string",
            "description": "Symbol of the token",
            "example": "acat"
          },
          "chain_name": {
            "type": "string",
            "description": "Chain name of the token",
            "example": "Solana"
          },
          "short_chain_name": {
            "type": "string",
            "description": "Short chain name of the token",
            "example": "sol"
          },
          "imageLargeUrl": {
            "type": "string",
            "description": "Large image url of the coin",
            "example": "https://example.com/image.png"
          },
          "circulating_supply": {
            "type": "string",
            "description": "Circulating supply of the coin",
            "example": "1000000000"
          },
          "total_supply": {
            "type": "string",
            "description": "Total supply of the coin",
            "example": "1000000000"
          },
          "coin_histories": {
            "description": "Coin price history",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CoinPriceHistory"
            }
          }
        },
        "required": [
          "contract_address_network",
          "token_name",
          "symbol",
          "chain_name",
          "short_chain_name",
          "imageLargeUrl",
          "circulating_supply",
          "total_supply",
          "coin_histories"
        ]
      },
      "i": {
        "type": "object",
        "properties": {}
      },
      "Current": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the hero",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "handle": {
            "type": "string",
            "description": "The Twitter handle of the hero",
            "example": "@hero_handle"
          },
          "current_rank": {
            "type": "number",
            "description": "The current rank of the hero",
            "example": 1
          },
          "fantasy_score": {
            "description": "The fantasy score of the hero",
            "example": 1234.56,
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "views": {
            "format": "int64",
            "type": "integer",
            "description": "The total number of views for the hero's tweets",
            "example": 1000000
          },
          "tweet_count": {
            "format": "int64",
            "type": "integer",
            "description": "The total number of tweets by the hero",
            "example": 5000
          },
          "avg_views": {
            "description": "The average number of views per tweet",
            "example": 200.5,
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "reach": {
            "description": "The reach of the hero",
            "example": 500000.75,
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "previous_rank": {
            "type": "number",
            "description": "The previous rank of the hero",
            "example": 2
          },
          "likes": {
            "format": "int64",
            "type": "integer",
            "description": "The total number of likes received",
            "example": 50000
          },
          "retweets": {
            "format": "int64",
            "type": "integer",
            "description": "The total number of retweets received",
            "example": 10000
          },
          "quotes": {
            "format": "int64",
            "type": "integer",
            "description": "The total number of quotes received",
            "example": 5000
          },
          "bookmarks": {
            "format": "int64",
            "type": "integer",
            "description": "The total number of bookmarks received",
            "example": 2000
          },
          "replies": {
            "format": "int64",
            "type": "integer",
            "description": "The total number of replies received",
            "example": 15000
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "The last update timestamp",
            "example": "2023-04-01T12:00:00Z"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "The creation timestamp",
            "example": "2023-01-01T00:00:00Z"
          },
          "reach_absolute": {
            "description": "The absolute reach of the hero",
            "example": 750000.25,
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "followers_count": {
            "type": "number",
            "description": "The number of followers",
            "example": 100000
          },
          "street_cred_like": {
            "type": "number",
            "description": "The street cred score for likes",
            "example": 85
          },
          "street_cred_quote": {
            "type": "number",
            "description": "The street cred score for quotes",
            "example": 75
          },
          "street_cred_retweet": {
            "type": "number",
            "description": "The street cred score for retweets",
            "example": 80
          },
          "stars": {
            "type": "number",
            "description": "The number of stars",
            "example": 4
          },
          "quality_like_ratio": {
            "type": "number",
            "description": "The quality like ratio",
            "example": 0.75
          },
          "quality_retweet_ratio": {
            "type": "number",
            "description": "The quality retweet ratio",
            "example": 0.6
          },
          "fantasy_score_v1": {
            "description": "The fantasy score version 1",
            "example": 1500.25,
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "fantasy_score_v2": {
            "description": "The fantasy score version 2",
            "example": 1600.5,
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "total_cred_score": {
            "description": "The total cred score",
            "example": 2500.75,
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "cred_avg_score": {
            "description": "The average cred score",
            "example": 83.33,
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "cred_reach": {
            "description": "The cred reach",
            "example": 450000.5,
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "cred_reach_absolute": {
            "description": "The absolute cred reach",
            "example": 600000.75,
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          }
        },
        "required": [
          "id",
          "handle",
          "current_rank",
          "fantasy_score",
          "views",
          "tweet_count",
          "avg_views",
          "reach",
          "previous_rank",
          "likes",
          "retweets",
          "quotes",
          "bookmarks",
          "replies",
          "updated_at",
          "created_at",
          "reach_absolute",
          "followers_count",
          "street_cred_like",
          "street_cred_quote",
          "street_cred_retweet",
          "stars",
          "quality_like_ratio",
          "quality_retweet_ratio",
          "fantasy_score_v1",
          "fantasy_score_v2",
          "total_cred_score",
          "cred_avg_score",
          "cred_reach",
          "cred_reach_absolute"
        ]
      },
      "Trade": {
        "type": "object",
        "properties": {
          "price": {
            "description": "Price",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "seller_id": {
            "type": "string",
            "description": "Seller ID"
          },
          "buyer_id": {
            "type": "string",
            "description": "Buyer ID"
          },
          "type": {
            "type": "string",
            "description": "Type"
          },
          "hero_id": {
            "type": "string",
            "description": "Hero ID"
          },
          "payment_token": {
            "type": "string",
            "description": "Payment token"
          },
          "order_hash": {
            "type": "string",
            "description": "Order hash"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp"
          },
          "block_number": {
            "type": "number",
            "description": "Block number"
          },
          "tx_hash": {
            "type": "string",
            "description": "Transaction hash"
          },
          "contract": {
            "type": "string",
            "description": "Contract"
          },
          "fantasy_card_id": {
            "type": "string",
            "description": "Fantasy card ID"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date, optional"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Update date, optional"
          },
          "id": {
            "type": "string",
            "description": "ID"
          },
          "hero_rarity_index": {
            "type": "string",
            "description": "Hero rarity index"
          }
        },
        "required": [
          "price",
          "seller_id",
          "buyer_id",
          "type",
          "hero_id",
          "payment_token",
          "order_hash",
          "timestamp",
          "block_number",
          "tx_hash",
          "contract",
          "fantasy_card_id",
          "id",
          "hero_rarity_index"
        ]
      },
      "Flag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Flag ID",
            "example": "flag-123"
          },
          "label": {
            "type": "string",
            "description": "Flag label",
            "example": "Registered Player"
          },
          "description": {
            "type": "string",
            "description": "Flag description",
            "example": "Hero is also a player"
          }
        },
        "required": [
          "id",
          "label",
          "description"
        ]
      },
      "HeroFlag": {
        "type": "object",
        "properties": {
          "hero_id": {
            "type": "string",
            "description": "Hero ID",
            "example": "hero-123"
          },
          "flag_id": {
            "type": "string",
            "description": "Flag ID",
            "example": "flag-123"
          },
          "flags": {
            "description": "Flag",
            "allOf": [
              {
                "$ref": "#/components/schemas/Flag"
              }
            ]
          }
        },
        "required": [
          "hero_id",
          "flag_id",
          "flags"
        ]
      },
      "HeroWithoutBidOrders": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the hero",
            "example": "unique-id-string"
          },
          "handle": {
            "type": "string",
            "description": "Handle of the hero",
            "example": "hero_handle"
          },
          "name": {
            "type": "string",
            "description": "Name of the hero",
            "example": "Hero Name"
          },
          "previous_rank": {
            "type": "number",
            "description": "Previous rank of the hero",
            "example": 0
          },
          "is_player": {
            "type": "boolean",
            "description": "Indicates if the hero is a player",
            "example": false
          },
          "is_blue_verified": {
            "type": "boolean",
            "description": "Indicates if the hero is blue verified",
            "example": false
          },
          "default_profile_image": {
            "type": "boolean",
            "description": "Indicates if the hero has a default profile image",
            "example": false
          },
          "description": {
            "type": "string",
            "description": "Description of the hero",
            "example": "Hero description here"
          },
          "fast_followers_count": {
            "type": "number",
            "description": "Count of fast followers",
            "example": 0
          },
          "favourites_count": {
            "format": "int64",
            "type": "integer",
            "description": "Count of favourites",
            "example": 0
          },
          "followers_count": {
            "format": "int64",
            "type": "integer",
            "description": "Count of followers",
            "example": 0
          },
          "friends_count": {
            "type": "number",
            "description": "Count of friends",
            "example": 0
          },
          "listed_count": {
            "type": "number",
            "description": "Listed count",
            "example": 0
          },
          "location": {
            "type": "string",
            "description": "Location of the hero",
            "example": "Location here"
          },
          "media_count": {
            "type": "number",
            "description": "Media count",
            "example": 0
          },
          "possibly_sensitive": {
            "type": "boolean",
            "description": "Indicates if the hero is possibly sensitive",
            "example": false
          },
          "profile_banner_url": {
            "type": "string",
            "description": "URL of the profile banner",
            "example": "http://banner.url"
          },
          "profile_image_url_https": {
            "type": "string",
            "description": "URL of the profile image in HTTPS",
            "example": "http://profileimage.url"
          },
          "has_banner": {
            "type": "boolean",
            "description": "Indicates if the hero has a banner",
            "example": false
          },
          "verified": {
            "type": "boolean",
            "description": "Indicates if the hero is verified",
            "example": false
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-07-01T13:34:57.306Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-07-01T13:35:04.802Z"
          },
          "statuses_count": {
            "type": "number",
            "description": "Count of statuses",
            "example": 0
          },
          "stars": {
            "type": "number",
            "description": "Stars of the hero",
            "example": 3
          },
          "player_address": {
            "type": "string",
            "description": "Player address of the hero",
            "example": "player_address_here"
          },
          "can_be_packed": {
            "type": "boolean",
            "description": "Indicates if the hero can be packed",
            "example": true
          },
          "previous_stars": {
            "type": "number",
            "description": "Previous stars of the hero",
            "example": 3
          },
          "star_gain": {
            "type": "number",
            "description": "Star gain of the hero",
            "example": 0
          },
          "tactic_scores": {
            "description": "List of hero_scores",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OmitTypeClass"
            }
          },
          "tournament_histories": {
            "description": "List of card hero swapping",
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "volume": {
            "type": "number",
            "description": "Volume of trade on hero (optional)"
          },
          "last_sale": {
            "type": "number",
            "description": "Last trade on hero (optional)"
          },
          "floor": {
            "type": "number",
            "description": "Floor price of hero (optional)"
          },
          "votes": {
            "description": "Votes from voting module",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OmitTypeClass"
            }
          },
          "status": {
            "type": "string",
            "description": "Status of the hero",
            "example": "TACTIC_ONLY",
            "examples": [
              "HERO",
              "TACTIC_ONLY",
              "DELETED",
              "PAUSED"
            ]
          },
          "credibility_average": {
            "description": "Credibility score",
            "allOf": [
              {
                "$ref": "#/components/schemas/CredibilityAverage"
              }
            ]
          },
          "tactic_image_prefix": {
            "type": "string",
            "description": "Tactic image prefix",
            "example": "argent"
          },
          "metadata": {
            "type": "object",
            "description": "Metadata of the hero",
            "example": "{}"
          },
          "coin_id": {
            "type": "string",
            "description": "coin_id: contract address and network id of codex.io",
            "example": "acatzTjUeHDT3SoufN6NMxGUmBFtoqFHnFwusdw8kYX:1399811149"
          },
          "coin": {
            "description": "Coin",
            "allOf": [
              {
                "$ref": "#/components/schemas/Coin"
              }
            ]
          },
          "current": {
            "description": "Current score of the hero",
            "allOf": [
              {
                "$ref": "#/components/schemas/Current"
              }
            ]
          },
          "sell_orders": {
            "description": "Sell orders of the hero",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SellOrder"
            }
          },
          "trades": {
            "description": "Trades of the hero",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Trade"
            }
          },
          "floor_price": {
            "type": "number",
            "description": "Floor price of the hero",
            "example": 0
          },
          "highest_bid": {
            "type": "number",
            "description": "Highest bid of the hero",
            "example": 0
          },
          "expected_score": {
            "description": "Expected score of the hero for tournament",
            "example": 0,
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "flags": {
            "description": "Flags of the hero",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HeroFlag"
            }
          }
        },
        "required": [
          "id",
          "handle",
          "name",
          "previous_rank",
          "is_player",
          "is_blue_verified",
          "default_profile_image",
          "fast_followers_count",
          "favourites_count",
          "followers_count",
          "friends_count",
          "listed_count",
          "media_count",
          "possibly_sensitive",
          "has_banner",
          "verified",
          "created_at",
          "updated_at",
          "statuses_count",
          "stars",
          "can_be_packed",
          "previous_stars",
          "tactic_scores",
          "tournament_histories",
          "status",
          "credibility_average",
          "tactic_image_prefix",
          "metadata",
          "coin_id",
          "coin",
          "sell_orders",
          "trades",
          "floor_price",
          "highest_bid",
          "expected_score",
          "flags"
        ]
      },
      "BidOrder": {
        "type": "object",
        "properties": {
          "trader": {
            "type": "string",
            "description": "Trader"
          },
          "side": {
            "type": "number",
            "description": "Side"
          },
          "collection": {
            "type": "string",
            "description": "Collection"
          },
          "payment_token": {
            "type": "string",
            "description": "Payment token"
          },
          "expiration_time": {
            "type": "string",
            "description": "Expiration time as a BigInt value"
          },
          "merkle_root": {
            "type": "string",
            "description": "Merkle root"
          },
          "salt": {
            "type": "string",
            "description": "Salt as a BigInt value"
          },
          "signature": {
            "type": "string",
            "description": "Signature"
          },
          "id": {
            "type": "string",
            "description": "ID as a BigInt value"
          },
          "token_id": {
            "type": "string",
            "description": "Token ID as a BigInt value"
          },
          "token_ids": {
            "type": "string",
            "description": "Token IDs"
          },
          "bidder_handle": {
            "type": "string",
            "description": "Bidder handle"
          },
          "rarity": {
            "type": "number",
            "description": "Rarity"
          },
          "hero_id": {
            "type": "string",
            "description": "Hero ID"
          },
          "price": {
            "description": "Price",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "active": {
            "type": "boolean",
            "description": "Active"
          },
          "order_hash": {
            "type": "string",
            "description": "Order hash, optional"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date, optional"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Update date, optional"
          },
          "hero": {
            "description": "Hero",
            "allOf": [
              {
                "$ref": "#/components/schemas/HeroWithoutBidOrders"
              }
            ]
          }
        },
        "required": [
          "trader",
          "side",
          "collection",
          "payment_token",
          "expiration_time",
          "merkle_root",
          "salt",
          "signature",
          "id",
          "token_id",
          "token_ids",
          "bidder_handle",
          "rarity",
          "hero_id",
          "price",
          "active"
        ]
      },
      "HeroWithoutSellOrders": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the hero",
            "example": "unique-id-string"
          },
          "handle": {
            "type": "string",
            "description": "Handle of the hero",
            "example": "hero_handle"
          },
          "name": {
            "type": "string",
            "description": "Name of the hero",
            "example": "Hero Name"
          },
          "previous_rank": {
            "type": "number",
            "description": "Previous rank of the hero",
            "example": 0
          },
          "is_player": {
            "type": "boolean",
            "description": "Indicates if the hero is a player",
            "example": false
          },
          "is_blue_verified": {
            "type": "boolean",
            "description": "Indicates if the hero is blue verified",
            "example": false
          },
          "default_profile_image": {
            "type": "boolean",
            "description": "Indicates if the hero has a default profile image",
            "example": false
          },
          "description": {
            "type": "string",
            "description": "Description of the hero",
            "example": "Hero description here"
          },
          "fast_followers_count": {
            "type": "number",
            "description": "Count of fast followers",
            "example": 0
          },
          "favourites_count": {
            "format": "int64",
            "type": "integer",
            "description": "Count of favourites",
            "example": 0
          },
          "followers_count": {
            "format": "int64",
            "type": "integer",
            "description": "Count of followers",
            "example": 0
          },
          "friends_count": {
            "type": "number",
            "description": "Count of friends",
            "example": 0
          },
          "listed_count": {
            "type": "number",
            "description": "Listed count",
            "example": 0
          },
          "location": {
            "type": "string",
            "description": "Location of the hero",
            "example": "Location here"
          },
          "media_count": {
            "type": "number",
            "description": "Media count",
            "example": 0
          },
          "possibly_sensitive": {
            "type": "boolean",
            "description": "Indicates if the hero is possibly sensitive",
            "example": false
          },
          "profile_banner_url": {
            "type": "string",
            "description": "URL of the profile banner",
            "example": "http://banner.url"
          },
          "profile_image_url_https": {
            "type": "string",
            "description": "URL of the profile image in HTTPS",
            "example": "http://profileimage.url"
          },
          "has_banner": {
            "type": "boolean",
            "description": "Indicates if the hero has a banner",
            "example": false
          },
          "verified": {
            "type": "boolean",
            "description": "Indicates if the hero is verified",
            "example": false
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-07-01T13:34:57.306Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-07-01T13:35:04.802Z"
          },
          "statuses_count": {
            "type": "number",
            "description": "Count of statuses",
            "example": 0
          },
          "stars": {
            "type": "number",
            "description": "Stars of the hero",
            "example": 3
          },
          "player_address": {
            "type": "string",
            "description": "Player address of the hero",
            "example": "player_address_here"
          },
          "can_be_packed": {
            "type": "boolean",
            "description": "Indicates if the hero can be packed",
            "example": true
          },
          "previous_stars": {
            "type": "number",
            "description": "Previous stars of the hero",
            "example": 3
          },
          "star_gain": {
            "type": "number",
            "description": "Star gain of the hero",
            "example": 0
          },
          "tactic_scores": {
            "description": "List of hero_scores",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OmitTypeClass"
            }
          },
          "tournament_histories": {
            "description": "List of card hero swapping",
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "volume": {
            "type": "number",
            "description": "Volume of trade on hero (optional)"
          },
          "last_sale": {
            "type": "number",
            "description": "Last trade on hero (optional)"
          },
          "floor": {
            "type": "number",
            "description": "Floor price of hero (optional)"
          },
          "votes": {
            "description": "Votes from voting module",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OmitTypeClass"
            }
          },
          "status": {
            "type": "string",
            "description": "Status of the hero",
            "example": "TACTIC_ONLY",
            "examples": [
              "HERO",
              "TACTIC_ONLY",
              "DELETED",
              "PAUSED"
            ]
          },
          "credibility_average": {
            "description": "Credibility score",
            "allOf": [
              {
                "$ref": "#/components/schemas/CredibilityAverage"
              }
            ]
          },
          "tactic_image_prefix": {
            "type": "string",
            "description": "Tactic image prefix",
            "example": "argent"
          },
          "metadata": {
            "type": "object",
            "description": "Metadata of the hero",
            "example": "{}"
          },
          "coin_id": {
            "type": "string",
            "description": "coin_id: contract address and network id of codex.io",
            "example": "acatzTjUeHDT3SoufN6NMxGUmBFtoqFHnFwusdw8kYX:1399811149"
          },
          "coin": {
            "description": "Coin",
            "allOf": [
              {
                "$ref": "#/components/schemas/Coin"
              }
            ]
          },
          "current": {
            "description": "Current score of the hero",
            "allOf": [
              {
                "$ref": "#/components/schemas/Current"
              }
            ]
          },
          "bid_orders": {
            "description": "Bid orders of the hero",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BidOrder"
            }
          },
          "trades": {
            "description": "Trades of the hero",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Trade"
            }
          },
          "floor_price": {
            "type": "number",
            "description": "Floor price of the hero",
            "example": 0
          },
          "highest_bid": {
            "type": "number",
            "description": "Highest bid of the hero",
            "example": 0
          },
          "expected_score": {
            "description": "Expected score of the hero for tournament",
            "example": 0,
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "flags": {
            "description": "Flags of the hero",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HeroFlag"
            }
          }
        },
        "required": [
          "id",
          "handle",
          "name",
          "previous_rank",
          "is_player",
          "is_blue_verified",
          "default_profile_image",
          "fast_followers_count",
          "favourites_count",
          "followers_count",
          "friends_count",
          "listed_count",
          "media_count",
          "possibly_sensitive",
          "has_banner",
          "verified",
          "created_at",
          "updated_at",
          "statuses_count",
          "stars",
          "can_be_packed",
          "previous_stars",
          "tactic_scores",
          "tournament_histories",
          "status",
          "credibility_average",
          "tactic_image_prefix",
          "metadata",
          "coin_id",
          "coin",
          "bid_orders",
          "trades",
          "floor_price",
          "highest_bid",
          "expected_score",
          "flags"
        ]
      },
      "CardWithoutHeroes": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "hero_id": {
            "type": "string"
          },
          "rarity": {
            "type": "number"
          },
          "hero_rarity_index": {
            "type": "string"
          },
          "token_id": {
            "$ref": "#/components/schemas/DecimalNumber"
          },
          "season": {
            "type": "number"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "picture": {
            "type": "string"
          },
          "is_in_deck": {
            "type": "boolean"
          },
          "tx_hash": {
            "type": "string"
          },
          "blocknumber": {
            "type": "number"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "in_deck": {
            "type": "boolean"
          },
          "picture_url": {
            "type": "string"
          },
          "edition": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "owner",
          "hero_id",
          "rarity",
          "hero_rarity_index",
          "token_id",
          "season",
          "created_at",
          "updated_at",
          "picture",
          "is_in_deck",
          "blocknumber"
        ]
      },
      "SellOrder": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID as a BigInt value"
          },
          "card_id": {
            "type": "string",
            "description": "Card ID composed of {tokenId}_{FantasyCollectionAddress}, unique"
          },
          "hero_id": {
            "type": "string",
            "description": "Hero ID"
          },
          "hero_rarity_index": {
            "type": "string",
            "description": "Hero rarity index"
          },
          "trader": {
            "type": "string",
            "description": "Trader"
          },
          "side": {
            "type": "number",
            "description": "Side 1 for sell, 0 for buy",
            "default": 1
          },
          "collection": {
            "type": "string",
            "description": "Collection"
          },
          "token_id": {
            "type": "string",
            "description": "Token ID as a BigInt value"
          },
          "payment_token": {
            "type": "string",
            "description": "Payment token"
          },
          "expiration_time": {
            "type": "string",
            "description": "Expiration time as a BigInt value"
          },
          "merkle_root": {
            "type": "string",
            "description": "Merkle root"
          },
          "salt": {
            "type": "string",
            "description": "Salt as a BigInt value"
          },
          "price": {
            "type": "string",
            "description": "Price"
          },
          "price_numeric": {
            "type": "string",
            "description": "Price numeric as a Decimal value"
          },
          "order_hash": {
            "type": "string",
            "description": "Order hash, optional"
          },
          "signature": {
            "type": "string",
            "description": "Signature, unique"
          },
          "rarity": {
            "type": "number",
            "description": "Rarity"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date, optional"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Update date, optional"
          },
          "is_locked": {
            "type": "boolean",
            "description": "Is locked"
          },
          "heroes": {
            "description": "Hero",
            "allOf": [
              {
                "$ref": "#/components/schemas/HeroWithoutSellOrders"
              }
            ]
          },
          "cards": {
            "description": "Card",
            "allOf": [
              {
                "$ref": "#/components/schemas/CardWithoutHeroes"
              }
            ]
          }
        },
        "required": [
          "id",
          "card_id",
          "hero_id",
          "hero_rarity_index",
          "trader",
          "side",
          "collection",
          "token_id",
          "payment_token",
          "expiration_time",
          "merkle_root",
          "salt",
          "price",
          "price_numeric",
          "signature",
          "rarity"
        ]
      },
      "Hero": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the hero",
            "example": "unique-id-string"
          },
          "handle": {
            "type": "string",
            "description": "Handle of the hero",
            "example": "hero_handle"
          },
          "name": {
            "type": "string",
            "description": "Name of the hero",
            "example": "Hero Name"
          },
          "previous_rank": {
            "type": "number",
            "description": "Previous rank of the hero",
            "example": 0
          },
          "is_player": {
            "type": "boolean",
            "description": "Indicates if the hero is a player",
            "example": false
          },
          "is_blue_verified": {
            "type": "boolean",
            "description": "Indicates if the hero is blue verified",
            "example": false
          },
          "default_profile_image": {
            "type": "boolean",
            "description": "Indicates if the hero has a default profile image",
            "example": false
          },
          "description": {
            "type": "string",
            "description": "Description of the hero",
            "example": "Hero description here"
          },
          "fast_followers_count": {
            "type": "number",
            "description": "Count of fast followers",
            "example": 0
          },
          "favourites_count": {
            "format": "int64",
            "type": "integer",
            "description": "Count of favourites",
            "example": 0
          },
          "followers_count": {
            "format": "int64",
            "type": "integer",
            "description": "Count of followers",
            "example": 0
          },
          "friends_count": {
            "type": "number",
            "description": "Count of friends",
            "example": 0
          },
          "listed_count": {
            "type": "number",
            "description": "Listed count",
            "example": 0
          },
          "location": {
            "type": "string",
            "description": "Location of the hero",
            "example": "Location here"
          },
          "media_count": {
            "type": "number",
            "description": "Media count",
            "example": 0
          },
          "possibly_sensitive": {
            "type": "boolean",
            "description": "Indicates if the hero is possibly sensitive",
            "example": false
          },
          "profile_banner_url": {
            "type": "string",
            "description": "URL of the profile banner",
            "example": "http://banner.url"
          },
          "profile_image_url_https": {
            "type": "string",
            "description": "URL of the profile image in HTTPS",
            "example": "http://profileimage.url"
          },
          "has_banner": {
            "type": "boolean",
            "description": "Indicates if the hero has a banner",
            "example": false
          },
          "verified": {
            "type": "boolean",
            "description": "Indicates if the hero is verified",
            "example": false
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-07-01T13:34:57.306Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-07-01T13:35:04.802Z"
          },
          "statuses_count": {
            "type": "number",
            "description": "Count of statuses",
            "example": 0
          },
          "stars": {
            "type": "number",
            "description": "Stars of the hero",
            "example": 3
          },
          "player_address": {
            "type": "string",
            "description": "Player address of the hero",
            "example": "player_address_here"
          },
          "can_be_packed": {
            "type": "boolean",
            "description": "Indicates if the hero can be packed",
            "example": true
          },
          "previous_stars": {
            "type": "number",
            "description": "Previous stars of the hero",
            "example": 3
          },
          "star_gain": {
            "type": "number",
            "description": "Star gain of the hero",
            "example": 0
          },
          "tactic_scores": {
            "description": "List of hero_scores",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OmitTypeClass"
            }
          },
          "tournament_histories": {
            "description": "List of card hero swapping",
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "volume": {
            "type": "number",
            "description": "Volume of trade on hero (optional)"
          },
          "last_sale": {
            "type": "number",
            "description": "Last trade on hero (optional)"
          },
          "floor": {
            "type": "number",
            "description": "Floor price of hero (optional)"
          },
          "votes": {
            "description": "Votes from voting module",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OmitTypeClass"
            }
          },
          "status": {
            "type": "string",
            "description": "Status of the hero",
            "example": "TACTIC_ONLY",
            "examples": [
              "HERO",
              "TACTIC_ONLY",
              "DELETED",
              "PAUSED"
            ]
          },
          "credibility_average": {
            "description": "Credibility score",
            "allOf": [
              {
                "$ref": "#/components/schemas/CredibilityAverage"
              }
            ]
          },
          "tactic_image_prefix": {
            "type": "string",
            "description": "Tactic image prefix",
            "example": "argent"
          },
          "metadata": {
            "type": "object",
            "description": "Metadata of the hero",
            "example": "{}"
          },
          "coin_id": {
            "type": "string",
            "description": "coin_id: contract address and network id of codex.io",
            "example": "acatzTjUeHDT3SoufN6NMxGUmBFtoqFHnFwusdw8kYX:1399811149"
          },
          "coin": {
            "description": "Coin",
            "allOf": [
              {
                "$ref": "#/components/schemas/Coin"
              }
            ]
          },
          "current": {
            "description": "Current score of the hero",
            "allOf": [
              {
                "$ref": "#/components/schemas/Current"
              }
            ]
          },
          "sell_orders": {
            "description": "Sell orders of the hero",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SellOrder"
            }
          },
          "bid_orders": {
            "description": "Bid orders of the hero",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BidOrder"
            }
          },
          "trades": {
            "description": "Trades of the hero",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Trade"
            }
          },
          "floor_price": {
            "type": "number",
            "description": "Floor price of the hero",
            "example": 0
          },
          "highest_bid": {
            "type": "number",
            "description": "Highest bid of the hero",
            "example": 0
          },
          "expected_score": {
            "description": "Expected score of the hero for tournament",
            "example": 0,
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "flags": {
            "description": "Flags of the hero",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HeroFlag"
            }
          }
        },
        "required": [
          "id",
          "handle",
          "name",
          "previous_rank",
          "is_player",
          "is_blue_verified",
          "default_profile_image",
          "fast_followers_count",
          "favourites_count",
          "followers_count",
          "friends_count",
          "listed_count",
          "media_count",
          "possibly_sensitive",
          "has_banner",
          "verified",
          "created_at",
          "updated_at",
          "statuses_count",
          "stars",
          "can_be_packed",
          "previous_stars",
          "tactic_scores",
          "tournament_histories",
          "status",
          "credibility_average",
          "tactic_image_prefix",
          "metadata",
          "coin_id",
          "coin",
          "sell_orders",
          "bid_orders",
          "trades",
          "floor_price",
          "highest_bid",
          "expected_score",
          "flags"
        ]
      },
      "Card": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "hero_id": {
            "type": "string"
          },
          "heroes": {
            "$ref": "#/components/schemas/Hero"
          },
          "rarity": {
            "type": "number"
          },
          "hero_rarity_index": {
            "type": "string"
          },
          "token_id": {
            "$ref": "#/components/schemas/DecimalNumber"
          },
          "season": {
            "type": "number"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "picture": {
            "type": "string"
          },
          "is_in_deck": {
            "type": "boolean"
          },
          "tx_hash": {
            "type": "string"
          },
          "blocknumber": {
            "type": "number"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "in_deck": {
            "type": "boolean"
          },
          "picture_url": {
            "type": "string"
          },
          "edition": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "owner",
          "hero_id",
          "heroes",
          "rarity",
          "hero_rarity_index",
          "token_id",
          "season",
          "created_at",
          "updated_at",
          "picture",
          "is_in_deck",
          "blocknumber"
        ]
      },
      "GetCardsByIdsForOpenPacksDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "hero_id": {
            "type": "string"
          },
          "picture": {
            "type": "string"
          },
          "picture_url": {
            "type": "string"
          },
          "stars": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "hero_id",
          "picture",
          "stars"
        ]
      },
      "GetPlayerCardsOfHero_SellOrderDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID as a BigInt value"
          }
        },
        "required": [
          "id"
        ]
      },
      "GetPlayerCardsOfHeroDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "sell_orders": {
            "$ref": "#/components/schemas/GetPlayerCardsOfHero_SellOrderDTO"
          }
        },
        "required": [
          "id"
        ]
      },
      "GetPlayerCardsMarketHistory_SellOrderDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID as a BigInt value"
          },
          "trader": {
            "type": "string",
            "description": "Trader"
          },
          "collection": {
            "type": "string",
            "description": "Collection"
          },
          "token_id": {
            "type": "string",
            "description": "Token ID as a BigInt value"
          },
          "payment_token": {
            "type": "string",
            "description": "Payment token"
          },
          "expiration_time": {
            "type": "string",
            "description": "Expiration time as a BigInt value"
          },
          "merkle_root": {
            "type": "string",
            "description": "Merkle root"
          },
          "salt": {
            "type": "string",
            "description": "Salt as a BigInt value"
          },
          "price": {
            "type": "string",
            "description": "Price"
          },
          "price_numeric": {
            "type": "string",
            "description": "Price numeric as a Decimal value"
          }
        },
        "required": [
          "id",
          "trader",
          "collection",
          "token_id",
          "payment_token",
          "expiration_time",
          "merkle_root",
          "salt",
          "price",
          "price_numeric"
        ]
      },
      "GetPlayerCardsMarketDetailsDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "token_id": {
            "$ref": "#/components/schemas/DecimalNumber"
          },
          "picture": {
            "type": "string"
          },
          "is_in_deck": {
            "type": "boolean"
          },
          "edition": {
            "type": "string"
          },
          "in_which_tournament": {
            "type": "string"
          },
          "activeSellOrder": {
            "$ref": "#/components/schemas/GetPlayerCardsMarketHistory_SellOrderDTO"
          },
          "acquisitionPrice": {
            "$ref": "#/components/schemas/DecimalNumber"
          }
        },
        "required": [
          "id",
          "owner",
          "token_id",
          "picture",
          "is_in_deck"
        ]
      },
      "GetCardsByHeroRarityIndexDTO": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string"
          },
          "token_id": {
            "$ref": "#/components/schemas/DecimalNumber"
          }
        },
        "required": [
          "owner",
          "token_id"
        ]
      },
      "MetaDTO": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "description": "Total number of items"
          },
          "lastPage": {
            "type": "number",
            "description": "Last page number"
          },
          "currentPage": {
            "type": "number",
            "description": "Current page number"
          },
          "perPage": {
            "type": "number",
            "description": "Number of items per page"
          },
          "prev": {
            "type": "number",
            "description": "Previous page number",
            "nullable": true
          },
          "next": {
            "type": "number",
            "description": "Next page number",
            "nullable": true
          }
        },
        "required": [
          "total",
          "lastPage",
          "currentPage",
          "perPage",
          "prev",
          "next"
        ]
      },
      "PaginatedCardResult": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Data items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Card"
            }
          },
          "meta": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaDTO"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "PaginationDTO": {
        "type": "object",
        "properties": {
          "page": {
            "type": "number",
            "description": "Page number",
            "default": 1,
            "minimum": 1,
            "maximum": 1000
          },
          "limit": {
            "type": "number",
            "description": "Number of items per page",
            "default": 50,
            "minimum": 1,
            "maximum": 1000
          }
        },
        "required": [
          "page",
          "limit"
        ]
      },
      "StringFilterDTO": {
        "type": "object",
        "properties": {
          "equals": {
            "type": "string"
          },
          "in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "notIn": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "lt": {
            "type": "string"
          },
          "lte": {
            "type": "string"
          },
          "gt": {
            "type": "string"
          },
          "gte": {
            "type": "string"
          },
          "contains": {
            "type": "string"
          },
          "startsWith": {
            "type": "string"
          },
          "endsWith": {
            "type": "string"
          },
          "mode": {
            "type": "string",
            "enum": [
              "default",
              "insensitive"
            ]
          },
          "not": {
            "$ref": "#/components/schemas/StringFilterDTO"
          }
        }
      },
      "GetPlayersCardsHeroWhereDTO": {
        "type": "object",
        "properties": {
          "handle": {
            "$ref": "#/components/schemas/StringFilterDTO"
          },
          "name": {
            "$ref": "#/components/schemas/StringFilterDTO"
          }
        }
      },
      "NumberFilterDTO": {
        "type": "object",
        "properties": {
          "equals": {
            "type": "number"
          },
          "in": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "notIn": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "lt": {
            "type": "number"
          },
          "lte": {
            "type": "number"
          },
          "gt": {
            "type": "number"
          },
          "gte": {
            "type": "number"
          },
          "not": {
            "$ref": "#/components/schemas/NumberFilterDTO"
          }
        }
      },
      "GetPlayerCardsWhereDTO": {
        "type": "object",
        "properties": {
          "heroes": {
            "$ref": "#/components/schemas/GetPlayersCardsHeroWhereDTO"
          },
          "rarity": {
            "$ref": "#/components/schemas/NumberFilterDTO"
          },
          "is_in_deck": {
            "type": "boolean"
          }
        }
      },
      "GetPlayerAllCardsDTO": {
        "type": "object",
        "properties": {
          "pagination": {
            "description": "Pagination arguments",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationDTO"
              }
            ]
          },
          "where": {
            "$ref": "#/components/schemas/GetPlayerCardsWhereDTO"
          },
          "orderBy": {
            "type": "string",
            "enum": [
              "cards_score",
              "cards_number",
              "cards_score_asc",
              "cards_score_desc"
            ]
          }
        }
      },
      "CardWithNumber": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "hero_id": {
            "type": "string"
          },
          "heroes": {
            "$ref": "#/components/schemas/Hero"
          },
          "rarity": {
            "type": "number"
          },
          "hero_rarity_index": {
            "type": "string"
          },
          "token_id": {
            "$ref": "#/components/schemas/DecimalNumber"
          },
          "season": {
            "type": "number"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "picture": {
            "type": "string"
          },
          "is_in_deck": {
            "type": "boolean"
          },
          "tx_hash": {
            "type": "string"
          },
          "blocknumber": {
            "type": "number"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "in_deck": {
            "type": "boolean"
          },
          "picture_url": {
            "type": "string"
          },
          "edition": {
            "type": "string"
          },
          "card_number": {
            "type": "number"
          },
          "in_deck_number": {
            "type": "number"
          },
          "listed_card_number": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "owner",
          "hero_id",
          "heroes",
          "rarity",
          "hero_rarity_index",
          "token_id",
          "season",
          "created_at",
          "updated_at",
          "picture",
          "is_in_deck",
          "blocknumber",
          "card_number",
          "listed_card_number"
        ]
      },
      "PaginatedCardWithNumberResult": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Data items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CardWithNumber"
            }
          },
          "meta": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaDTO"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "GetPlayerGroupedCardsDTO": {
        "type": "object",
        "properties": {
          "pagination": {
            "description": "Pagination arguments",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationDTO"
              }
            ]
          },
          "where": {
            "$ref": "#/components/schemas/GetPlayerCardsWhereDTO"
          },
          "orderBy": {
            "type": "string",
            "enum": [
              "cards_score",
              "cards_number",
              "cards_score_asc",
              "cards_score_desc"
            ]
          },
          "isReverseScoreTournament": {
            "type": "boolean"
          },
          "isGalleryView": {
            "type": "boolean"
          }
        }
      },
      "GetCardsForDeckBuilderDTO": {
        "type": "object",
        "properties": {
          "pagination": {
            "description": "Pagination arguments",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationDTO"
              }
            ]
          },
          "where": {
            "$ref": "#/components/schemas/GetPlayerCardsWhereDTO"
          },
          "isReverseScoreTournament": {
            "type": "boolean"
          }
        }
      },
      "HeroSupplyDto": {
        "type": "object",
        "properties": {
          "rarity": {
            "type": "number"
          },
          "supply": {
            "type": "number"
          }
        },
        "required": [
          "rarity",
          "supply"
        ]
      },
      "GetLastActivityQueryDTO": {
        "type": "object",
        "properties": {
          "activityType": {
            "type": "string",
            "enum": [
              "ALL",
              "MINT_PACK",
              "WIN_CARD",
              "BURN_CARD",
              "LEVEL_UP",
              "SAVE_DECK",
              "TRADE",
              "LISTING",
              "BID"
            ],
            "description": "Filter by activity type"
          },
          "pagination": {
            "description": "Pagination arguments",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationDTO"
              }
            ]
          }
        }
      },
      "GetLastActivityPlayerDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "handle": {
            "type": "string"
          },
          "profile_picture": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "handle",
          "profile_picture"
        ]
      },
      "GetLastActivityHeroDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "handle": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "handle"
        ]
      },
      "GetLastActivityCardDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "hero": {
            "$ref": "#/components/schemas/GetLastActivityHeroDto"
          },
          "hero_rarity_index": {
            "type": "string"
          },
          "rarity": {
            "type": "number"
          },
          "picture": {
            "type": "string"
          },
          "token_id": {
            "type": "string"
          },
          "season": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "hero",
          "hero_rarity_index",
          "rarity",
          "picture",
          "token_id",
          "season"
        ]
      },
      "GetLastActivityDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "ALL",
              "MINT_PACK",
              "WIN_CARD",
              "BURN_CARD",
              "LEVEL_UP",
              "SAVE_DECK",
              "TRADE",
              "LISTING",
              "BID"
            ]
          },
          "player": {
            "$ref": "#/components/schemas/GetLastActivityPlayerDto"
          },
          "player_2": {
            "$ref": "#/components/schemas/GetLastActivityPlayerDto"
          },
          "date": {
            "format": "date-time",
            "type": "string"
          },
          "price": {
            "type": "string"
          },
          "hero": {
            "$ref": "#/components/schemas/GetLastActivityHeroDto"
          },
          "card": {
            "$ref": "#/components/schemas/GetLastActivityCardDto"
          },
          "burnt": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetLastActivityCardDto"
            }
          },
          "packed": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetLastActivityCardDto"
            }
          },
          "tournamentName": {
            "type": "string"
          },
          "rarity_burned": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "type",
          "player",
          "player_2",
          "date"
        ]
      },
      "getMerkleProofDTO": {
        "type": "object",
        "properties": {
          "proof": {
            "example": [
              "0x12a9527bc43f4e8372e5d137e33dd17a15e9a8cf438e5b675e292476ae93fba7",
              "0x9acec67364821aff3cd6d7b4a8bad603aa168754f3d2836028f4dedcdf5f7029",
              "0x8e0bb0011829108de90319038b5f620b2d25bfe28955f09793b650c8bbdc723e",
              "0x8a65f49273a8b5fd644041e420a52652b6a7f1b8ce0393b4bdaab19b07053d7d",
              "0xf9377f73725cbfdb9db68fd8052d71d2e000bade7a4e66785b731506e239bf8e",
              "0x3fb3613ce99da8d41eff15b31ec15a442c1fd9d5ac24c3123f729bbbb2a555bb",
              "0xa3d9b5969885e99130574d8666b10ed2c0d53a7f32ff32f6e88c087f1b1f08fc",
              "0xd95445fe1548766bf0836df3e4c726f8c7d1039985456fa9941342f63447b608",
              "0x4a01477975cf4915771a8d3cf9f8297c2a98bc3df9f7954c514db1c580315861",
              "0x3169b3cb64a7409977df5d1205bb836927d497b92838bab6fb8a972cb6cdc915",
              "0x3b934fe87e2f031979bc1f39cb1b5d03d53d6cb47b613f7a4961e5102463f9ff"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "proof"
        ]
      },
      "SellOrderDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Sell order ID",
            "example": "1"
          },
          "price": {
            "type": "string",
            "description": "Price of the sell order",
            "example": "0.1"
          }
        },
        "required": [
          "id",
          "price"
        ]
      },
      "GetCumulativeFloorPriceDTO": {
        "type": "object",
        "properties": {
          "total_price": {
            "type": "string",
            "description": "Total price of the cumulated floor prices",
            "example": "0.5"
          },
          "sell_orders": {
            "description": "Array of sell orders with their prices",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SellOrderDTO"
            }
          }
        },
        "required": [
          "total_price",
          "sell_orders"
        ]
      },
      "VerifySellOrdersDTO": {
        "type": "object",
        "properties": {
          "sellOrders": {
            "description": "Array of sell order IDs to verify",
            "example": [
              {
                "id": "1",
                "price": "0.1"
              },
              {
                "id": "2",
                "price": "0.2"
              },
              {
                "id": "3",
                "price": "0.3"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SellOrderDTO"
            }
          }
        },
        "required": [
          "sellOrders"
        ]
      },
      "PaginatedHeroResult": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Data items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Hero"
            }
          },
          "meta": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaDTO"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "CardHeroSwapping": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the card hero swapping",
            "example": "uuid-123"
          },
          "card_id": {
            "type": "string",
            "description": "Card ID",
            "example": "card-123"
          },
          "old_hero_id": {
            "type": "string",
            "description": "Old hero ID",
            "example": "old-hero-123"
          },
          "new_hero_id": {
            "type": "string",
            "description": "New hero ID",
            "example": "new-hero-456"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2023-05-20T12:34:56Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2023-05-20T12:34:56Z"
          },
          "vote_config_id": {
            "type": "string",
            "description": "Vote configuration ID",
            "example": "vote-config-123"
          },
          "is_processed": {
            "type": "boolean",
            "description": "Indicates if the swapping is processed",
            "example": false
          },
          "old_hero": {
            "description": "Old hero relationship",
            "allOf": [
              {
                "$ref": "#/components/schemas/Hero"
              }
            ]
          },
          "new_hero": {
            "description": "New hero relationship",
            "allOf": [
              {
                "$ref": "#/components/schemas/Hero"
              }
            ]
          },
          "coin": {
            "description": "Coin of the new hero",
            "allOf": [
              {
                "$ref": "#/components/schemas/Coin"
              }
            ]
          }
        },
        "required": [
          "id",
          "card_id",
          "old_hero_id",
          "new_hero_id",
          "created_at",
          "updated_at",
          "vote_config_id",
          "is_processed",
          "old_hero",
          "new_hero",
          "coin"
        ]
      },
      "HeroRewards": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the hero reward"
          },
          "hero_id": {
            "type": "string",
            "description": "ID of the hero"
          },
          "claim_asked": {
            "type": "boolean",
            "description": "Whether a claim has been asked"
          },
          "fantasy_points": {
            "description": "Fantasy points earned",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "date_computed": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the reward was computed"
          },
          "mint_revenue": {
            "description": "Mint revenue",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "fee_revenue": {
            "description": "Fee revenue",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "total_revenue": {
            "description": "Total revenue",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "gold": {
            "description": "Gold earned",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "shared_percentage": {
            "type": "number",
            "description": "Shared percentage"
          },
          "in_deck_holders_only": {
            "type": "boolean",
            "description": "Whether the reward is for in-deck holders only"
          },
          "claim_eth": {
            "description": "Claimed ETH",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "claim_gold": {
            "type": "number",
            "description": "Claimed gold"
          },
          "claim_fan": {
            "type": "number",
            "description": "Claimed fan points"
          },
          "player_address": {
            "type": "string",
            "description": "Player address"
          },
          "card_reward": {
            "type": "object",
            "description": "Card reward"
          },
          "distribution_condition": {
            "type": "object",
            "description": "Distribution condition"
          },
          "is_processed": {
            "type": "boolean",
            "description": "Whether the reward is processed"
          },
          "is_payout_done": {
            "type": "boolean",
            "description": "Whether the payout is done"
          },
          "are_cards_distributed": {
            "type": "boolean",
            "description": "Whether the cards are distributed"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp"
          }
        },
        "required": [
          "id",
          "hero_id",
          "claim_asked",
          "fantasy_points",
          "date_computed",
          "fee_revenue",
          "total_revenue",
          "in_deck_holders_only",
          "claim_eth",
          "claim_gold",
          "claim_fan",
          "is_processed",
          "is_payout_done",
          "are_cards_distributed",
          "created_at",
          "updated_at"
        ]
      },
      "TrendingHeroDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the hero"
          },
          "handle": {
            "type": "string",
            "description": "The handle of the hero"
          },
          "name": {
            "type": "string",
            "description": "The name of the hero"
          },
          "profile_image_url_https": {
            "type": "string",
            "description": "The URL of the hero's profile image"
          },
          "oneDayChange": {
            "type": "string",
            "description": "The price change over the last 24 hours in ETH"
          },
          "oneDayChangePercent": {
            "type": "string",
            "description": "The percentage price change over the last 24 hours"
          },
          "sevenDayChange": {
            "type": "string",
            "description": "The price change over the last 7 days in ETH"
          },
          "sevenDayChangePercent": {
            "type": "string",
            "description": "The percentage price change over the last 7 days"
          },
          "totalVolume": {
            "type": "string",
            "description": "The total trading volume for this hero in ETH"
          },
          "currentPrice": {
            "type": "string",
            "description": "The current price of the hero in ETH"
          },
          "views24hChange": {
            "type": "number",
            "description": "The change in tweet views over the last 24 hours"
          },
          "views7dChange": {
            "type": "number",
            "description": "The change in tweet views over the last 7 days"
          },
          "viewsChangePercent": {
            "type": "string",
            "description": "The change in tweet views over 24h in percentage"
          },
          "supply": {
            "type": "number",
            "description": "The total supply of the hero (excluding address 0x0...)"
          },
          "listedCards": {
            "type": "number",
            "description": "The number of listed cards for this hero"
          },
          "inDeck": {
            "type": "number",
            "description": "The number of heroes currently in deck"
          },
          "trendingScore": {
            "type": "string",
            "description": "The trending score of the hero"
          },
          "trendingReason": {
            "type": "string",
            "enum": [
              "floor_price",
              "views",
              "none"
            ]
          }
        },
        "required": [
          "id",
          "handle",
          "name",
          "profile_image_url_https",
          "oneDayChange",
          "oneDayChangePercent",
          "sevenDayChange",
          "sevenDayChangePercent",
          "totalVolume",
          "currentPrice",
          "views24hChange",
          "views7dChange",
          "viewsChangePercent",
          "supply",
          "listedCards",
          "inDeck",
          "trendingScore",
          "trendingReason"
        ]
      },
      "PaginatedTrendingHeroDTOResult": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Data items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrendingHeroDTO"
            }
          },
          "meta": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaDTO"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "GetHeroFeedDTO": {
        "type": "object",
        "properties": {
          "pagination": {
            "description": "Pagination arguments",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationDTO"
              }
            ]
          },
          "topHeroes": {
            "type": "number",
            "description": "Number of top heroes to include"
          },
          "date": {
            "format": "date-time",
            "type": "string",
            "description": "Start date for the feed"
          },
          "endDate": {
            "format": "date-time",
            "type": "string",
            "description": "End date for the feed"
          },
          "banger": {
            "type": "boolean",
            "description": "Whether to return banger tweets"
          },
          "handle": {
            "type": "string",
            "description": "Search for a specific hero"
          },
          "hideViewed": {
            "type": "boolean",
            "description": "Whether to hide viewed tweets"
          },
          "heroesOnly": {
            "type": "boolean",
            "description": "Whether to show only hero tweets",
            "default": false
          }
        }
      },
      "TweetHero": {
        "type": "object",
        "properties": {
          "handle": {
            "type": "string",
            "description": "Handle of the hero",
            "example": "hero_handle"
          },
          "name": {
            "type": "string",
            "description": "Name of the hero",
            "example": "Hero Name"
          },
          "profile_image_url_https": {
            "type": "string",
            "description": "URL of the profile image in HTTPS",
            "example": "http://profileimage.url"
          },
          "credibility_average": {
            "description": "Credibility score",
            "allOf": [
              {
                "$ref": "#/components/schemas/CredibilityAverage"
              }
            ]
          }
        },
        "required": [
          "handle",
          "name",
          "credibility_average"
        ]
      },
      "Interaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the interaction",
            "example": "123"
          },
          "tweet_id": {
            "type": "string",
            "description": "Id of the tweet",
            "example": "123"
          },
          "player_id": {
            "type": "string",
            "description": "Id of the player",
            "example": "123"
          },
          "is_like": {
            "type": "boolean",
            "description": "Is the interaction a like",
            "example": true
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Created at timestamp",
            "example": "2024-07-01T13:35:04.802Z"
          }
        },
        "required": [
          "id",
          "tweet_id",
          "player_id",
          "is_like",
          "created_at"
        ]
      },
      "InteractionSummary": {
        "type": "object",
        "properties": {
          "tweet_id": {
            "type": "string",
            "description": "Tweet ID",
            "example": "123"
          },
          "likes_count": {
            "type": "number",
            "description": "Likes count",
            "example": 10
          },
          "dislikes_count": {
            "type": "number",
            "description": "Dislikes count",
            "example": 2
          },
          "last_updated": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated",
            "example": "2025-04-25T19:55:30.309Z"
          }
        },
        "required": [
          "tweet_id",
          "likes_count",
          "dislikes_count",
          "last_updated"
        ]
      },
      "EnrichedTweet": {
        "type": "object",
        "properties": {
          "post_id": {
            "type": "string",
            "description": "Unique identifier for the tweet",
            "example": "tweet-id-123"
          },
          "hero_id": {
            "type": "string",
            "description": "ID of the hero who posted the tweet",
            "example": "hero-id-456"
          },
          "hero": {
            "description": "Hero",
            "allOf": [
              {
                "$ref": "#/components/schemas/TweetHero"
              }
            ]
          },
          "handle": {
            "type": "string",
            "description": "Twitter handle of the hero",
            "example": "@hero_handle"
          },
          "text": {
            "type": "string",
            "description": "Text for the tweet",
            "example": "I did another good tweet brother FANTARDIO"
          },
          "views": {
            "type": "number",
            "description": "Number of views for the tweet",
            "example": 1000
          },
          "likes": {
            "type": "number",
            "description": "Number of likes for the tweet",
            "example": 50
          },
          "retweets": {
            "type": "number",
            "description": "Number of retweets for the tweet",
            "example": 20
          },
          "quotes": {
            "type": "number",
            "description": "Number of quotes for the tweet",
            "example": 5
          },
          "bookmarks": {
            "type": "number",
            "description": "Number of bookmarks for the tweet",
            "example": 10
          },
          "replies": {
            "type": "number",
            "description": "Number of replies for the tweet",
            "example": 15
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp of the tweet",
            "example": "2024-07-01T13:35:04.802Z"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp of the tweet",
            "example": "2024-07-01T13:34:57.306Z"
          },
          "type": {
            "type": "string",
            "description": "Type of the tweet",
            "example": "original"
          },
          "certified_views": {
            "type": "number",
            "description": "Number of certified views for the tweet",
            "example": 500
          },
          "certified_likes": {
            "type": "number",
            "description": "Number of certified likes for the tweet",
            "example": 25
          },
          "certified_retweets": {
            "type": "number",
            "description": "Number of certified retweets for the tweet",
            "example": 10
          },
          "caped_ratio": {
            "type": "number",
            "description": "Caped ratio for the tweet",
            "example": 0.75
          },
          "cred_score": {
            "type": "number",
            "description": "Cred score for the tweet",
            "example": 0.85
          },
          "deep_cred_interaction_ratio": {
            "type": "number",
            "description": "Deep cred interaction ratio for the tweet",
            "example": 0.6
          },
          "high_cred_interaction_ratio": {
            "type": "number",
            "description": "High cred interaction ratio for the tweet",
            "example": 0.7
          },
          "likes_db_ratio": {
            "type": "number",
            "description": "Likes database ratio for the tweet",
            "example": 0.8
          },
          "replies_db_ratio": {
            "type": "number",
            "description": "Replies database ratio for the tweet",
            "example": 0.4
          },
          "retweets_db_ratio": {
            "type": "number",
            "description": "Retweets database ratio for the tweet",
            "example": 0.5
          },
          "quote_db_ratio": {
            "type": "number",
            "description": "Quote database ratio for the tweet",
            "example": 0.3
          },
          "quality_interaction": {
            "type": "number",
            "description": "Quality interaction score for the tweet, used for x game",
            "example": 0.7
          },
          "top_interacting_users": {
            "type": "object",
            "description": "Top interacting users for the tweet",
            "example": {
              "user1": 10,
              "user2": 5
            }
          },
          "deleted_at": {
            "format": "date-time",
            "type": "string",
            "description": "Deletion timestamp of the tweet",
            "example": "2024-07-01T13:35:04.802Z"
          },
          "interactions": {
            "description": "Interaction history for the tweet",
            "example": [
              {
                "id": "123",
                "tweet_id": "123",
                "player_id": "123",
                "is_like": true,
                "created_at": "2025-04-25T19:55:30.309Z"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Interaction"
            }
          },
          "interaction_summaries": {
            "description": "Interaction summary for the tweet",
            "example": {
              "tweet_id": "123",
              "likes_count": 10,
              "dislikes_count": 2,
              "last_updated": "2025-04-25T19:55:30.309Z"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/InteractionSummary"
              }
            ]
          },
          "conversation_id": {
            "type": "string",
            "description": "Conversation ID of the tweet",
            "example": "conversation-id-789"
          },
          "fire_score": {
            "type": "number",
            "description": "Fire score for the tweet",
            "example": 3
          },
          "health_score": {
            "type": "number",
            "description": "Health score for the tweet",
            "example": 1
          },
          "impact_score": {
            "type": "number",
            "description": "Impact score for the tweet",
            "example": 2
          }
        },
        "required": [
          "post_id",
          "hero_id",
          "hero",
          "handle",
          "text",
          "views",
          "likes",
          "retweets",
          "quotes",
          "bookmarks",
          "replies",
          "updated_at",
          "created_at",
          "type",
          "certified_views",
          "certified_likes",
          "certified_retweets",
          "caped_ratio",
          "cred_score",
          "deep_cred_interaction_ratio",
          "high_cred_interaction_ratio",
          "likes_db_ratio",
          "replies_db_ratio",
          "retweets_db_ratio",
          "quote_db_ratio",
          "quality_interaction",
          "top_interacting_users",
          "interactions",
          "interaction_summaries",
          "conversation_id",
          "fire_score",
          "health_score",
          "impact_score"
        ]
      },
      "PaginatedEnrichedTweetResult": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Data items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnrichedTweet"
            }
          },
          "meta": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaDTO"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "SetTweetViewedDto": {
        "type": "object",
        "properties": {}
      },
      "HeroTweetDTO": {
        "type": "object",
        "properties": {
          "post_id": {
            "type": "string"
          },
          "bookmarks": {
            "type": "number"
          },
          "likes": {
            "type": "number"
          },
          "quotes": {
            "type": "number"
          },
          "replies": {
            "type": "number"
          },
          "retweets": {
            "type": "number"
          },
          "views": {
            "type": "number"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "fire_score": {
            "type": "number"
          },
          "health_score": {
            "type": "number"
          },
          "impact_score": {
            "type": "number"
          },
          "top_interacting_users": {
            "type": "object"
          },
          "certified_views": {
            "type": "number"
          },
          "cred_score": {
            "type": "number"
          }
        },
        "required": [
          "post_id",
          "bookmarks",
          "likes",
          "quotes",
          "replies",
          "retweets",
          "views",
          "created_at",
          "type",
          "fire_score",
          "health_score",
          "impact_score",
          "top_interacting_users"
        ]
      },
      "GetTransactionDTO": {
        "type": "object",
        "properties": {
          "handle": {
            "type": "string",
            "description": "Hero handle"
          },
          "pagination": {
            "description": "Pagination arguments",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationDTO"
              }
            ]
          },
          "rarity": {
            "type": "number",
            "description": "Rarity"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp"
          }
        },
        "required": [
          "handle"
        ]
      },
      "Player": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "handle": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "profile_picture": {
            "type": "string"
          },
          "twitter_id": {
            "type": "string"
          },
          "google_id": {
            "type": "string"
          },
          "fantasy_points": {
            "type": "number"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "fantasy_points_referrals": {
            "type": "number"
          },
          "stars": {
            "type": "number"
          },
          "league": {
            "type": "number"
          },
          "is_hero": {
            "type": "boolean"
          },
          "is_onboarding_done": {
            "type": "boolean"
          },
          "gold": {
            "description": "Gold as a Decimal value",
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "tactics_referral_settings_id": {
            "type": "string"
          },
          "following_count": {
            "type": "number"
          },
          "post_count": {
            "type": "number"
          },
          "like_count": {
            "type": "number"
          },
          "is_x_verified": {
            "type": "boolean"
          },
          "follower_count": {
            "type": "number"
          },
          "can_play_free_tactics": {
            "type": "boolean"
          },
          "fragments": {
            "type": "number"
          },
          "are_nft_approved": {
            "type": "boolean"
          },
          "weth_allowance": {
            "description": "WETH allowance as a Decimal value",
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "monad_address": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "handle",
          "email",
          "profile_picture",
          "twitter_id",
          "google_id",
          "fantasy_points",
          "created_at",
          "updated_at",
          "fantasy_points_referrals",
          "stars",
          "league",
          "is_hero",
          "is_onboarding_done",
          "gold",
          "tactics_referral_settings_id",
          "follower_count",
          "can_play_free_tactics",
          "fragments",
          "are_nft_approved",
          "weth_allowance",
          "monad_address"
        ]
      },
      "TradesDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID",
            "example": "123"
          },
          "price": {
            "description": "Price",
            "example": "100",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "seller_id": {
            "type": "string",
            "description": "Seller ID",
            "example": "123"
          },
          "buyer_id": {
            "type": "string",
            "description": "Buyer ID",
            "example": "123"
          },
          "type": {
            "type": "string",
            "description": "Type",
            "example": "buy"
          },
          "hero_id": {
            "type": "string",
            "description": "Hero ID",
            "example": "123"
          },
          "payment_token": {
            "type": "string",
            "description": "Payment Token",
            "example": "123"
          },
          "order_hash": {
            "type": "string",
            "description": "Order Hash",
            "example": "123"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp",
            "example": "2021-01-01T00:00:00Z"
          },
          "block_number": {
            "type": "number",
            "description": "Block Number",
            "example": "123"
          },
          "tx_hash": {
            "type": "string",
            "description": "Transaction Hash",
            "example": "123"
          },
          "contract": {
            "type": "string",
            "description": "Contract",
            "example": "123"
          },
          "fantasy_card_id": {
            "type": "string",
            "description": "Fantasy Card ID",
            "example": "123"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Created At",
            "example": "2021-01-01T00:00:00Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Updated At",
            "example": "2021-01-01T00:00:00Z"
          },
          "hero_rarity_index": {
            "type": "string",
            "description": "Hero Rarity Index",
            "example": "123"
          },
          "card": {
            "description": "Card",
            "allOf": [
              {
                "$ref": "#/components/schemas/Card"
              }
            ]
          },
          "buyer": {
            "description": "Buyer",
            "allOf": [
              {
                "$ref": "#/components/schemas/Player"
              }
            ]
          },
          "seller": {
            "description": "Seller",
            "allOf": [
              {
                "$ref": "#/components/schemas/Player"
              }
            ]
          }
        },
        "required": [
          "id",
          "price",
          "seller_id",
          "buyer_id",
          "type",
          "hero_id",
          "payment_token",
          "order_hash",
          "timestamp",
          "block_number",
          "tx_hash",
          "contract",
          "fantasy_card_id",
          "created_at",
          "updated_at",
          "hero_rarity_index",
          "card",
          "buyer",
          "seller"
        ]
      },
      "PaginatedTradesDTOResult": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Data items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TradesDTO"
            }
          },
          "meta": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaDTO"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "HeroWithStatsOrderByDTO": {
        "type": "object",
        "properties": {
          "current_rank": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "previous_rank": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "views": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "tweet_count": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "fantasy_score": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          }
        }
      },
      "GetHeroesWithStatsDTO": {
        "type": "object",
        "properties": {
          "pagination": {
            "description": "Pagination arguments",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationDTO"
              }
            ]
          },
          "order_by": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HeroWithStatsOrderByDTO"
            }
          },
          "tournament_number": {
            "type": "number"
          },
          "search": {
            "type": "string",
            "default": "",
            "maxLength": 50
          },
          "tactic_only": {
            "type": "boolean",
            "default": false
          }
        },
        "required": [
          "tournament_number"
        ]
      },
      "HeroWithStatsDTO": {
        "type": "object",
        "properties": {
          "current_rank": {
            "type": "number"
          },
          "previous_rank": {
            "type": "number"
          },
          "views": {
            "type": "number"
          },
          "tweet_count": {
            "type": "number"
          },
          "fantasy_score": {
            "type": "number"
          },
          "reach": {
            "type": "number"
          },
          "avg_views": {
            "type": "number"
          },
          "followers_count": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "handle": {
            "type": "string"
          },
          "profile_image_url_https": {
            "type": "string"
          },
          "volume": {
            "type": "string"
          },
          "last_sale_price": {
            "type": "string"
          },
          "floor_price": {
            "type": "string"
          },
          "stars": {
            "type": "number"
          }
        },
        "required": [
          "current_rank",
          "previous_rank",
          "views",
          "tweet_count",
          "fantasy_score",
          "reach",
          "avg_views",
          "followers_count",
          "name",
          "handle",
          "profile_image_url_https",
          "volume",
          "last_sale_price",
          "floor_price",
          "stars"
        ]
      },
      "PaginatedHeroWithStatsDTOResult": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Data items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HeroWithStatsDTO"
            }
          },
          "meta": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaDTO"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "PlayerHeroInteractionDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "handle": {
            "type": "string"
          },
          "profile_picture": {
            "type": "string"
          },
          "replies": {
            "type": "number"
          },
          "retweets": {
            "type": "number"
          },
          "total": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "name",
          "handle",
          "profile_picture",
          "replies",
          "retweets",
          "total"
        ]
      },
      "ScoreHistory": {
        "type": "object",
        "properties": {
          "current_rank": {
            "type": "number",
            "description": "Current rank of the hero",
            "example": 1
          },
          "fantasy_score": {
            "description": "Fantasy score of the hero",
            "example": "100.00",
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp when this record was created",
            "example": "2024-07-01T13:34:57.306Z"
          }
        },
        "required": [
          "current_rank",
          "fantasy_score",
          "created_at"
        ]
      },
      "ScoreHistoryObject": {
        "type": "object",
        "properties": {
          "gliding_24h": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScoreHistory"
            }
          },
          "gliding_7d": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScoreHistory"
            }
          }
        },
        "required": [
          "gliding_24h",
          "gliding_7d"
        ]
      },
      "TournamentScoreHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the tournament history entry",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "current_rank": {
            "type": "number",
            "description": "Current rank of the hero",
            "example": 1
          },
          "views": {
            "format": "int64",
            "type": "integer",
            "description": "Number of views for the hero",
            "example": "1000"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-07-01T13:34:57.306Z"
          }
        },
        "required": [
          "id",
          "current_rank",
          "views",
          "created_at"
        ]
      },
      "HeroHistoryDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "handle": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "score_history": {
            "$ref": "#/components/schemas/ScoreHistoryObject"
          },
          "tournament_histories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TournamentScoreHistory"
            }
          }
        },
        "required": [
          "id",
          "handle",
          "name",
          "score_history",
          "tournament_histories"
        ]
      },
      "HeroTradeDTO": {
        "type": "object",
        "properties": {
          "tradeId": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "buyerId": {
            "type": "string"
          },
          "buyerName": {
            "type": "string"
          },
          "sellerId": {
            "type": "string"
          },
          "sellerName": {
            "type": "string"
          },
          "pictureUrl": {
            "type": "string"
          },
          "heroName": {
            "type": "string"
          },
          "txHash": {
            "type": "string"
          }
        },
        "required": [
          "tradeId",
          "price",
          "timestamp",
          "buyerId",
          "buyerName",
          "sellerId",
          "sellerName",
          "pictureUrl",
          "heroName",
          "txHash"
        ]
      },
      "HeroVolumeStatsDTO": {
        "type": "object",
        "properties": {
          "earnings30d": {
            "type": "number",
            "description": "Earnings in the last 30 days"
          },
          "trades7d": {
            "type": "number",
            "description": "Number of trades in the last 7 days"
          },
          "previousTrades7d": {
            "type": "number",
            "description": "Number of trades in the previous last 7 days"
          },
          "trades30d": {
            "type": "number",
            "description": "Number of trades in the last 30 days"
          },
          "previousTrades30d": {
            "type": "number",
            "description": "Number of trades in the previous last 30 days"
          },
          "tradesAllTime": {
            "type": "number",
            "description": "Number of trades in all time"
          },
          "volume7d": {
            "type": "string",
            "description": "Volume in the last 7 days"
          },
          "previousVolume7d": {
            "type": "string",
            "description": "Volume in the previous last 7 days"
          },
          "volume30d": {
            "type": "string",
            "description": "Volume in the last 30 days"
          },
          "previousVolume30d": {
            "type": "string",
            "description": "Volume in the previous last 30 days"
          },
          "volumeAllTime": {
            "type": "string",
            "description": "Total volume of all time"
          },
          "floorPrice7d": {
            "type": "string",
            "description": "Floor price in the last 7 days"
          },
          "currentFloorPrice": {
            "type": "string",
            "description": "Current floor price"
          }
        },
        "required": [
          "earnings30d",
          "trades7d",
          "previousTrades7d",
          "trades30d",
          "previousTrades30d",
          "tradesAllTime",
          "volume7d",
          "previousVolume7d",
          "volume30d",
          "previousVolume30d",
          "volumeAllTime",
          "floorPrice7d",
          "currentFloorPrice"
        ]
      },
      "CurrentStatsDTO": {
        "type": "object",
        "properties": {
          "current_rank": {
            "type": "number",
            "description": "Current rank of the hero"
          },
          "fantasy_score": {
            "type": "number",
            "description": "Fantasy score of the hero"
          },
          "tweet_count": {
            "type": "number",
            "description": "Number of tweets"
          },
          "reach": {
            "type": "number",
            "description": "Reach of the hero"
          },
          "totalViews": {
            "type": "number",
            "description": "Total views of tweets"
          },
          "totalCertifiedViews": {
            "type": "number",
            "description": "Total certified views of tweets"
          }
        },
        "required": [
          "current_rank",
          "fantasy_score",
          "tweet_count",
          "reach",
          "totalViews",
          "totalCertifiedViews"
        ]
      },
      "TournamentStatsDTO": {
        "type": "object",
        "properties": {
          "tournament_id": {
            "type": "string",
            "description": "ID of the tournament"
          },
          "start_date": {
            "format": "date-time",
            "type": "string",
            "description": "Start date of the tournament"
          },
          "end_date": {
            "format": "date-time",
            "type": "string",
            "description": "End date of the tournament"
          },
          "current_rank": {
            "type": "number",
            "description": "Current rank in the tournament"
          },
          "fantasy_score": {
            "type": "number",
            "description": "Fantasy score in the tournament"
          },
          "views": {
            "type": "number",
            "description": "Number of views in the tournament"
          },
          "tweet_count": {
            "type": "number",
            "description": "Number of tweets in the tournament"
          },
          "reach": {
            "type": "number",
            "description": "Reach in the tournament"
          }
        },
        "required": [
          "tournament_id",
          "start_date",
          "end_date",
          "current_rank",
          "fantasy_score",
          "views",
          "tweet_count",
          "reach"
        ]
      },
      "TacticStatsDTO": {
        "type": "object",
        "properties": {
          "tactic_id": {
            "type": "string",
            "description": "ID of the tactic"
          },
          "start_date": {
            "format": "date-time",
            "type": "string",
            "description": "Start date of the tactic"
          },
          "end_date": {
            "format": "date-time",
            "type": "string",
            "description": "End date of the tactic"
          },
          "tweet_count": {
            "type": "number",
            "description": "Tweet count of the tactic"
          },
          "current_rank": {
            "type": "number",
            "description": "Current rank of the tactic"
          },
          "fantasy_score": {
            "type": "number",
            "description": "Fantasy score of the tactic"
          },
          "views": {
            "type": "number",
            "description": "Views of the tactic"
          }
        },
        "required": [
          "tactic_id",
          "start_date",
          "end_date",
          "tweet_count",
          "current_rank",
          "fantasy_score",
          "views"
        ]
      },
      "HeroStatsDTO": {
        "type": "object",
        "properties": {
          "currentStats": {
            "description": "Current stats of the hero",
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrentStatsDTO"
              }
            ]
          },
          "tournamentStats": {
            "description": "Tournament stats of the hero",
            "allOf": [
              {
                "$ref": "#/components/schemas/TournamentStatsDTO"
              }
            ]
          },
          "tacticStats": {
            "description": "Tactic stats of the hero",
            "allOf": [
              {
                "$ref": "#/components/schemas/TacticStatsDTO"
              }
            ]
          }
        },
        "required": [
          "currentStats",
          "tournamentStats",
          "tacticStats"
        ]
      },
      "addCoinToHeroDTO": {
        "type": "object",
        "properties": {
          "heroId": {
            "type": "string",
            "description": "Hero ID",
            "example": "1084397942319054850"
          },
          "contract_address": {
            "type": "string",
            "description": "Contract address",
            "example": "acatzTjUeHDT3SoufN6NMxGUmBFtoqFHnFwusdw8kYX"
          },
          "network_name": {
            "type": "string",
            "description": "Network name (full or short)",
            "example": "Solana"
          },
          "force": {
            "type": "boolean",
            "description": "Force overwrite existing coin",
            "example": false
          }
        },
        "required": [
          "heroId",
          "contract_address",
          "network_name"
        ]
      },
      "GetHeroHoldersDTO": {
        "type": "object",
        "properties": {
          "heroHandle": {
            "type": "string"
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationDTO"
          },
          "rarities": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "heroHandle"
        ]
      },
      "HeroHolderDTO": {
        "type": "object",
        "properties": {
          "player": {
            "$ref": "#/components/schemas/Player"
          },
          "rarity1Count": {
            "type": "number"
          },
          "rarity2Count": {
            "type": "number"
          },
          "rarity3Count": {
            "type": "number"
          },
          "rarity4Count": {
            "type": "number"
          }
        },
        "required": [
          "player",
          "rarity1Count",
          "rarity2Count",
          "rarity3Count",
          "rarity4Count"
        ]
      },
      "PaginatedHeroHolderDTOResult": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Data items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HeroHolderDTO"
            }
          },
          "meta": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaDTO"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "HeroAnalyticsPrevWeekLastWeek_Tweet": {
        "type": "object",
        "properties": {
          "views": {
            "type": "number",
            "description": "Number of views for the tweet",
            "example": 1000
          },
          "likes": {
            "type": "number",
            "description": "Number of likes for the tweet",
            "example": 50
          },
          "retweets": {
            "type": "number",
            "description": "Number of retweets for the tweet",
            "example": 20
          },
          "quotes": {
            "type": "number",
            "description": "Number of quotes for the tweet",
            "example": 5
          },
          "bookmarks": {
            "type": "number",
            "description": "Number of bookmarks for the tweet",
            "example": 10
          },
          "replies": {
            "type": "number",
            "description": "Number of replies for the tweet",
            "example": 15
          }
        },
        "required": [
          "views",
          "likes",
          "retweets",
          "quotes",
          "bookmarks",
          "replies"
        ]
      },
      "HeroAnalyticsPrevWeekLastWeekDTO": {
        "type": "object",
        "properties": {
          "prev_week": {
            "description": "Previous week",
            "allOf": [
              {
                "$ref": "#/components/schemas/HeroAnalyticsPrevWeekLastWeek_Tweet"
              }
            ]
          },
          "last_week": {
            "description": "Last week",
            "allOf": [
              {
                "$ref": "#/components/schemas/HeroAnalyticsPrevWeekLastWeek_Tweet"
              }
            ]
          }
        },
        "required": [
          "prev_week",
          "last_week"
        ]
      },
      "Handle_HeroDistributionProbabilityDTO": {
        "type": "object",
        "properties": {
          "inflation_degree": {
            "type": "number",
            "description": "Inflation degree of the hero"
          }
        },
        "required": [
          "inflation_degree"
        ]
      },
      "Handle_CurrentDTO": {
        "type": "object",
        "properties": {
          "current_rank": {
            "type": "number",
            "description": "The current rank of the hero",
            "example": 1
          },
          "fantasy_score": {
            "description": "The fantasy score of the hero",
            "example": 1234.56,
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "views": {
            "format": "int64",
            "type": "integer",
            "description": "The total number of views for the hero's tweets",
            "example": 1000000
          }
        },
        "required": [
          "current_rank",
          "fantasy_score",
          "views"
        ]
      },
      "Handle_CardDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rarity": {
            "type": "number"
          },
          "picture": {
            "type": "string"
          },
          "picture_url": {
            "type": "string",
            "description": "Picture URL of the card with the stars"
          }
        },
        "required": [
          "id",
          "rarity",
          "picture",
          "picture_url"
        ]
      },
      "Handle_TradeDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID",
            "example": "123"
          },
          "price": {
            "description": "Price",
            "example": "100",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          }
        },
        "required": [
          "id",
          "price"
        ]
      },
      "Handle_UniqueSellOrdersDTO": {
        "type": "object",
        "properties": {
          "lowest_price": {
            "$ref": "#/components/schemas/DecimalNumber"
          },
          "hero_rarity_index": {
            "type": "string"
          }
        },
        "required": [
          "lowest_price",
          "hero_rarity_index"
        ]
      },
      "GetHeroByHandleOrAddressDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the hero",
            "example": "unique-id-string"
          },
          "handle": {
            "type": "string",
            "description": "Handle of the hero",
            "example": "hero_handle"
          },
          "name": {
            "type": "string",
            "description": "Name of the hero",
            "example": "Hero Name"
          },
          "is_player": {
            "type": "boolean",
            "description": "Indicates if the hero is a player",
            "example": false
          },
          "followers_count": {
            "format": "int64",
            "type": "integer",
            "description": "Count of followers",
            "example": 0
          },
          "profile_image_url_https": {
            "type": "string",
            "description": "URL of the profile image in HTTPS",
            "example": "http://profileimage.url"
          },
          "stars": {
            "type": "number",
            "description": "Stars of the hero",
            "example": 3
          },
          "status": {
            "type": "string",
            "description": "Status of the hero",
            "example": "TACTIC_ONLY",
            "examples": [
              "HERO",
              "TACTIC_ONLY",
              "DELETED",
              "PAUSED"
            ]
          },
          "metadata": {
            "type": "object",
            "description": "Metadata of the hero",
            "example": "{}"
          },
          "distribution_probability": {
            "description": "Distribution probability of the hero",
            "allOf": [
              {
                "$ref": "#/components/schemas/Handle_HeroDistributionProbabilityDTO"
              }
            ]
          },
          "current": {
            "description": "Current score of the hero",
            "allOf": [
              {
                "$ref": "#/components/schemas/Handle_CurrentDTO"
              }
            ]
          },
          "cards": {
            "description": "Cards of the hero",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Handle_CardDTO"
            }
          },
          "card_count": {
            "type": "number",
            "description": "Number of cards of the hero"
          },
          "trades": {
            "description": "Trades of the hero",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Handle_TradeDTO"
            }
          },
          "floor": {
            "description": "Floor of the hero",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Handle_UniqueSellOrdersDTO"
            }
          }
        },
        "required": [
          "id",
          "handle",
          "name",
          "is_player",
          "followers_count",
          "stars",
          "status",
          "metadata",
          "distribution_probability",
          "current",
          "cards",
          "card_count",
          "trades",
          "floor"
        ]
      },
      "GetBangerTweets_HeroDTO": {
        "type": "object",
        "properties": {
          "handle": {
            "type": "string",
            "description": "Handle of the hero",
            "example": "hero_handle"
          },
          "name": {
            "type": "string",
            "description": "Name of the hero",
            "example": "Hero Name"
          },
          "description": {
            "type": "string",
            "description": "Description of the hero",
            "example": "Hero description here"
          },
          "followers_count": {
            "format": "int64",
            "type": "integer",
            "description": "Count of followers",
            "example": 0
          },
          "profile_image_url_https": {
            "type": "string",
            "description": "URL of the profile image in HTTPS",
            "example": "http://profileimage.url"
          },
          "player_address": {
            "type": "string",
            "description": "Player address of the hero",
            "example": "player_address_here"
          },
          "status": {
            "type": "string",
            "description": "Status of the hero",
            "example": "TACTIC_ONLY",
            "examples": [
              "HERO",
              "TACTIC_ONLY",
              "DELETED",
              "PAUSED"
            ]
          }
        },
        "required": [
          "handle",
          "name",
          "followers_count",
          "status"
        ]
      },
      "GetBangerTweets_TweetDTO": {
        "type": "object",
        "properties": {
          "post_id": {
            "type": "string",
            "description": "Unique identifier for the tweet",
            "example": "tweet-id-123"
          },
          "hero_id": {
            "type": "string",
            "description": "ID of the hero who posted the tweet",
            "example": "hero-id-456"
          },
          "handle": {
            "type": "string",
            "description": "Twitter handle of the hero",
            "example": "@hero_handle"
          },
          "text": {
            "type": "string",
            "description": "Text for the tweet",
            "example": "I did another good tweet brother FANTARDIO"
          },
          "views": {
            "type": "number",
            "description": "Number of views for the tweet",
            "example": 1000
          },
          "likes": {
            "type": "number",
            "description": "Number of likes for the tweet",
            "example": 50
          },
          "retweets": {
            "type": "number",
            "description": "Number of retweets for the tweet",
            "example": 20
          },
          "quotes": {
            "type": "number",
            "description": "Number of quotes for the tweet",
            "example": 5
          },
          "bookmarks": {
            "type": "number",
            "description": "Number of bookmarks for the tweet",
            "example": 10
          },
          "replies": {
            "type": "number",
            "description": "Number of replies for the tweet",
            "example": 15
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp of the tweet",
            "example": "2024-07-01T13:35:04.802Z"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp of the tweet",
            "example": "2024-07-01T13:34:57.306Z"
          },
          "type": {
            "type": "string",
            "description": "Type of the tweet",
            "example": "original"
          },
          "certified_views": {
            "type": "number",
            "description": "Number of certified views for the tweet",
            "example": 500
          },
          "certified_likes": {
            "type": "number",
            "description": "Number of certified likes for the tweet",
            "example": 25
          },
          "certified_retweets": {
            "type": "number",
            "description": "Number of certified retweets for the tweet",
            "example": 10
          },
          "caped_ratio": {
            "type": "number",
            "description": "Caped ratio for the tweet",
            "example": 0.75
          },
          "cred_score": {
            "type": "number",
            "description": "Cred score for the tweet",
            "example": 0.85
          },
          "deep_cred_interaction_ratio": {
            "type": "number",
            "description": "Deep cred interaction ratio for the tweet",
            "example": 0.6
          },
          "high_cred_interaction_ratio": {
            "type": "number",
            "description": "High cred interaction ratio for the tweet",
            "example": 0.7
          },
          "likes_db_ratio": {
            "type": "number",
            "description": "Likes database ratio for the tweet",
            "example": 0.8
          },
          "replies_db_ratio": {
            "type": "number",
            "description": "Replies database ratio for the tweet",
            "example": 0.4
          },
          "retweets_db_ratio": {
            "type": "number",
            "description": "Retweets database ratio for the tweet",
            "example": 0.5
          },
          "quote_db_ratio": {
            "type": "number",
            "description": "Quote database ratio for the tweet",
            "example": 0.3
          },
          "quality_interaction": {
            "type": "number",
            "description": "Quality interaction score for the tweet, used for x game",
            "example": 0.7
          },
          "top_interacting_users": {
            "type": "object",
            "description": "Top interacting users for the tweet",
            "example": {
              "user1": 10,
              "user2": 5
            }
          },
          "deleted_at": {
            "format": "date-time",
            "type": "string",
            "description": "Deletion timestamp of the tweet",
            "example": "2024-07-01T13:35:04.802Z"
          },
          "interactions": {
            "description": "Interaction history for the tweet",
            "example": [
              {
                "id": "123",
                "tweet_id": "123",
                "player_id": "123",
                "is_like": true,
                "created_at": "2025-04-25T19:55:30.309Z"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Interaction"
            }
          },
          "interaction_summaries": {
            "description": "Interaction summary for the tweet",
            "example": {
              "tweet_id": "123",
              "likes_count": 10,
              "dislikes_count": 2,
              "last_updated": "2025-04-25T19:55:30.309Z"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/InteractionSummary"
              }
            ]
          },
          "conversation_id": {
            "type": "string",
            "description": "Conversation ID of the tweet",
            "example": "conversation-id-789"
          },
          "hero": {
            "description": "Hero of the tweet",
            "allOf": [
              {
                "$ref": "#/components/schemas/GetBangerTweets_HeroDTO"
              }
            ]
          }
        },
        "required": [
          "post_id",
          "hero_id",
          "handle",
          "text",
          "views",
          "likes",
          "retweets",
          "quotes",
          "bookmarks",
          "replies",
          "updated_at",
          "created_at",
          "type",
          "certified_views",
          "certified_likes",
          "certified_retweets",
          "caped_ratio",
          "cred_score",
          "deep_cred_interaction_ratio",
          "high_cred_interaction_ratio",
          "likes_db_ratio",
          "replies_db_ratio",
          "retweets_db_ratio",
          "quote_db_ratio",
          "quality_interaction",
          "top_interacting_users",
          "interactions",
          "interaction_summaries",
          "conversation_id",
          "hero"
        ]
      },
      "MetaInfiniteQueryDto": {
        "type": "object",
        "properties": {
          "lastPage": {
            "type": "number"
          },
          "hasNextPage": {
            "type": "boolean"
          },
          "limit": {
            "type": "number"
          }
        },
        "required": [
          "hasNextPage",
          "limit"
        ]
      },
      "GetBangerTweetsDTO": {
        "type": "object",
        "properties": {
          "tweets": {
            "description": "Banger tweets",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetBangerTweets_TweetDTO"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/MetaInfiniteQueryDto"
          }
        },
        "required": [
          "tweets",
          "meta"
        ]
      },
      "GetIsPlayerWaitingForTrackingResponseDTO": {
        "type": "object",
        "properties": {
          "is_waiting_for_tracking": {
            "type": "boolean",
            "description": "Whether the player is waiting for tracking",
            "example": true
          }
        },
        "required": [
          "is_waiting_for_tracking"
        ]
      },
      "GetIsPlayerTrackedResponseDTO": {
        "type": "object",
        "properties": {
          "is_tracked": {
            "type": "boolean",
            "description": "Whether the player is tracked",
            "example": true
          }
        },
        "required": [
          "is_tracked"
        ]
      },
      "GetTrackingEstimatedTimeResponseDTO": {
        "type": "object",
        "properties": {
          "people_in_queue": {
            "type": "number",
            "description": "Number of people in the queue",
            "example": 10
          },
          "time_to_finish_queue_in_min": {
            "type": "number",
            "description": "Time to finish the queue in minutes",
            "example": 10
          },
          "started_at": {
            "type": "string",
            "description": "When the tracking process started",
            "example": "2024-03-20T10:00:00.000Z"
          },
          "estimated_completion_at": {
            "type": "string",
            "description": "Estimated completion time",
            "example": "2024-03-20T11:00:00.000Z"
          }
        },
        "required": [
          "people_in_queue",
          "time_to_finish_queue_in_min"
        ]
      },
      "SearchCloutUsersQueryDTO": {
        "type": "object",
        "properties": {
          "search": {
            "type": "string",
            "description": "The query to search for"
          },
          "pagination": {
            "description": "Pagination parameters",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationDTO"
              }
            ]
          }
        },
        "required": [
          "search",
          "pagination"
        ]
      },
      "SearchCloutUsersResponseDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Twitter id of the player "
          },
          "name": {
            "type": "string",
            "description": "Name of the player"
          },
          "handle": {
            "type": "string",
            "description": "Handle of the player"
          },
          "profile_picture": {
            "type": "string",
            "description": "Profile image of the player"
          },
          "follower_count": {
            "type": "number",
            "description": "Follower count of the player"
          }
        },
        "required": [
          "id",
          "name",
          "handle",
          "profile_picture",
          "follower_count"
        ]
      },
      "PaginatedSearchCloutUsersResponseDTOResult": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Data items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchCloutUsersResponseDTO"
            }
          },
          "meta": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaDTO"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "GetCloutLeaderboardDTO": {
        "type": "object",
        "properties": {
          "pagination": {
            "description": "Pagination parameters",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationDTO"
              }
            ]
          },
          "search": {
            "type": "string",
            "description": "Search by hero name or handle"
          },
          "season": {
            "type": "number",
            "description": "Season number"
          }
        },
        "required": [
          "pagination"
        ]
      },
      "CloutLeaderboardDTO": {
        "type": "object",
        "properties": {
          "hero_id": {
            "type": "string",
            "description": "Hero ID"
          },
          "name": {
            "type": "string",
            "description": "Hero name"
          },
          "handle": {
            "type": "string",
            "description": "Hero handle"
          },
          "profile_image_url_https": {
            "type": "string",
            "description": "Profile image URL"
          },
          "total_clout": {
            "type": "number",
            "description": "Total clout score"
          },
          "final_rank": {
            "type": "number",
            "description": "Final rank"
          },
          "total_posts": {
            "type": "number",
            "description": "Total posts"
          },
          "total_views": {
            "type": "string",
            "description": "Total views"
          },
          "smart_follower_count": {
            "type": "number",
            "description": "Smart follower count"
          },
          "follower_count": {
            "type": "number",
            "description": "Follower count"
          },
          "season": {
            "type": "number",
            "description": "Season"
          },
          "last_clout_distribution": {
            "type": "number",
            "description": "Last clout distribution"
          },
          "previous_rank": {
            "type": "number",
            "description": "Previous rank"
          },
          "mindshare_percentage": {
            "type": "number",
            "description": "Percentage of total clout (mindshare)"
          }
        },
        "required": [
          "hero_id",
          "name",
          "handle",
          "profile_image_url_https",
          "total_clout",
          "final_rank",
          "total_posts",
          "total_views",
          "smart_follower_count",
          "follower_count",
          "season",
          "last_clout_distribution",
          "previous_rank",
          "mindshare_percentage"
        ]
      },
      "PaginatedCloutLeaderboardDTOResult": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Data items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CloutLeaderboardDTO"
            }
          },
          "meta": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaDTO"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "IncomingHeroesCloutDTO": {
        "type": "object",
        "properties": {
          "hero_id": {
            "type": "string",
            "description": "Hero ID"
          },
          "name": {
            "type": "string",
            "description": "Hero name"
          },
          "handle": {
            "type": "string",
            "description": "Hero handle"
          },
          "profile_image_url_https": {
            "type": "string",
            "description": "Profile image URL"
          },
          "total_clout": {
            "type": "number",
            "description": "Total clout score"
          },
          "final_rank": {
            "type": "number",
            "description": "Final rank"
          },
          "total_posts": {
            "type": "number",
            "description": "Total posts"
          },
          "total_views": {
            "type": "string",
            "description": "Total views"
          },
          "smart_follower_count": {
            "type": "number",
            "description": "Smart follower count"
          },
          "follower_count": {
            "type": "number",
            "description": "Follower count"
          },
          "season": {
            "type": "number",
            "description": "Season"
          },
          "last_clout_distribution": {
            "type": "number",
            "description": "Last clout distribution"
          },
          "previous_rank": {
            "type": "number",
            "description": "Previous rank"
          },
          "mindshare_percentage": {
            "type": "number",
            "description": "Percentage of total clout (mindshare)"
          },
          "type": {
            "type": "string",
            "description": "Type of hero"
          },
          "status": {
            "type": "string",
            "description": "Status of the hero"
          }
        },
        "required": [
          "hero_id",
          "name",
          "handle",
          "profile_image_url_https",
          "total_clout",
          "final_rank",
          "total_posts",
          "total_views",
          "smart_follower_count",
          "follower_count",
          "season",
          "last_clout_distribution",
          "previous_rank",
          "mindshare_percentage",
          "type",
          "status"
        ]
      },
      "HeroIsSybilDTO": {
        "type": "object",
        "properties": {
          "hero_id": {
            "type": "string",
            "description": "The hero ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "is_sybil": {
            "type": "boolean",
            "description": "The hero is sybil or not"
          }
        },
        "required": [
          "hero_id",
          "is_sybil"
        ]
      },
      "CurrentSeasonHeroQuickOverviewDTO": {
        "type": "object",
        "properties": {
          "season": {
            "type": "number",
            "description": "The season number",
            "example": 1
          },
          "total_clout": {
            "type": "number",
            "description": "The total clout of the hero in the current season",
            "example": 100
          },
          "final_rank": {
            "type": "number",
            "description": "The final rank of the hero in the current season",
            "example": 1
          },
          "total_posts": {
            "type": "number",
            "description": "The total posts of the hero in the current season",
            "example": 100
          },
          "total_views": {
            "type": "number",
            "description": "The total views of the hero in the current season",
            "example": 100
          },
          "last_clout_distribution": {
            "type": "number",
            "description": "The last clout distribution of the hero in the current season",
            "example": 100
          }
        },
        "required": [
          "season",
          "total_clout",
          "final_rank",
          "total_posts",
          "total_views",
          "last_clout_distribution"
        ]
      },
      "HeroQuickOverviewDTO": {
        "type": "object",
        "properties": {
          "hero_id": {
            "type": "string",
            "description": "The ID of the hero",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the hero",
            "example": "John Doe"
          },
          "handle": {
            "type": "string",
            "description": "The handle of the hero",
            "example": "@johndoe"
          },
          "profile_image_url_https": {
            "type": "string",
            "description": "The profile image URL of the hero",
            "example": "https://example.com/profile.jpg"
          },
          "profile_banner_url": {
            "type": "string",
            "description": "The profile banner URL of the hero",
            "example": "https://example.com/profile.jpg"
          },
          "follower_count": {
            "type": "number",
            "description": "The follower count of the hero",
            "example": 100
          },
          "is_sybil": {
            "type": "boolean",
            "description": "is the hero a sybil",
            "example": true
          },
          "smart_follower_count": {
            "type": "number",
            "description": "The smart follower count of the hero",
            "example": 100
          },
          "posts_count_7d": {
            "type": "number",
            "description": "The total posts in the last 7 days",
            "example": 100
          },
          "posts_count_30d": {
            "type": "number",
            "description": "The total posts in the last 30 days",
            "example": 100
          },
          "views_count_7d": {
            "type": "number",
            "description": "The total views in the last 7 days",
            "example": 100
          },
          "views_count_30d": {
            "type": "number",
            "description": "The total views in the last 30 days",
            "example": 100
          },
          "avg_posts_7d": {
            "type": "number",
            "description": "The average posts in the last 7 days",
            "example": 10
          },
          "avg_views_per_post_7d": {
            "type": "number",
            "description": "The average views per post in the last 7 days",
            "example": 10
          },
          "avg_posts_30d": {
            "type": "number",
            "description": "The average posts in the last 30 days",
            "example": 10
          },
          "avg_views_per_post_30d": {
            "type": "number",
            "description": "The average views per post in the last 30 days",
            "example": 10
          },
          "joined_ct": {
            "type": "string",
            "description": "The joined CT of the hero",
            "example": "JAN 2024"
          },
          "status": {
            "type": "string",
            "description": "The status of the hero",
            "example": "HERO"
          },
          "current_season": {
            "description": "The current season",
            "example": {
              "season": 1,
              "total_clout": 100,
              "final_rank": 1,
              "total_posts": 100
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrentSeasonHeroQuickOverviewDTO"
              }
            ]
          }
        },
        "required": [
          "hero_id",
          "name",
          "handle",
          "profile_image_url_https",
          "profile_banner_url",
          "follower_count",
          "is_sybil",
          "smart_follower_count",
          "posts_count_7d",
          "posts_count_30d",
          "views_count_7d",
          "views_count_30d",
          "avg_posts_7d",
          "avg_views_per_post_7d",
          "avg_posts_30d",
          "avg_views_per_post_30d",
          "joined_ct",
          "status",
          "current_season"
        ]
      },
      "HeroQuickOverviewEmblemDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The ID of the emblem",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The name of the emblem",
            "example": "Emblem 1"
          },
          "description": {
            "type": "string",
            "description": "The description of the emblem",
            "example": "Emblem 1"
          },
          "picture": {
            "type": "string",
            "description": "The picture of the emblem",
            "example": "Emblem 1"
          },
          "category": {
            "type": "string",
            "description": "The category of the emblem",
            "example": "Emblem 1"
          },
          "threshold": {
            "type": "number",
            "description": "The threshold needed to get the emblem",
            "example": 1
          },
          "awarded_at": {
            "type": "string",
            "description": "The date the emblem was awarded",
            "example": "2021-01-01T00:00:00.000Z"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "picture",
          "category",
          "threshold",
          "awarded_at"
        ]
      },
      "HeroQuickOverviewEmblemSeasonUserProgressDTO": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "The user id of the user",
            "example": "1"
          },
          "category": {
            "type": "string",
            "description": "The category of the emblem",
            "example": "1"
          },
          "last_check": {
            "type": "string",
            "description": "Emblem awarded at",
            "example": "2021-01-01T00:00:00.000Z"
          },
          "progress": {
            "type": "number",
            "description": "The progress of the user",
            "example": 1
          },
          "current_emblem_id": {
            "type": "number",
            "description": "The current emblem id of the user",
            "example": 1
          },
          "created_at": {
            "type": "string",
            "description": "The created at of the emblem user progress",
            "example": "2021-01-01T00:00:00.000Z"
          },
          "emblems": {
            "description": "The emblems the hero has",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HeroQuickOverviewEmblemDTO"
            }
          }
        },
        "required": [
          "user_id",
          "category",
          "last_check",
          "progress",
          "current_emblem_id",
          "created_at",
          "emblems"
        ]
      },
      "HeroEmblemsDTO": {
        "type": "object",
        "properties": {
          "hero_id": {
            "type": "string",
            "description": "The hero ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "user_progress": {
            "description": "The emblems the hero has",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HeroQuickOverviewEmblemSeasonUserProgressDTO"
            }
          }
        },
        "required": [
          "hero_id",
          "user_progress"
        ]
      },
      "GetHasEnoughCloutActivityResponseDTO": {
        "type": "object",
        "properties": {
          "has_enough_clout_activity": {
            "type": "boolean",
            "description": "Whether the player has enough clout activity",
            "example": true
          },
          "nb_tweets_last_30days": {
            "type": "number",
            "description": "Number of tweets the player has made in the last 30 days",
            "example": 10
          }
        },
        "required": [
          "has_enough_clout_activity",
          "nb_tweets_last_30days"
        ]
      },
      "CurrentSeasonDTO_serialized": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Season ID"
          },
          "start_date": {
            "type": "string",
            "description": "Season start date"
          },
          "end_date": {
            "type": "string",
            "description": "Season end date",
            "nullable": true
          }
        },
        "required": [
          "id",
          "start_date",
          "end_date"
        ]
      },
      "TreeMapDataPoint": {
        "type": "object",
        "properties": {
          "hero_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "type": "number"
          },
          "colorValue": {
            "type": "number"
          },
          "trend": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "trendData": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "current_clout": {
            "type": "number",
            "description": "Current clout score from leaderboard"
          }
        },
        "required": [
          "hero_id",
          "name",
          "value",
          "colorValue",
          "trend",
          "trendData",
          "current_clout"
        ]
      },
      "TreeMapResponseDTO": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TreeMapDataPoint"
            }
          }
        },
        "required": [
          "data"
        ]
      },
      "HeroSummaryDTO": {
        "type": "object",
        "properties": {
          "summary": {
            "type": "object",
            "description": "Hero summary data"
          },
          "word_cloud": {
            "type": "object",
            "description": "Word cloud data"
          },
          "spider_web": {
            "type": "object",
            "description": "Spider web data"
          },
          "mood": {
            "type": "object",
            "description": "Mood data"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "required": [
          "summary",
          "word_cloud",
          "spider_web",
          "mood",
          "updated_at"
        ]
      },
      "GetLastComputedDateForCloutDistributionResponseDTO": {
        "type": "object",
        "properties": {
          "last_computed_date": {
            "type": "string",
            "description": "The last date when clout distribution was computed",
            "example": "2024-04-11T12:00:00Z"
          }
        },
        "required": [
          "last_computed_date"
        ]
      },
      "DailyCloutDistributionDTO": {
        "type": "object",
        "properties": {
          "date": {
            "format": "date-time",
            "type": "string",
            "description": "Distribution date"
          },
          "clout": {
            "type": "number",
            "description": "Clout points for the day"
          },
          "rank": {
            "type": "number",
            "description": "Rank for the day"
          },
          "post_count": {
            "type": "number",
            "description": "Number of posts for the day"
          },
          "view_count": {
            "type": "number",
            "description": "Number of views for the day"
          },
          "smart_follower_count": {
            "type": "number",
            "description": "Smart follower count for the day"
          }
        },
        "required": [
          "date",
          "clout",
          "rank",
          "post_count",
          "view_count",
          "smart_follower_count"
        ]
      },
      "HeroCloutDistributionDTO": {
        "type": "object",
        "properties": {
          "hero_id": {
            "type": "string",
            "description": "Hero ID"
          },
          "season": {
            "type": "number",
            "description": "Season number"
          },
          "distributions": {
            "description": "Daily clout distributions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DailyCloutDistributionDTO"
            }
          }
        },
        "required": [
          "hero_id",
          "season",
          "distributions"
        ]
      },
      "MindshareLeaderboardDataPoint": {
        "type": "object",
        "properties": {
          "hero_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "value": {
            "type": "number",
            "description": "Percentage of total clout"
          },
          "trend": {
            "type": "string",
            "description": "Trend direction (up/down)"
          },
          "current_clout": {
            "type": "number",
            "description": "Current clout score from leaderboard"
          },
          "colorValue": {
            "type": "number",
            "description": "Color value for treemap"
          },
          "trendData": {
            "description": "Historical clout data for trend visualization",
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        },
        "required": [
          "hero_id",
          "name",
          "value",
          "trend",
          "current_clout",
          "colorValue",
          "trendData"
        ]
      },
      "MindshareLeaderboardResponseDTO": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MindshareLeaderboardDataPoint"
            }
          }
        },
        "required": [
          "data"
        ]
      },
      "SmartFollowerDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID of the follower",
            "example": "123456789"
          },
          "handle": {
            "type": "string",
            "description": "Handle of the follower",
            "example": "johndoe"
          },
          "name": {
            "type": "string",
            "description": "Name of the follower",
            "example": "John Doe"
          },
          "profile_image_url_https": {
            "type": "string",
            "description": "Profile image URL of the follower",
            "example": "https://example.com/profile.jpg"
          },
          "is_player": {
            "type": "boolean",
            "description": "Whether the follower is a player",
            "example": true
          },
          "followers_count": {
            "type": "number",
            "description": "Number of followers the follower has",
            "example": 1000
          }
        },
        "required": [
          "id",
          "handle",
          "name",
          "profile_image_url_https",
          "is_player",
          "followers_count"
        ]
      },
      "SmartFollowerResponseDTO": {
        "type": "object",
        "properties": {
          "followers": {
            "description": "List of smart followers",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SmartFollowerDTO"
            }
          },
          "total_followers": {
            "type": "number",
            "description": "Total number of followers",
            "example": 1000
          }
        },
        "required": [
          "followers",
          "total_followers"
        ]
      },
      "GetTopicsFlagsDTO": {
        "type": "object",
        "properties": {
          "pagination": {
            "description": "Pagination parameters",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationDTO"
              }
            ]
          },
          "search": {
            "type": "string",
            "description": "Search by topic name"
          }
        },
        "required": [
          "pagination"
        ]
      },
      "TopicsFlagsResponseDTO": {
        "type": "object",
        "properties": {
          "topicsFlags": {
            "description": "List of topic flags",
            "example": [
              "crypto",
              "tech",
              "finance"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "meta": {
            "type": "object",
            "description": "Pagination metadata"
          }
        },
        "required": [
          "topicsFlags",
          "meta"
        ]
      },
      "GetLeaderboardForTopicDTO": {
        "type": "object",
        "properties": {
          "pagination": {
            "description": "Pagination parameters",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationDTO"
              }
            ]
          },
          "search": {
            "type": "string",
            "description": "Search by hero name or handle"
          }
        },
        "required": [
          "pagination"
        ]
      },
      "LeaderboardForTopicItemDTO": {
        "type": "object",
        "properties": {
          "hero_id": {
            "type": "string",
            "description": "Hero ID"
          },
          "name": {
            "type": "string",
            "description": "Hero name"
          },
          "handle": {
            "type": "string",
            "description": "Hero handle"
          },
          "profile_image_url_https": {
            "type": "string",
            "description": "Profile image URL"
          },
          "total_clout": {
            "type": "number",
            "description": "Total clout score"
          },
          "final_rank": {
            "type": "number",
            "description": "Final rank"
          },
          "total_posts": {
            "type": "number",
            "description": "Total posts"
          },
          "total_views": {
            "type": "string",
            "description": "Total views"
          },
          "smart_follower_count": {
            "type": "number",
            "description": "Smart follower count"
          },
          "last_clout_distribution": {
            "type": "number",
            "description": "Last clout distribution"
          },
          "previous_rank": {
            "type": "number",
            "description": "Previous rank"
          },
          "mindshare_percentage": {
            "type": "number",
            "description": "Percentage of total clout (mindshare)"
          },
          "trend": {
            "type": "string",
            "description": "Trend direction (up/down)"
          },
          "trendData": {
            "description": "Historical clout data for trend visualization",
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        },
        "required": [
          "hero_id",
          "name",
          "handle",
          "total_clout",
          "final_rank",
          "total_posts",
          "total_views",
          "smart_follower_count",
          "last_clout_distribution",
          "previous_rank",
          "mindshare_percentage",
          "trend",
          "trendData"
        ]
      },
      "PaginatedLeaderboardForTopicItemDTOResult": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Data items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeaderboardForTopicItemDTO"
            }
          },
          "meta": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaDTO"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "HeroLeaderboardPositionItemDTO": {
        "type": "object",
        "properties": {
          "hero_id": {
            "type": "string",
            "description": "Hero ID"
          },
          "flag": {
            "type": "string",
            "description": "Topic flag"
          },
          "total_clout": {
            "type": "number",
            "description": "Total clout score"
          },
          "final_rank": {
            "type": "number",
            "description": "Final rank"
          },
          "total_posts": {
            "type": "number",
            "description": "Total posts"
          },
          "total_views": {
            "type": "string",
            "description": "Total views"
          },
          "previous_rank": {
            "type": "number",
            "description": "Previous rank"
          },
          "mindshare_percentage": {
            "type": "number",
            "description": "Percentage of total mindshare for this topic"
          }
        },
        "required": [
          "hero_id",
          "flag",
          "total_clout",
          "final_rank",
          "total_posts",
          "total_views",
          "previous_rank",
          "mindshare_percentage"
        ]
      },
      "HeroLeaderboardPositionsResponseDTO": {
        "type": "object",
        "properties": {
          "data": {
            "description": "List of hero leaderboard positions across topics",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HeroLeaderboardPositionItemDTO"
            }
          }
        },
        "required": [
          "data"
        ]
      },
      "UserInfoDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id",
            "example": "1234567890"
          },
          "name": {
            "type": "string",
            "description": "The name",
            "example": "John Doe"
          },
          "handle": {
            "type": "string",
            "description": "The handle",
            "example": "@john_doe"
          },
          "profile_image_url_https": {
            "type": "string",
            "description": "The profile image url",
            "example": "https://example.com/profile.jpg"
          }
        },
        "required": [
          "id",
          "name",
          "handle",
          "profile_image_url_https"
        ]
      },
      "UserTweetPerTopicDTO": {
        "type": "object",
        "properties": {
          "post_id": {
            "type": "string",
            "description": "The post id",
            "example": "1234567890"
          },
          "views": {
            "type": "number",
            "description": "The number of views",
            "example": 100
          },
          "likes": {
            "type": "number",
            "description": "The number of likes",
            "example": 100
          },
          "retweets": {
            "type": "number",
            "description": "The number of retweets",
            "example": 100
          },
          "quotes": {
            "type": "number",
            "description": "The number of quotes",
            "example": 100
          },
          "replies": {
            "type": "number",
            "description": "The number of replies",
            "example": 100
          },
          "bookmarks": {
            "type": "number",
            "description": "The number of bookmarks",
            "example": 100
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "The creation date",
            "example": "2025-04-25T19:55:30.138Z"
          },
          "cred_score": {
            "type": "number",
            "description": "The cred score",
            "example": 100
          },
          "text": {
            "type": "string",
            "description": "The text",
            "example": "Hello, world!"
          }
        },
        "required": [
          "post_id",
          "views",
          "likes",
          "retweets",
          "quotes",
          "replies",
          "bookmarks",
          "created_at",
          "cred_score",
          "text"
        ]
      },
      "GetUserTweetPerTopicResponseDTO": {
        "type": "object",
        "properties": {
          "userInfo": {
            "description": "The user info",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserInfoDTO"
              }
            ]
          },
          "userTweets": {
            "description": "The user tweets",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserTweetPerTopicDTO"
            }
          }
        },
        "required": [
          "userInfo",
          "userTweets"
        ]
      },
      "HeroCircleDTO": {
        "type": "object",
        "properties": {
          "hero_id": {
            "type": "string",
            "description": "Hero ID",
            "example": "123"
          },
          "circle_layer": {
            "type": "number",
            "description": "Circle Layer",
            "example": 1
          },
          "username": {
            "type": "string",
            "description": "Username",
            "example": "123"
          },
          "profile_url": {
            "type": "string",
            "description": "Profile URL",
            "example": "https://example.com"
          },
          "is_hero": {
            "type": "boolean",
            "description": "Is Hero",
            "example": true
          },
          "is_player": {
            "type": "boolean",
            "description": "Is Player",
            "example": true
          }
        },
        "required": [
          "hero_id",
          "circle_layer",
          "username",
          "profile_url",
          "is_hero",
          "is_player"
        ]
      },
      "GetUserInnerCircleDTO": {
        "type": "object",
        "properties": {
          "handle": {
            "type": "string",
            "description": "Handle of the hero",
            "example": "hero_handle"
          },
          "profile_image_url_https": {
            "type": "string",
            "description": "URL of the profile image in HTTPS",
            "example": "http://profileimage.url"
          },
          "inner_circle": {
            "description": "Inner circle of the hero",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HeroCircleDTO"
            }
          }
        },
        "required": [
          "handle",
          "inner_circle"
        ]
      },
      "EmblemModelDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The ID of the emblem",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The name of the emblem",
            "example": "Emblem 1"
          },
          "description": {
            "type": "string",
            "description": "The description of the emblem",
            "example": "Emblem 1"
          },
          "picture": {
            "type": "string",
            "description": "The picture of the emblem",
            "example": "Emblem 1"
          },
          "category": {
            "type": "string",
            "description": "The category of the emblem",
            "example": "Emblem 1"
          },
          "threshold": {
            "type": "number",
            "description": "The threshold needed to get the emblem",
            "example": 1
          },
          "created_at": {
            "type": "string",
            "description": "The created at of the emblem",
            "example": "2021-01-01T00:00:00.000Z"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "picture",
          "category",
          "threshold",
          "created_at"
        ]
      },
      "GetOgTweetOfHeroPosts_DTO": {
        "type": "object",
        "properties": {
          "rest_id": {
            "type": "string",
            "description": "The rest id of the post",
            "example": "1234567890"
          },
          "user_id": {
            "type": "string",
            "description": "The user id of the post",
            "example": "1234567890"
          },
          "type": {
            "type": "string",
            "description": "The type of the post",
            "example": "tweet"
          },
          "parent_id": {
            "type": "string",
            "description": "The parent id of the post",
            "example": "1234567890"
          },
          "conversation_id": {
            "type": "string",
            "description": "The conversation id of the post",
            "example": "1234567890"
          },
          "text": {
            "type": "string",
            "description": "The text of the post",
            "example": "Hello, world!"
          },
          "is_quoted": {
            "type": "boolean",
            "description": "Whether the post is quoted",
            "example": true
          },
          "favorite_count": {
            "type": "number",
            "description": "The favorite count of the post",
            "example": 100
          },
          "bookmark_count": {
            "type": "number",
            "description": "The bookmark count of the post",
            "example": 100
          },
          "quote_count": {
            "type": "number",
            "description": "The quote count of the post",
            "example": 100
          },
          "reply_count": {
            "type": "number",
            "description": "The reply count of the post",
            "example": 100
          },
          "retweet_count": {
            "type": "number",
            "description": "The retweet count of the post",
            "example": 100
          },
          "created_at": {
            "type": "string",
            "description": "The created at of the post",
            "example": "2021-01-01T00:00:00.000Z"
          },
          "handle": {
            "type": "string",
            "description": "The handle of the post",
            "example": "1234567890"
          },
          "certified_views": {
            "type": "number",
            "description": "The certified views of the post",
            "example": 100
          },
          "top_interacting_users": {
            "type": "object",
            "description": "The top interacting users of the post",
            "example": {
              "user1": 10,
              "user2": 5
            }
          },
          "updated_at": {
            "type": "string",
            "description": "The updated at of the post",
            "example": "2021-01-01T00:00:00.000Z"
          },
          "quote_id": {
            "type": "string",
            "description": "The quote id of the post",
            "example": "1234567890"
          }
        },
        "required": [
          "rest_id",
          "user_id",
          "type",
          "parent_id",
          "conversation_id",
          "text",
          "is_quoted",
          "favorite_count",
          "bookmark_count",
          "quote_count",
          "reply_count",
          "retweet_count",
          "created_at",
          "handle",
          "certified_views",
          "top_interacting_users",
          "updated_at",
          "quote_id"
        ]
      },
      "GetOgTweetOfHeroDTO": {
        "type": "object",
        "properties": {
          "posts": {
            "description": "The posts of the hero",
            "allOf": [
              {
                "$ref": "#/components/schemas/GetOgTweetOfHeroPosts_DTO"
              }
            ]
          }
        },
        "required": [
          "posts"
        ]
      },
      "GroupedEmblemsDTO": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "description": "Category name",
            "example": "ENGAGEMENT"
          },
          "emblems": {
            "description": "List of emblems in this category",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmblemModelDTO"
            }
          }
        },
        "required": [
          "category",
          "emblems"
        ]
      },
      "GetGroupedEmblemsResponseDTO": {
        "type": "object",
        "properties": {
          "data": {
            "description": "List of emblem categories with their emblems",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupedEmblemsDTO"
            }
          }
        },
        "required": [
          "data"
        ]
      },
      "PlayersOnesignalSubscriptions": {
        "type": "object",
        "properties": {
          "player_id": {
            "type": "string"
          },
          "onesignal_subscription_id": {
            "type": "string"
          }
        },
        "required": [
          "player_id",
          "onesignal_subscription_id"
        ]
      },
      "PaginatedPlayerResult": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Data items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Player"
            }
          },
          "meta": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaDTO"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "GetPlayerByIdResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "handle": {
            "type": "string"
          },
          "profile_picture": {
            "type": "string"
          },
          "twitter_id": {
            "type": "string"
          },
          "fantasy_points": {
            "type": "number"
          },
          "fantasy_points_referrals": {
            "type": "number"
          },
          "league": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "name",
          "handle",
          "profile_picture",
          "twitter_id",
          "fantasy_points",
          "fantasy_points_referrals",
          "league"
        ]
      },
      "PlayerBankResponseDto": {
        "type": "object",
        "properties": {
          "playerPortfolioValue": {
            "type": "number",
            "description": "Total value of player portfolio"
          },
          "numberOfCards": {
            "type": "number",
            "description": "Total number of cards owned by player"
          },
          "fragments": {
            "type": "number",
            "description": "Number of fragments owned by player"
          },
          "gold": {
            "type": "number",
            "description": "Amount of gold owned by player"
          },
          "stars": {
            "type": "number",
            "description": "Number of stars owned by player"
          },
          "fanPoints": {
            "type": "number",
            "description": "Number of fan points earned by player"
          },
          "eloScore": {
            "type": "number",
            "description": "Current ELO score of the player"
          },
          "maxEloScore": {
            "type": "number",
            "description": "Maximum ELO score achieved by the player"
          },
          "currentEloRankId": {
            "type": "string",
            "description": "Current ELO rank ID"
          },
          "maxEloRankId": {
            "type": "string",
            "description": "Maximum ELO rank ID achieved"
          },
          "eloSeason": {
            "type": "number",
            "description": "Current ELO season"
          },
          "currentEloRankImage": {
            "type": "string",
            "description": "Current ELO rank image"
          }
        },
        "required": [
          "playerPortfolioValue",
          "numberOfCards",
          "fragments",
          "gold",
          "stars",
          "fanPoints",
          "eloScore",
          "maxEloScore",
          "currentEloRankId",
          "maxEloRankId",
          "eloSeason",
          "currentEloRankImage"
        ]
      },
      "OnboardingStatusDto": {
        "type": "object",
        "properties": {
          "playerId": {
            "type": "string",
            "description": "Player ID"
          },
          "isOnboardingDone": {
            "type": "boolean",
            "description": "Onboarding status"
          }
        },
        "required": [
          "playerId",
          "isOnboardingDone"
        ]
      },
      "BidOrderWithTopBidAndFloorPrice": {
        "type": "object",
        "properties": {
          "trader": {
            "type": "string",
            "description": "Trader"
          },
          "side": {
            "type": "number",
            "description": "Side"
          },
          "collection": {
            "type": "string",
            "description": "Collection"
          },
          "payment_token": {
            "type": "string",
            "description": "Payment token"
          },
          "expiration_time": {
            "type": "string",
            "description": "Expiration time as a BigInt value"
          },
          "merkle_root": {
            "type": "string",
            "description": "Merkle root"
          },
          "salt": {
            "type": "string",
            "description": "Salt as a BigInt value"
          },
          "signature": {
            "type": "string",
            "description": "Signature"
          },
          "id": {
            "type": "string",
            "description": "ID as a BigInt value"
          },
          "token_id": {
            "type": "string",
            "description": "Token ID as a BigInt value"
          },
          "token_ids": {
            "type": "string",
            "description": "Token IDs"
          },
          "bidder_handle": {
            "type": "string",
            "description": "Bidder handle"
          },
          "rarity": {
            "type": "number",
            "description": "Rarity"
          },
          "hero_id": {
            "type": "string",
            "description": "Hero ID"
          },
          "price": {
            "description": "Price",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "active": {
            "type": "boolean",
            "description": "Active"
          },
          "order_hash": {
            "type": "string",
            "description": "Order hash, optional"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date, optional"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Update date, optional"
          },
          "hero": {
            "description": "Hero",
            "allOf": [
              {
                "$ref": "#/components/schemas/HeroWithoutBidOrders"
              }
            ]
          },
          "topBidPrice": {
            "description": "Top bid price",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "floorPrice": {
            "description": "Floor price",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          }
        },
        "required": [
          "trader",
          "side",
          "collection",
          "payment_token",
          "expiration_time",
          "merkle_root",
          "salt",
          "signature",
          "id",
          "token_id",
          "token_ids",
          "bidder_handle",
          "rarity",
          "hero_id",
          "price",
          "active"
        ]
      },
      "DeleteOrderResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer",
            "description": "The ID of the bid order that was attempted to be deleted",
            "example": "123456789"
          },
          "count": {
            "type": "number",
            "description": "Number of records deleted",
            "example": 0
          }
        },
        "required": [
          "id",
          "count"
        ]
      },
      "BatchDeleteOrderRequestDTO": {
        "type": "object",
        "properties": {
          "orderIds": {
            "description": "The IDs of the orders that were attempted to be deleted",
            "example": [
              "123456789",
              "123456790"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "orderIds"
        ]
      },
      "BatchDeleteOrderResponseDTO": {
        "type": "object",
        "properties": {
          "ids": {
            "description": "The IDs of the orders that were attempted to be deleted",
            "example": [
              "123456789",
              "123456790"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "count": {
            "type": "number",
            "description": "Number of records deleted",
            "example": 0
          }
        },
        "required": [
          "ids",
          "count"
        ]
      },
      "GetPlayerActivityDto": {
        "type": "object",
        "properties": {
          "activityType": {
            "type": "string",
            "enum": [
              "ALL",
              "MINT_PACK",
              "WIN_CARD",
              "BURN_CARD",
              "LEVEL_UP",
              "SAVE_DECK",
              "TRADE",
              "LISTING",
              "BID"
            ]
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationDTO"
          }
        }
      },
      "PaginatedGetLastActivityDtoResult": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Data items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetLastActivityDto"
            }
          },
          "meta": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaDTO"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "GameStatsDto": {
        "type": "object",
        "properties": {
          "totalBurns": {
            "type": "number"
          },
          "totalLevelUps": {
            "type": "number"
          },
          "totalTactics": {
            "type": "number"
          },
          "totalDecks": {
            "type": "number"
          }
        },
        "required": [
          "totalBurns",
          "totalLevelUps",
          "totalTactics",
          "totalDecks"
        ]
      },
      "RewardTypeAmount": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          }
        },
        "required": [
          "type",
          "amount"
        ]
      },
      "TournamentNumberRewardsDto": {
        "type": "object",
        "properties": {
          "tournament_number": {
            "type": "number"
          },
          "rewards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RewardTypeAmount"
            }
          }
        },
        "required": [
          "tournament_number",
          "rewards"
        ]
      },
      "GetTotalTicketsGainsResponseDTO": {
        "type": "object",
        "properties": {
          "reward_eth": {
            "type": "number",
            "description": "Total ETH rewards",
            "example": 0.5
          },
          "reward_gold": {
            "type": "number",
            "description": "Total gold rewards",
            "example": 1000
          },
          "reward_cards": {
            "type": "number",
            "description": "Total cards rewards",
            "example": 1
          },
          "reward_tickets": {
            "type": "number",
            "description": "Total tactic tickets rewards",
            "example": 1
          }
        },
        "required": [
          "reward_eth",
          "reward_gold",
          "reward_cards",
          "reward_tickets"
        ]
      },
      "AddressPoolItem": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "Address of the participant",
            "example": "0xA142881E508B704a9B3092518FEA685A25120287"
          },
          "iteration": {
            "type": "number",
            "description": "Iteration number of the address",
            "example": 28
          }
        },
        "required": [
          "address",
          "iteration"
        ]
      },
      "PayoutObject": {
        "type": "object",
        "properties": {
          "end": {
            "type": "number",
            "description": "The end value",
            "example": 1
          },
          "start": {
            "type": "number",
            "description": "The start value",
            "example": 1
          },
          "payout": {
            "type": "number",
            "description": "The payout amount",
            "example": 5000
          }
        },
        "required": [
          "end",
          "start",
          "payout"
        ]
      },
      "PayoutStructure": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the payout structure",
            "example": "a30fdfca-e59f-4326-a195-cbb9a1a3b09b"
          },
          "entry_price_tickets": {
            "type": "number",
            "description": "Entry amount",
            "example": "0.1"
          },
          "max_tickets": {
            "type": "number",
            "description": "Maximum tickets",
            "example": 100
          },
          "price_pool": {
            "type": "number",
            "description": "Price pool",
            "example": 1000
          },
          "type": {
            "type": "string",
            "description": "Type of the payout structure",
            "example": "linear"
          },
          "payout": {
            "description": "Payout details",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayoutObject"
            }
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date",
            "example": "2024-07-03T17:00:00.000Z"
          },
          "price_pool_gold": {
            "type": "number",
            "description": "Price pool in gold",
            "example": 100
          },
          "payout_gold": {
            "description": "Payout details in gold",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayoutObject"
            }
          },
          "price_pool_cards": {
            "type": "number",
            "description": "Price pool in gold",
            "example": 100
          },
          "payout_cards": {
            "description": "Payout details in cards",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayoutObject"
            }
          },
          "price_pool_tickets": {
            "type": "number",
            "description": "Price pool in gold",
            "example": 100
          },
          "payout_tickets": {
            "description": "Payout details in gold",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayoutObject"
            }
          }
        },
        "required": [
          "id",
          "entry_price_tickets",
          "max_tickets",
          "price_pool",
          "type",
          "payout",
          "created_at",
          "price_pool_gold",
          "payout_gold",
          "price_pool_cards",
          "payout_cards",
          "price_pool_tickets",
          "payout_tickets"
        ]
      },
      "TacticsConfig": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the config",
            "example": "2d182873-dcec-4f34-9daa-4acf7560681c"
          },
          "name": {
            "type": "string",
            "description": "Name of the tactic",
            "example": "Tactic 🛡️"
          },
          "emoji": {
            "type": "string",
            "description": "Emoji of the tactic",
            "example": "🛡️"
          },
          "duration": {
            "type": "number",
            "description": "Duration of the tactic in hours",
            "example": 24
          },
          "entry_price": {
            "description": "Entry price as a Decimal value",
            "example": "0",
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "flat_fee": {
            "description": "Flat fee as a Decimal value",
            "example": "0",
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "payout_model": {
            "type": "string",
            "description": "Payout model for the tactic",
            "example": "linear"
          },
          "flags": {
            "type": "object",
            "description": "Flags for additional configuration",
            "example": "{}"
          },
          "max_stars": {
            "type": "number",
            "description": "Maximum stars for the tactic",
            "example": 25
          },
          "activated": {
            "type": "boolean",
            "description": "Whether the tactic is activated",
            "example": true
          },
          "addresses_pool": {
            "description": "Addresses pool as an array of objects",
            "example": [
              {
                "address": "0xA142881E508B704a9B3092518FEA685A25120287",
                "iteration": 28
              },
              {
                "address": "0x655395Ce58B192B619Cf4Ed2411b4A65640b8A30",
                "iteration": 29
              },
              {
                "address": "0x1767258068cA5f51f48dE4Dc7aE753BCE0c5fcCb",
                "iteration": 30
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressPoolItem"
            }
          },
          "payout_structure_id": {
            "type": "string",
            "description": "Identifier for the payout structure",
            "example": "a30fdfca-e59f-4326-a195-cbb9a1a3b09b"
          },
          "start_hour": {
            "type": "number",
            "description": "Start hour for the tactic",
            "example": 13
          },
          "create_new_tactic": {
            "type": "boolean",
            "description": "Whether to create a new tactic",
            "example": true
          },
          "payout_structure": {
            "description": "Payout structure details",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutStructure"
              }
            ]
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Created at",
            "example": "2024-05-27T00:00:00.000Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Created at",
            "example": "2024-05-27T00:00:00.000Z"
          },
          "banner_image": {
            "type": "string",
            "description": "Banner image for the tactic",
            "example": "https://r2.fantasy.top/assets/tactics-background.png"
          },
          "use_twitter_indexed_score": {
            "type": "boolean",
            "description": "wether or not the compute is made by the twitter indexer or the nest api, nest api handle only for the moment for the coin tactic",
            "example": true
          },
          "recurring_dates": {
            "description": "Recurring dates for the tactic",
            "example": [
              {
                "day": 1,
                "hour": 12
              },
              {
                "day": 2,
                "hour": 12
              }
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "left_captain_id": {
            "type": "string",
            "description": "Left captain id",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "right_captain_id": {
            "type": "string",
            "description": "Right captain id",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "is_left_vs_right": {
            "type": "boolean",
            "description": "Whether the tactic is left vs right",
            "example": true
          },
          "is_rolling": {
            "type": "boolean",
            "description": "Whether the tactic is rolling",
            "example": true
          },
          "is_solo_rolling": {
            "type": "boolean",
            "description": "Whether the tactic is solo rolling",
            "example": true
          }
        },
        "required": [
          "id",
          "name",
          "emoji",
          "duration",
          "entry_price",
          "flat_fee",
          "payout_model",
          "flags",
          "max_stars",
          "activated",
          "addresses_pool",
          "payout_structure_id",
          "start_hour",
          "create_new_tactic",
          "created_at",
          "updated_at",
          "banner_image",
          "use_twitter_indexed_score",
          "recurring_dates",
          "left_captain_id",
          "right_captain_id",
          "is_left_vs_right",
          "is_rolling",
          "is_solo_rolling"
        ]
      },
      "Tactics": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the tactic",
            "example": "70aa7e8d-15de-445a-a12b-4bdc76c489c0"
          },
          "tactic_config_id": {
            "type": "string",
            "description": "Identifier for the tactic configuration",
            "example": "c3889c78-c0f4-4277-ba10-0a16ddb32a49"
          },
          "start_date": {
            "format": "date-time",
            "type": "string",
            "description": "Start date of the tactic",
            "example": "2024-05-27T00:00:00.000Z"
          },
          "end_date": {
            "format": "date-time",
            "type": "string",
            "description": "End date of the tactic",
            "example": "2024-05-28T23:00:00.000Z"
          },
          "is_processed": {
            "type": "boolean",
            "description": "Whether the tactic is processed",
            "example": true
          },
          "cumulated_weth": {
            "description": "Cumulated WETH amount",
            "example": "0",
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "wallet_address": {
            "type": "string",
            "description": "Wallet address",
            "example": "0x866f235726B9dE2C355895e35AeBCCe7f48dA0f5"
          },
          "eth_price": {
            "description": "ETH price",
            "example": "3747.26",
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "is_rewards_processed": {
            "type": "boolean",
            "description": "Whether the rewards are processed",
            "example": true
          },
          "registration_openned": {
            "type": "boolean",
            "description": "Whether the registration is opened",
            "example": true
          },
          "visible": {
            "type": "boolean",
            "description": "Whether the tactic is visible",
            "example": true
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-07-01T13:35:34.437Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-07-01T13:35:40.847Z"
          },
          "has_been_validated": {
            "type": "boolean",
            "description": "Tactic has been validated ?"
          },
          "total_players": {
            "type": "number",
            "description": "Total entries in tactic"
          },
          "total_personal_entries": {
            "type": "number",
            "description": "Total personal entries in tactic"
          },
          "gains": {
            "description": "Total gains for the player",
            "allOf": [
              {
                "$ref": "#/components/schemas/GetTotalTicketsGainsResponseDTO"
              }
            ]
          },
          "config": {
            "description": "Config for the tactic",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/TacticsConfig"
              }
            ]
          }
        },
        "required": [
          "id",
          "tactic_config_id",
          "start_date",
          "end_date",
          "is_processed",
          "cumulated_weth",
          "wallet_address",
          "eth_price",
          "is_rewards_processed",
          "registration_openned",
          "visible",
          "created_at",
          "updated_at",
          "has_been_validated",
          "total_players",
          "total_personal_entries",
          "gains"
        ]
      },
      "RewardWithTacticDto": {
        "type": "object",
        "properties": {
          "rewards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RewardTypeAmount"
            }
          },
          "tactic": {
            "$ref": "#/components/schemas/Tactics"
          }
        },
        "required": [
          "rewards",
          "tactic"
        ]
      },
      "FragmentPackInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "pictureUrl": {
            "type": "string"
          },
          "fragmentsAmount": {
            "type": "number"
          },
          "nbCards": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "name",
          "pictureUrl",
          "fragmentsAmount",
          "nbCards"
        ]
      },
      "FragmentPackReward": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "player_id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "tournament_id": {
            "type": "string"
          },
          "mint_config_id": {
            "type": "string"
          },
          "amount": {
            "$ref": "#/components/schemas/DecimalNumber"
          },
          "price": {
            "$ref": "#/components/schemas/DecimalNumber"
          },
          "cards_per_pack": {
            "type": "number"
          },
          "is_activated": {
            "type": "boolean"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "description": "Metadata of the reward",
            "example": "{}"
          },
          "fragmentPackInfo": {
            "$ref": "#/components/schemas/FragmentPackInfo"
          }
        },
        "required": [
          "id",
          "player_id",
          "type",
          "is_activated",
          "created_at",
          "fragmentPackInfo"
        ]
      },
      "PlayerRewardsResponseDto": {
        "type": "object",
        "properties": {
          "tournamentRewards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TournamentNumberRewardsDto"
            }
          },
          "tacticRewards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RewardWithTacticDto"
            }
          },
          "otherRewards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FragmentPackReward"
            }
          }
        },
        "required": [
          "tournamentRewards",
          "tacticRewards",
          "otherRewards"
        ]
      },
      "PlayerBasicData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "handle": {
            "type": "string"
          },
          "twitter_id": {
            "type": "string"
          },
          "portfolio_value": {
            "type": "string"
          },
          "number_of_cards": {
            "type": "number"
          },
          "total_gliding_score": {
            "type": "number"
          },
          "can_play_free_tactics": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "handle",
          "twitter_id",
          "portfolio_value",
          "number_of_cards",
          "total_gliding_score",
          "can_play_free_tactics"
        ]
      },
      "Reward": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "tournament_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "tournament_id"
        ]
      },
      "TwitterDataHero": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "GetPlayerBasicDataResponseDto": {
        "type": "object",
        "properties": {
          "players_by_pk": {
            "$ref": "#/components/schemas/PlayerBasicData"
          },
          "rewards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Reward"
            }
          },
          "twitter_data_heroes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TwitterDataHero"
            }
          }
        },
        "required": [
          "players_by_pk",
          "rewards",
          "twitter_data_heroes"
        ]
      },
      "BurnLeaderboardDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "handle": {
            "type": "string"
          },
          "profile_picture": {
            "type": "string"
          },
          "player_id": {
            "type": "string"
          },
          "count": {
            "type": "number"
          },
          "rank": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "name",
          "handle",
          "profile_picture",
          "player_id",
          "count",
          "rank"
        ]
      },
      "BurnLeaderboardResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BurnLeaderboardDto"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/MetaInfiniteQueryDto"
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "StreakLeaderboardDto": {
        "type": "object",
        "properties": {
          "longest_streak": {
            "type": "number"
          },
          "total_answers": {
            "type": "number"
          },
          "total_guesses": {
            "type": "number"
          },
          "rank": {
            "type": "number"
          }
        },
        "required": [
          "longest_streak",
          "total_answers",
          "total_guesses",
          "rank"
        ]
      },
      "XGamesLeaderboardDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "handle": {
            "type": "string"
          },
          "profile_picture": {
            "type": "string"
          },
          "player_id": {
            "type": "string"
          },
          "overall_rank": {
            "type": "number"
          },
          "guess_favorite": {
            "$ref": "#/components/schemas/StreakLeaderboardDto"
          },
          "hot_or_not": {
            "$ref": "#/components/schemas/StreakLeaderboardDto"
          }
        },
        "required": [
          "id",
          "name",
          "handle",
          "profile_picture",
          "player_id",
          "overall_rank",
          "guess_favorite",
          "hot_or_not"
        ]
      },
      "XGamesLeaderboardResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/XGamesLeaderboardDto"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/MetaInfiniteQueryDto"
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "RelayDeposit": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string"
          },
          "player_id": {
            "type": "string"
          },
          "origin_chain_id": {
            "type": "string"
          },
          "origin_chain": {
            "type": "string"
          },
          "origin_currency_symbol": {
            "type": "string"
          },
          "origin_currency": {
            "type": "string"
          },
          "tx_hash": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/i"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "request_id",
          "player_id",
          "origin_chain_id",
          "origin_chain",
          "origin_currency_symbol",
          "origin_currency",
          "created_at",
          "updated_at"
        ]
      },
      "CreateRelayDepositDto": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string"
          },
          "player_id": {
            "type": "string"
          },
          "origin_chain_id": {
            "type": "string"
          },
          "origin_chain": {
            "type": "string"
          },
          "origin_currency_symbol": {
            "type": "string"
          },
          "origin_currency": {
            "type": "string"
          },
          "tx_hash": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/i"
          }
        },
        "required": [
          "request_id",
          "player_id",
          "origin_chain_id",
          "origin_chain",
          "origin_currency_symbol",
          "origin_currency",
          "tx_hash",
          "value"
        ]
      },
      "CreateThresholdDto": {
        "type": "object",
        "properties": {
          "threshold_value": {
            "type": "number",
            "example": 10
          },
          "reward_type": {
            "type": "string",
            "example": "GOLD"
          },
          "reward_amount": {
            "type": "number",
            "example": 100
          }
        },
        "required": [
          "threshold_value",
          "reward_type",
          "reward_amount"
        ]
      },
      "CreateQuestConfigDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Daily Quest"
          },
          "description": {
            "type": "string",
            "example": "Complete daily tasks"
          },
          "quest_type": {
            "type": "string",
            "example": "daily"
          },
          "period": {
            "type": "string",
            "example": "daily"
          },
          "has_multiple_thresholds": {
            "type": "boolean",
            "example": true
          },
          "active": {
            "type": "boolean",
            "example": true
          },
          "start_date": {
            "format": "date-time",
            "type": "string",
            "example": "2024-07-31T17:27:45.133Z"
          },
          "end_date": {
            "format": "date-time",
            "type": "string",
            "nullable": true,
            "example": "2024-07-31T17:27:45.133Z"
          },
          "thresholds": {
            "example": [
              {
                "threshold_value": 10,
                "reward_type": "gold",
                "reward_amount": 100
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateThresholdDto"
            }
          }
        },
        "required": [
          "name",
          "description",
          "quest_type",
          "period",
          "has_multiple_thresholds",
          "active",
          "start_date",
          "thresholds"
        ]
      },
      "QuestThreshold": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "quest_id": {
            "type": "string"
          },
          "threshold_value": {
            "type": "number"
          },
          "reward_type": {
            "type": "string"
          },
          "reward_amount": {
            "type": "number"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "quest_id",
          "threshold_value",
          "reward_type",
          "reward_amount",
          "created_at",
          "updated_at"
        ]
      },
      "QuestConfig": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "quest_type": {
            "type": "string"
          },
          "period": {
            "type": "string"
          },
          "has_multiple_thresholds": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "start_date": {
            "format": "date-time",
            "type": "string"
          },
          "end_date": {
            "format": "date-time",
            "type": "string",
            "nullable": true
          },
          "thresholds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuestThreshold"
            }
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "quest_type",
          "period",
          "has_multiple_thresholds",
          "active",
          "start_date",
          "thresholds",
          "created_at",
          "updated_at"
        ]
      },
      "ThresholdDto": {
        "type": "object",
        "properties": {
          "threshold_value": {
            "type": "number",
            "example": 10
          },
          "reward_type": {
            "type": "string",
            "example": "GOLD"
          },
          "reward_amount": {
            "type": "number",
            "example": 100
          },
          "id": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "required": [
          "threshold_value",
          "reward_type",
          "reward_amount",
          "id"
        ]
      },
      "QuestProgressDto": {
        "type": "object",
        "properties": {
          "quest_id": {
            "type": "string",
            "example": "eee24529-b9e0-4fe4-9c1b-a09139a6a409"
          },
          "name": {
            "type": "string",
            "example": "Tactics"
          },
          "description": {
            "type": "string",
            "example": ""
          },
          "quest_type": {
            "type": "string",
            "example": "tactics"
          },
          "period": {
            "type": "string",
            "example": "overall"
          },
          "active": {
            "type": "boolean",
            "example": true
          },
          "start_date": {
            "format": "date-time",
            "type": "string",
            "example": "2024-07-02T12:00:00.000Z"
          },
          "end_date": {
            "format": "date-time",
            "type": "string",
            "example": "2024-08-09T12:00:00.000Z",
            "nullable": true
          },
          "player_progress": {
            "type": "number",
            "example": 21
          },
          "next_threshold": {
            "$ref": "#/components/schemas/ThresholdDto"
          },
          "completed_thresholds": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "completed_at": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "example": {
              "5": {
                "completed_at": "2024-07-15T14:30:00.000Z"
              },
              "10": {
                "completed_at": "2024-07-20T09:45:00.000Z"
              }
            }
          },
          "unclaimed_thresholds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ThresholdDto"
            }
          }
        },
        "required": [
          "quest_id",
          "name",
          "description",
          "quest_type",
          "period",
          "active",
          "start_date",
          "end_date",
          "player_progress",
          "next_threshold",
          "completed_thresholds",
          "unclaimed_thresholds"
        ]
      },
      "ClaimQuest": {
        "type": "object",
        "properties": {
          "playerId": {
            "type": "string",
            "example": "0x0ad646EDb7B49fd8f89b1A09620A9736BfFB3a24",
            "description": "The ID of the player claiming the reward"
          },
          "questThresholdId": {
            "type": "string",
            "example": "098f6bcd-4621-3373-8ade-4e832627b4f7",
            "description": "The ID of the quest threshold being claimed"
          }
        },
        "required": [
          "playerId",
          "questThresholdId"
        ]
      },
      "ClaimQuestResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true,
            "description": "Indicates if the claim was successful"
          },
          "message": {
            "type": "string",
            "example": "Quest reward claimed successfully.",
            "description": "A message describing the result of the operation"
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "DailyQuestProgress": {
        "type": "object",
        "properties": {
          "dailyQuestProgress": {
            "type": "number",
            "example": 3,
            "description": "Current progress of the daily quest"
          },
          "dailyQuestStreak": {
            "type": "number",
            "example": 5,
            "description": "Current streak of completed daily quests"
          },
          "dailyQuestDueTime": {
            "format": "date-time",
            "type": "string",
            "example": "2023-07-21T00:00:00Z",
            "description": "Due time for the next daily quest"
          },
          "can_claim": {
            "type": "boolean",
            "example": true,
            "description": "Whether the player can claim the daily quest"
          },
          "prizes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "image": {
                  "type": "string"
                },
                "text": {
                  "type": "string"
                }
              }
            },
            "description": "Array of possible prizes for the daily quest"
          },
          "twitterQuest": {
            "type": "object",
            "description": "Twitter quest details if available",
            "properties": {
              "id": {
                "type": "number",
                "description": "Unique identifier for the Twitter quest"
              },
              "twitter_link": {
                "type": "string",
                "description": "Link to the Twitter post for the quest"
              },
              "quest_type": {
                "type": "string",
                "description": "Type of the Twitter quest"
              },
              "advance_quest_data": {
                "type": "object",
                "description": "Additional data for advanced quest features"
              }
            }
          }
        },
        "required": [
          "dailyQuestProgress",
          "dailyQuestStreak",
          "dailyQuestDueTime",
          "can_claim",
          "prizes"
        ]
      },
      "HasAirdropRewardDTO": {
        "type": "object",
        "properties": {
          "has_reward": {
            "type": "boolean",
            "description": "Whether the player has an airdrop reward"
          }
        },
        "required": [
          "has_reward"
        ]
      },
      "ClaimDailyQuestResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "dailyQuestStreak": {
            "type": "number"
          },
          "dailyQuestProgress": {
            "type": "number"
          },
          "nextDueTime": {
            "format": "date-time",
            "type": "string"
          },
          "twitterQuestCompleted": {
            "type": "boolean"
          },
          "selectedPrize": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "image": {
                "type": "string"
              },
              "text": {
                "type": "string"
              },
              "probability": {
                "type": "number"
              },
              "type": {
                "type": "string"
              }
            },
            "description": "The selected prize for the claimed daily quest"
          }
        },
        "required": [
          "success",
          "message",
          "dailyQuestStreak",
          "dailyQuestProgress",
          "nextDueTime"
        ]
      },
      "OnboardingQuestProgressDto": {
        "type": "object",
        "properties": {
          "quests": {
            "type": "object",
            "example": {
              "Complete Profile": {
                "id": "quest-id-1",
                "completed": true
              },
              "Join First Tournament": {
                "id": "quest-id-2",
                "completed": false
              },
              "Make First Trade": {
                "id": "quest-id-3",
                "completed": true
              }
            },
            "description": "A record of onboarding quest names, their IDs, and completion status"
          }
        },
        "required": [
          "quests"
        ]
      },
      "CompleteOnboardingQuestResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates whether the onboarding quest was completed successfully",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "A message describing the result of the operation",
            "example": "Onboarding quest completed successfully"
          },
          "reward": {
            "type": "object",
            "description": "The reward received for completing the quest, if any",
            "example": {
              "type": "FAN",
              "amount": 100
            }
          },
          "prizeList": {
            "description": "The list of possible prizes for the roulette, if applicable",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "QuestFantasyPlayerHistory": {
        "type": "object",
        "properties": {
          "player_id": {
            "type": "string"
          },
          "classic_competition": {
            "type": "number"
          },
          "volume": {
            "$ref": "#/components/schemas/DecimalNumber"
          },
          "card_burned": {
            "type": "number"
          },
          "level_up": {
            "type": "number"
          },
          "daily_quest": {
            "type": "number"
          },
          "tactics": {
            "type": "number"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "is_testnet": {
            "type": "boolean"
          },
          "trades_count": {
            "type": "number"
          },
          "pack_bought": {
            "type": "number"
          },
          "gold": {
            "$ref": "#/components/schemas/DecimalNumber"
          }
        },
        "required": [
          "player_id",
          "classic_competition",
          "volume",
          "card_burned",
          "level_up",
          "daily_quest",
          "tactics",
          "created_at",
          "updated_at",
          "is_testnet",
          "trades_count",
          "pack_bought",
          "gold"
        ]
      },
      "TacticsTicketRewards": {
        "type": "object",
        "properties": {
          "ticket_id": {
            "type": "string",
            "description": "Unique identifier for the ticket",
            "example": "0x970f14a7-157d-4438-874b-84b85a572625"
          },
          "reward_eth": {
            "description": "Reward amount in ETH",
            "example": 0.5,
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "reward_gold": {
            "description": "Reward amount in gold",
            "example": 1000,
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "reward_cards": {
            "type": "number",
            "description": "Reward amount in cards",
            "example": 1
          },
          "reward_tickets": {
            "type": "number",
            "description": "Reward amount in tactic tickets",
            "example": 1
          },
          "tactic_id": {
            "type": "string",
            "description": "Unique identifier for the tactic",
            "example": "0x1234567a-157d-4438-874b-84b85a572625"
          },
          "claimed": {
            "type": "boolean",
            "description": "Whether the reward has been claimed",
            "example": false
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2023-07-01T12:00:00Z"
          },
          "is_sent": {
            "type": "boolean",
            "description": "Whether the reward has been sent",
            "example": false
          }
        },
        "required": [
          "ticket_id",
          "reward_eth",
          "reward_gold",
          "reward_cards",
          "reward_tickets",
          "tactic_id",
          "claimed",
          "created_at",
          "is_sent"
        ]
      },
      "TacticsHeroScore": {
        "type": "object",
        "properties": {
          "tactic_id": {
            "type": "string",
            "description": "Tactic ID",
            "example": "some-tactic-id"
          },
          "hero_id": {
            "type": "string",
            "description": "Hero ID",
            "example": "hero-id"
          },
          "stars": {
            "type": "number",
            "description": "Stars",
            "example": 5
          },
          "fantasy_score": {
            "description": "Fantasy score",
            "example": "100.0",
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "id": {
            "type": "string",
            "description": "Hero score ID",
            "example": "hero-score-id"
          },
          "tweet_count": {
            "type": "number",
            "description": "Tweet count",
            "example": 100,
            "nullable": true
          },
          "current_rank": {
            "type": "number",
            "description": "Current rank",
            "example": 1,
            "nullable": true
          },
          "previous_rank": {
            "type": "number",
            "description": "Previous rank",
            "example": 1,
            "nullable": true
          },
          "views": {
            "type": "number",
            "description": "Views",
            "example": 1000,
            "nullable": true
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Updated at",
            "example": "2024-05-27T00:00:00.000Z"
          },
          "hero_choices": {
            "description": "Hero choices linked to hero score",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TacticsHeroChoice"
            }
          },
          "heroes": {
            "description": "Hero details linked to hero score",
            "allOf": [
              {
                "$ref": "#/components/schemas/Hero"
              }
            ]
          }
        },
        "required": [
          "tactic_id",
          "hero_id",
          "stars",
          "fantasy_score",
          "id",
          "tweet_count",
          "current_rank",
          "previous_rank",
          "views",
          "updated_at",
          "hero_choices",
          "heroes"
        ]
      },
      "TacticsHeroChoice": {
        "type": "object",
        "properties": {
          "tactic_id": {
            "type": "string",
            "description": "Tactic ID",
            "example": "some-tactic-id"
          },
          "hero_id": {
            "type": "string",
            "description": "Hero score ID",
            "example": "hero-score-id"
          },
          "tactic_entry_id": {
            "type": "string",
            "description": "Tactic entry ID",
            "example": "tactic-entry-id"
          },
          "hero_score": {
            "description": "Hero score linked to hero choice",
            "allOf": [
              {
                "$ref": "#/components/schemas/TacticsHeroScore"
              }
            ]
          },
          "heroes": {
            "description": "Hero info",
            "allOf": [
              {
                "$ref": "#/components/schemas/Hero"
              }
            ]
          }
        },
        "required": [
          "tactic_id",
          "hero_id",
          "tactic_entry_id",
          "hero_score",
          "heroes"
        ]
      },
      "TacticsEntry": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the entry",
            "example": "some-unique-id"
          },
          "tactic_id": {
            "type": "string",
            "description": "Tactic ID",
            "example": "some-tactic-id"
          },
          "player_id": {
            "type": "string",
            "description": "Player ID",
            "example": "some-player-id"
          },
          "hero1_id": {
            "type": "string",
            "description": "Hero 1 ID",
            "example": "hero1-id",
            "nullable": true
          },
          "hero2_id": {
            "type": "string",
            "description": "Hero 2 ID",
            "example": "hero2-id",
            "nullable": true
          },
          "hero3_id": {
            "type": "string",
            "description": "Hero 3 ID",
            "example": "hero3-id",
            "nullable": true
          },
          "hero4_id": {
            "type": "string",
            "description": "Hero 4 ID",
            "example": "hero4-id",
            "nullable": true
          },
          "hero5_id": {
            "type": "string",
            "description": "Hero 5 ID",
            "example": "hero5-id",
            "nullable": true
          },
          "rank": {
            "type": "number",
            "description": "Rank",
            "example": 0,
            "nullable": true
          },
          "score": {
            "type": "string",
            "description": "Score",
            "example": "0",
            "nullable": true
          },
          "rewards": {
            "type": "object",
            "description": "Rewards",
            "example": "{}",
            "nullable": true
          },
          "validate_deck_before": {
            "format": "date-time",
            "type": "string",
            "description": "Validate deck before",
            "example": "2024-05-27T00:00:00.000Z"
          },
          "hero1_stars": {
            "type": "number",
            "description": "Hero 1 stars",
            "example": 1,
            "nullable": true
          },
          "hero2_stars": {
            "type": "number",
            "description": "Hero 2 stars",
            "example": 2,
            "nullable": true
          },
          "hero3_stars": {
            "type": "number",
            "description": "Hero 3 stars",
            "example": 3,
            "nullable": true
          },
          "hero4_stars": {
            "type": "number",
            "description": "Hero 4 stars",
            "example": 4,
            "nullable": true
          },
          "hero5_stars": {
            "type": "number",
            "description": "Hero 5 stars",
            "example": 5,
            "nullable": true
          },
          "ticket_id": {
            "type": "string",
            "description": "Ticket ID",
            "example": "some-ticket-id"
          },
          "previous_rank": {
            "type": "number",
            "description": "Previous rank",
            "example": 0,
            "nullable": true
          },
          "autocompleted": {
            "type": "boolean",
            "description": "Autocompleted",
            "example": false
          },
          "autocompleted_at": {
            "format": "date-time",
            "type": "string",
            "description": "Autocompleted at",
            "example": "2024-05-27T00:00:00.000Z",
            "nullable": true
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Created at",
            "example": "2024-05-27T00:00:00.000Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Updated at",
            "example": "2024-05-27T00:00:00.000Z"
          },
          "players": {
            "description": "Players linked to entry",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Player"
              }
            ]
          },
          "tickets": {
            "description": "Tickets linked to entry",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/TacticsTicket"
              }
            ]
          },
          "heroes": {
            "description": "Heroes concerned by heroX_id",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Hero"
            }
          },
          "hero_choices": {
            "description": "Choices done for the given entry",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TacticsHeroChoice"
            }
          }
        },
        "required": [
          "id",
          "tactic_id",
          "player_id",
          "hero1_id",
          "hero2_id",
          "hero3_id",
          "hero4_id",
          "hero5_id",
          "rank",
          "score",
          "rewards",
          "validate_deck_before",
          "hero1_stars",
          "hero2_stars",
          "hero3_stars",
          "hero4_stars",
          "hero5_stars",
          "ticket_id",
          "previous_rank",
          "autocompleted",
          "autocompleted_at",
          "created_at",
          "updated_at",
          "heroes",
          "hero_choices"
        ]
      },
      "TacticsTicket": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the ticket",
            "example": "0f331a56-948e-41f5-bc59-9cb64dfb5ce8"
          },
          "player_id": {
            "type": "string",
            "description": "Identifier for the player",
            "example": "0xf4E42B1bC911fED19d1A4Ec7Bdde5Cff7c72E59F"
          },
          "tactic_config_ids": {
            "description": "Array of tactic configuration IDs",
            "example": [
              "210439e6-50e8-4f5d-9c2e-ad227f2f2c9b",
              "65e56acf-c265-4fb3-90f9-a74a0891e9ea",
              "fa58ddbd-dbc1-4e60-8fe6-e95b14d490af"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tx_hash": {
            "type": "string",
            "description": "Transaction hash",
            "example": "0x0f30795d07f63e16ac5a3396421cd1ff705b6a59f95decf4a89ba71215ab9d5b"
          },
          "used": {
            "type": "boolean",
            "description": "Indicates if the ticket is used",
            "example": true
          },
          "payout_structure_id": {
            "type": "string",
            "description": "Identifier for the payout structure",
            "example": "f7518b28-ceaa-49d6-b4b0-3c314551bcaf"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-07-01T13:34:57.306Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-07-01T13:35:04.802Z"
          },
          "rewards": {
            "description": "List of tickets rewards",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TacticsTicketRewards"
            }
          },
          "entry": {
            "description": "Tactics entry associated with the ticket",
            "allOf": [
              {
                "$ref": "#/components/schemas/TacticsEntry"
              }
            ]
          },
          "referred_by_id": {
            "type": "string",
            "description": "Id of the referrer player",
            "example": "0x1234567a-157d-4438-874b-84b85a572625"
          },
          "referrer": {
            "description": "Referrer of the ticket",
            "allOf": [
              {
                "$ref": "#/components/schemas/Player"
              }
            ]
          }
        },
        "required": [
          "id",
          "player_id",
          "tactic_config_ids",
          "tx_hash",
          "used",
          "payout_structure_id",
          "created_at",
          "updated_at",
          "rewards",
          "entry",
          "referred_by_id",
          "referrer"
        ]
      },
      "TacticsWhereDTO": {
        "type": "object",
        "properties": {
          "start_date": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFilterDTO"
              },
              {
                "type": "string"
              }
            ]
          },
          "end_date": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFilterDTO"
              },
              {
                "type": "string"
              }
            ]
          },
          "visible": {
            "type": "boolean"
          },
          "tactic_config_id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/StringFilterDTO"
              },
              {
                "type": "string"
              }
            ]
          },
          "is_rewards_processed": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/BoolFilterDTO"
              },
              {
                "type": "boolean"
              }
            ]
          }
        }
      },
      "TacticsOrderByDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "tactic_config_id": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "start_date": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "end_date": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "is_processed": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "cumulated_weth": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "wallet_address": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "eth_price": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "is_rewards_processed": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "registration_openned": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "visible": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "created_at": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "updated_at": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          }
        }
      },
      "TacticsIncludeDTO": {
        "type": "object",
        "properties": {
          "config": {
            "description": "Include config with payout_structure (or just config when config = true)",
            "oneOf": [
              {
                "$ref": "#/components/schemas/GetTacticsConfigOptionsDTO"
              },
              {
                "type": "boolean"
              }
            ]
          }
        }
      },
      "GetTacticsOptionsDTO": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/TacticsWhereDTO"
          },
          "distinct": {
            "type": "array",
            "description": "Champs distincts",
            "items": {
              "type": "string",
              "enum": [
                "id",
                "tactic_config_id",
                "start_date",
                "end_date",
                "is_processed",
                "cumulated_weth",
                "has_been_validated",
                "wallet_address",
                "eth_price",
                "is_rewards_processed",
                "registration_openned",
                "visible",
                "created_at",
                "updated_at"
              ]
            }
          },
          "orderBy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TacticsOrderByDTO"
            }
          },
          "include": {
            "$ref": "#/components/schemas/TacticsIncludeDTO"
          }
        }
      },
      "GetTacticsQueryDTO": {
        "type": "object",
        "properties": {
          "options": {
            "description": "options for querying",
            "allOf": [
              {
                "$ref": "#/components/schemas/GetTacticsOptionsDTO"
              }
            ]
          },
          "count_entry": {
            "type": "boolean",
            "description": "Query with total entry or not"
          },
          "count_personal_entries": {
            "type": "boolean",
            "description": "Query with total personal entry or not"
          },
          "include_gains": {
            "type": "boolean",
            "description": "Get currently gains for the player (if logged in)"
          },
          "pagination": {
            "description": "Pagination arguments",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationDTO"
              }
            ]
          }
        }
      },
      "PaginatedTacticsResult": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Data items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tactics"
            }
          },
          "meta": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaDTO"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "GetTacticByIdQueryDTO": {
        "type": "object",
        "properties": {
          "options": {
            "description": "options for querying",
            "allOf": [
              {
                "$ref": "#/components/schemas/GetTacticsOptionsDTO"
              }
            ]
          },
          "count_entry": {
            "type": "boolean",
            "description": "Query with total entry or not"
          },
          "count_personal_entries": {
            "type": "boolean",
            "description": "Query with total personal entry or not"
          },
          "include_gains": {
            "type": "boolean",
            "description": "Get currently gains for the player (if logged in)"
          }
        }
      },
      "PickTypeClass": {
        "type": "object",
        "properties": {
          "handle": {
            "type": "string"
          }
        },
        "required": [
          "handle"
        ]
      },
      "TacticsTopEntries": {
        "type": "object",
        "properties": {
          "players": {
            "description": "Entry",
            "allOf": [
              {
                "$ref": "#/components/schemas/PickTypeClass"
              }
            ]
          },
          "rank": {
            "type": "number",
            "description": "Rank of the entry",
            "example": 1
          },
          "score": {
            "description": "Score of the entry",
            "example": 2000,
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          }
        },
        "required": [
          "players",
          "rank",
          "score"
        ]
      },
      "TacticsEntriesConfigPayoutStructure": {
        "type": "object",
        "properties": {
          "entry_price_tickets": {
            "type": "number",
            "description": "Entry amount",
            "example": "0.1"
          },
          "price_pool": {
            "type": "number",
            "description": "Price pool",
            "example": 1000
          },
          "payout": {
            "description": "Payout details",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayoutObject"
            }
          },
          "price_pool_gold": {
            "type": "number",
            "description": "Price pool in gold",
            "example": 100
          },
          "payout_gold": {
            "description": "Payout details in gold",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayoutObject"
            }
          },
          "price_pool_cards": {
            "type": "number",
            "description": "Price pool in gold",
            "example": 100
          },
          "payout_cards": {
            "description": "Payout details in cards",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayoutObject"
            }
          },
          "price_pool_tickets": {
            "type": "number",
            "description": "Price pool in gold",
            "example": 100
          },
          "payout_tickets": {
            "description": "Payout details in gold",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayoutObject"
            }
          }
        },
        "required": [
          "entry_price_tickets",
          "price_pool",
          "payout",
          "price_pool_gold",
          "payout_gold",
          "price_pool_cards",
          "payout_cards",
          "price_pool_tickets",
          "payout_tickets"
        ]
      },
      "TacticsEntriesConfig": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the tactic",
            "example": "Tactic 🛡️"
          },
          "payout_structure": {
            "description": "Payout Structure",
            "allOf": [
              {
                "$ref": "#/components/schemas/TacticsEntriesConfigPayoutStructure"
              }
            ]
          }
        },
        "required": [
          "name",
          "payout_structure"
        ]
      },
      "GetMyTacticsEntriesResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the tactic",
            "example": "70aa7e8d-15de-445a-a12b-4bdc76c489c0"
          },
          "start_date": {
            "format": "date-time",
            "type": "string",
            "description": "Start date of the tactic",
            "example": "2024-05-27T00:00:00.000Z"
          },
          "end_date": {
            "format": "date-time",
            "type": "string",
            "description": "End date of the tactic",
            "example": "2024-05-28T23:00:00.000Z"
          },
          "top_entries": {
            "description": "Top 3 entries for the given tactics",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TacticsTopEntries"
            }
          },
          "entries": {
            "description": "Entries for the current player",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TacticsEntry"
            }
          },
          "config": {
            "description": "Configuration for the given tactics",
            "allOf": [
              {
                "$ref": "#/components/schemas/TacticsEntriesConfig"
              }
            ]
          }
        },
        "required": [
          "id",
          "start_date",
          "end_date",
          "top_entries",
          "entries",
          "config"
        ]
      },
      "PaginatedTacticsEntryResult": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Data items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TacticsEntry"
            }
          },
          "meta": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaDTO"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "TacticsConfigIncludeDTO": {
        "type": "object",
        "properties": {
          "payout_structure": {
            "type": "boolean",
            "description": "Include payout structure"
          }
        }
      },
      "GetTacticsConfigOptionsDTO": {
        "type": "object",
        "properties": {
          "include": {
            "$ref": "#/components/schemas/TacticsConfigIncludeDTO"
          }
        }
      },
      "GetTacticsConfigQueryDTO": {
        "type": "object",
        "properties": {
          "options": {
            "description": "options for querying",
            "allOf": [
              {
                "$ref": "#/components/schemas/GetTacticsConfigOptionsDTO"
              }
            ]
          },
          "pagination": {
            "description": "Pagination arguments",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationDTO"
              }
            ]
          }
        }
      },
      "PaginatedTacticsConfigResult": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Data items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TacticsConfig"
            }
          },
          "meta": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaDTO"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "TacticsEntryIncludeDTO": {
        "type": "object",
        "properties": {
          "hero_choices": {
            "type": "boolean",
            "description": "Include hero_choices"
          },
          "players": {
            "type": "boolean",
            "description": "Include players"
          },
          "tickets": {
            "type": "boolean",
            "description": "Include tickets"
          }
        }
      },
      "TacticsEntrySelectDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "boolean"
          },
          "tactic_id": {
            "type": "boolean"
          },
          "player_id": {
            "type": "boolean"
          },
          "hero1_id": {
            "type": "boolean"
          },
          "hero2_id": {
            "type": "boolean"
          },
          "hero3_id": {
            "type": "boolean"
          },
          "hero4_id": {
            "type": "boolean"
          },
          "hero5_id": {
            "type": "boolean"
          },
          "rank": {
            "type": "boolean"
          },
          "score": {
            "type": "boolean"
          },
          "rewards": {
            "type": "boolean"
          },
          "validate_deck_before": {
            "type": "boolean"
          },
          "hero1_stars": {
            "type": "boolean"
          },
          "hero2_stars": {
            "type": "boolean"
          },
          "hero3_stars": {
            "type": "boolean"
          },
          "hero4_stars": {
            "type": "boolean"
          },
          "hero5_stars": {
            "type": "boolean"
          },
          "ticket_id": {
            "type": "boolean"
          },
          "previous_rank": {
            "type": "boolean"
          },
          "autocompleted": {
            "type": "boolean"
          },
          "autocompleted_at": {
            "type": "boolean"
          },
          "created_at": {
            "type": "boolean"
          },
          "updated_at": {
            "type": "boolean"
          }
        }
      },
      "TacticsEntryOrderByDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "tactic_id": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "player_id": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "hero1_id": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "hero2_id": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "hero3_id": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "hero4_id": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "hero5_id": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "rank": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "score": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "rewards": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "validate_deck_before": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "hero1_stars": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "hero2_stars": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "hero3_stars": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "hero4_stars": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "hero5_stars": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "ticket_id": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "previous_rank": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "autocompleted": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "autocompleted_at": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "created_at": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "updated_at": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          }
        }
      },
      "TacticsEntryWhereDTO": {
        "type": "object",
        "properties": {
          "AND": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TacticsEntryWhereDTO"
            }
          },
          "OR": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TacticsEntryWhereDTO"
            }
          },
          "NOT": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TacticsEntryWhereDTO"
            }
          },
          "id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/StringFilterDTO"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              },
              {
                "type": "null"
              }
            ]
          },
          "tactic_id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/StringFilterDTO"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "player_id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/StringFilterDTO"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "hero1_id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/StringFilterDTO"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "hero2_id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/StringFilterDTO"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "hero3_id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/StringFilterDTO"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "hero4_id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/StringFilterDTO"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "hero5_id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/StringFilterDTO"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "rank": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/NumberFilterDTO"
              },
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ]
          },
          "score": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/NumberFilterDTO"
              },
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ]
          },
          "validate_deck_before": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFilterDTO"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "hero1_stars": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/NumberFilterDTO"
              },
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ]
          },
          "hero2_stars": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/NumberFilterDTO"
              },
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ]
          },
          "hero3_stars": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/NumberFilterDTO"
              },
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ]
          },
          "hero4_stars": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/NumberFilterDTO"
              },
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ]
          },
          "hero5_stars": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/NumberFilterDTO"
              },
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ]
          },
          "ticket_id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/StringFilterDTO"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "previous_rank": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/NumberFilterDTO"
              },
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ]
          },
          "autocompleted": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/BoolFilterDTO"
              }
            ]
          },
          "autocompleted_at": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFilterDTO"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "created_at": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFilterDTO"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "updated_at": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFilterDTO"
              }
            ]
          }
        }
      },
      "GetTacticsEntriesOptionsDTO": {
        "type": "object",
        "properties": {
          "include": {
            "$ref": "#/components/schemas/TacticsEntryIncludeDTO"
          },
          "select": {
            "$ref": "#/components/schemas/TacticsEntrySelectDTO"
          },
          "distinct": {
            "type": "string",
            "description": "Champs distincts",
            "enum": [
              "tactic_id",
              "player_id",
              "hero1_id",
              "hero2_id",
              "hero3_id",
              "hero4_id",
              "hero5_id",
              "rank",
              "score",
              "rewards",
              "validate_deck_before",
              "id",
              "hero1_stars",
              "hero2_stars",
              "hero3_stars",
              "hero4_stars",
              "hero5_stars",
              "ticket_id",
              "previous_rank",
              "autocompleted",
              "autocompleted_at",
              "created_at",
              "updated_at"
            ]
          },
          "orderBy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TacticsEntryOrderByDTO"
            }
          },
          "where": {
            "$ref": "#/components/schemas/TacticsEntryWhereDTO"
          }
        }
      },
      "GetTacticsEntriesQueryDTO": {
        "type": "object",
        "properties": {
          "options": {
            "description": "Options for querying entries",
            "allOf": [
              {
                "$ref": "#/components/schemas/GetTacticsEntriesOptionsDTO"
              }
            ]
          },
          "with_hero": {
            "type": "boolean",
            "description": "Should fill hero or not"
          },
          "pagination": {
            "description": "Pagination arguments",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationDTO"
              }
            ]
          }
        }
      },
      "EntryTacticsConfigPayoutDTO": {
        "type": "object",
        "properties": {
          "price_pool": {
            "type": "number",
            "description": "Price pool",
            "example": 1000
          },
          "payout": {
            "description": "Payout details",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayoutObject"
            }
          },
          "price_pool_gold": {
            "type": "number",
            "description": "Price pool in gold",
            "example": 100
          },
          "payout_gold": {
            "description": "Payout details in gold",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayoutObject"
            }
          },
          "price_pool_cards": {
            "type": "number",
            "description": "Price pool in gold",
            "example": 100
          },
          "payout_cards": {
            "description": "Payout details in cards",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayoutObject"
            }
          },
          "price_pool_tickets": {
            "type": "number",
            "description": "Price pool in gold",
            "example": 100
          },
          "payout_tickets": {
            "description": "Payout details in gold",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayoutObject"
            }
          }
        },
        "required": [
          "price_pool",
          "payout",
          "price_pool_gold",
          "payout_gold",
          "price_pool_cards",
          "payout_cards",
          "price_pool_tickets",
          "payout_tickets"
        ]
      },
      "EntryTacticsConfigDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the tactic",
            "example": "Tactic 🛡️"
          },
          "payout_structure": {
            "$ref": "#/components/schemas/EntryTacticsConfigPayoutDTO"
          }
        },
        "required": [
          "name",
          "payout_structure"
        ]
      },
      "EntryTacticsDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the tactic",
            "example": "70aa7e8d-15de-445a-a12b-4bdc76c489c0"
          },
          "start_date": {
            "format": "date-time",
            "type": "string",
            "description": "Start date of the tactic",
            "example": "2024-05-27T00:00:00.000Z"
          },
          "end_date": {
            "format": "date-time",
            "type": "string",
            "description": "End date of the tactic",
            "example": "2024-05-28T23:00:00.000Z"
          },
          "eth_price": {
            "description": "ETH price",
            "example": "3747.26",
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "config": {
            "$ref": "#/components/schemas/EntryTacticsConfigDTO"
          }
        },
        "required": [
          "id",
          "start_date",
          "end_date",
          "eth_price",
          "config"
        ]
      },
      "EntryTicketsRewardsDTO": {
        "type": "object",
        "properties": {
          "reward_eth": {
            "description": "Reward amount in ETH",
            "example": 0.5,
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "reward_gold": {
            "description": "Reward amount in gold",
            "example": 1000,
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "reward_cards": {
            "type": "number",
            "description": "Reward amount in cards",
            "example": 1
          },
          "reward_tickets": {
            "type": "number",
            "description": "Reward amount in tactic tickets",
            "example": 1
          }
        },
        "required": [
          "reward_eth",
          "reward_gold",
          "reward_cards",
          "reward_tickets"
        ]
      },
      "EntryTicketsDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the ticket",
            "example": "0f331a56-948e-41f5-bc59-9cb64dfb5ce8"
          },
          "tx_hash": {
            "type": "string",
            "description": "Transaction hash",
            "example": "0x0f30795d07f63e16ac5a3396421cd1ff705b6a59f95decf4a89ba71215ab9d5b"
          },
          "used": {
            "type": "boolean",
            "description": "Indicates if the ticket is used",
            "example": true
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-07-01T13:34:57.306Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-07-01T13:35:04.802Z"
          },
          "tickets_rewards": {
            "$ref": "#/components/schemas/EntryTicketsRewardsDTO"
          }
        },
        "required": [
          "id",
          "tx_hash",
          "used",
          "created_at",
          "updated_at",
          "tickets_rewards"
        ]
      },
      "GetEntriesHistoryResponseDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the entry",
            "example": "some-unique-id"
          },
          "tactic_id": {
            "type": "string",
            "description": "Tactic ID",
            "example": "some-tactic-id"
          },
          "rank": {
            "type": "number",
            "description": "Rank",
            "example": 0,
            "nullable": true
          },
          "score": {
            "type": "string",
            "description": "Score",
            "example": "0",
            "nullable": true
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Created at",
            "example": "2024-05-27T00:00:00.000Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Updated at",
            "example": "2024-05-27T00:00:00.000Z"
          },
          "tactics": {
            "$ref": "#/components/schemas/EntryTacticsDTO"
          },
          "tickets": {
            "$ref": "#/components/schemas/EntryTicketsDTO"
          }
        },
        "required": [
          "id",
          "tactic_id",
          "rank",
          "score",
          "created_at",
          "updated_at",
          "tactics",
          "tickets"
        ]
      },
      "GetTacticHistoryResponseDTO": {
        "type": "object",
        "properties": {
          "tactic": {
            "$ref": "#/components/schemas/Tactics"
          },
          "top_rank": {
            "type": "number"
          },
          "total_entries": {
            "type": "number"
          },
          "total_gains": {
            "$ref": "#/components/schemas/GetTotalTicketsGainsResponseDTO"
          }
        },
        "required": [
          "tactic",
          "top_rank",
          "total_entries",
          "total_gains"
        ]
      },
      "PaginatedGetTacticHistoryResponseDTOResult": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Data items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetTacticHistoryResponseDTO"
            }
          },
          "meta": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaDTO"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "TacticsHeroScoreResponse": {
        "type": "object",
        "properties": {
          "current_rank": {
            "type": "number",
            "description": "Current rank of the hero",
            "example": 1
          },
          "fantasy_score": {
            "description": "Fantasy score of the hero",
            "example": "100.00",
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "views": {
            "format": "int64",
            "type": "integer",
            "description": "Number of views for the hero",
            "example": "1000"
          },
          "tweet_count": {
            "format": "int64",
            "type": "integer",
            "description": "Number of tweets mentioning the hero",
            "example": "500"
          }
        },
        "required": [
          "current_rank",
          "fantasy_score",
          "views",
          "tweet_count"
        ]
      },
      "HeroCoinHistoryResponse": {
        "type": "object",
        "properties": {
          "change_24": {
            "type": "string"
          },
          "market_cap": {
            "type": "string"
          }
        }
      },
      "HeroCoinResponse": {
        "type": "object",
        "properties": {
          "imageLargeUrl": {
            "type": "string"
          },
          "coin_histories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HeroCoinHistoryResponse"
            }
          }
        },
        "required": [
          "imageLargeUrl"
        ]
      },
      "HeroWithTacticScoresHeroWithImagePrefix": {
        "type": "object",
        "properties": {
          "tactic_image_prefix": {
            "type": "string",
            "description": "Tactic image prefix",
            "example": "argent"
          },
          "coin": {
            "$ref": "#/components/schemas/HeroCoinResponse"
          }
        },
        "required": [
          "tactic_image_prefix",
          "coin"
        ]
      },
      "HeroWithTacticScores": {
        "type": "object",
        "properties": {
          "handle": {
            "type": "string",
            "description": "Handle of the hero",
            "example": "hero_handle"
          },
          "followers_count": {
            "type": "number",
            "description": "Number of followers the hero has",
            "example": 5000
          },
          "stars": {
            "type": "number",
            "description": "Number of stars the hero has",
            "example": 6
          },
          "tactic_scores": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TacticsHeroScoreResponse"
            }
          },
          "hero": {
            "$ref": "#/components/schemas/HeroWithTacticScoresHeroWithImagePrefix"
          }
        },
        "required": [
          "handle",
          "stars",
          "tactic_scores",
          "hero"
        ]
      },
      "TacticsHeroChoiceResponse": {
        "type": "object",
        "properties": {
          "hero_id": {
            "type": "string",
            "description": "Hero score ID",
            "example": "hero-score-id"
          },
          "hero_score": {
            "description": "Hero score linked to hero choice",
            "allOf": [
              {
                "$ref": "#/components/schemas/TacticsHeroScore"
              }
            ]
          },
          "hero": {
            "$ref": "#/components/schemas/HeroWithTacticScores"
          }
        },
        "required": [
          "hero_id",
          "hero_score",
          "hero"
        ]
      },
      "GetTacticsChoicesByIdResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the entry",
            "example": "some-unique-id"
          },
          "tactic_id": {
            "type": "string",
            "description": "Tactic ID",
            "example": "some-tactic-id"
          },
          "hero1_id": {
            "type": "string",
            "description": "Hero 1 ID",
            "example": "hero1-id",
            "nullable": true
          },
          "hero2_id": {
            "type": "string",
            "description": "Hero 2 ID",
            "example": "hero2-id",
            "nullable": true
          },
          "hero3_id": {
            "type": "string",
            "description": "Hero 3 ID",
            "example": "hero3-id",
            "nullable": true
          },
          "hero4_id": {
            "type": "string",
            "description": "Hero 4 ID",
            "example": "hero4-id",
            "nullable": true
          },
          "hero5_id": {
            "type": "string",
            "description": "Hero 5 ID",
            "example": "hero5-id",
            "nullable": true
          },
          "validate_deck_before": {
            "format": "date-time",
            "type": "string",
            "description": "Validate deck before",
            "example": "2024-05-27T00:00:00.000Z"
          },
          "hero_choices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TacticsHeroChoiceResponse"
            }
          }
        },
        "required": [
          "id",
          "tactic_id",
          "hero1_id",
          "hero2_id",
          "hero3_id",
          "hero4_id",
          "hero5_id",
          "validate_deck_before",
          "hero_choices"
        ]
      },
      "TicketsNewRewardsEntryDTO": {
        "type": "object",
        "properties": {
          "rank": {
            "type": "number",
            "description": "Rank",
            "example": 0,
            "nullable": true
          },
          "score": {
            "type": "string",
            "description": "Score",
            "example": "0",
            "nullable": true
          }
        },
        "required": [
          "rank",
          "score"
        ]
      },
      "TicketsNewRewardsTacticsConfigPayoutDTO": {
        "type": "object",
        "properties": {
          "payout": {
            "description": "Payout details",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayoutObject"
            }
          }
        },
        "required": [
          "payout"
        ]
      },
      "TicketsNewRewardsTacticsConfigDTO": {
        "type": "object",
        "properties": {
          "payout_structure": {
            "$ref": "#/components/schemas/TicketsNewRewardsTacticsConfigPayoutDTO"
          }
        },
        "required": [
          "payout_structure"
        ]
      },
      "TicketsNewRewardsTacticsDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the tactic",
            "example": "70aa7e8d-15de-445a-a12b-4bdc76c489c0"
          },
          "config": {
            "$ref": "#/components/schemas/TicketsNewRewardsTacticsConfigDTO"
          }
        },
        "required": [
          "id",
          "config"
        ]
      },
      "TicketsNewRewardsRewardsDTO": {
        "type": "object",
        "properties": {
          "reward_eth": {
            "description": "Reward amount in ETH",
            "example": 0.5,
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "reward_gold": {
            "description": "Reward amount in gold",
            "example": 1000,
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "reward_cards": {
            "type": "number",
            "description": "Reward amount in cards",
            "example": 1
          },
          "reward_tickets": {
            "type": "number",
            "description": "Reward amount in tactic tickets",
            "example": 1
          },
          "tactics": {
            "$ref": "#/components/schemas/TicketsNewRewardsTacticsDTO"
          }
        },
        "required": [
          "reward_eth",
          "reward_gold",
          "reward_cards",
          "reward_tickets",
          "tactics"
        ]
      },
      "GetTicketsNewRewardsResponseDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the ticket",
            "example": "0f331a56-948e-41f5-bc59-9cb64dfb5ce8"
          },
          "tactic": {
            "$ref": "#/components/schemas/Tactics"
          },
          "entry": {
            "$ref": "#/components/schemas/TicketsNewRewardsEntryDTO"
          },
          "tickets_rewards": {
            "$ref": "#/components/schemas/TicketsNewRewardsRewardsDTO"
          }
        },
        "required": [
          "id",
          "tactic",
          "entry",
          "tickets_rewards"
        ]
      },
      "TicketsWithEntryTacticsConfigPayoutDTO": {
        "type": "object",
        "properties": {
          "price_pool": {
            "type": "number",
            "description": "Price pool",
            "example": 1000
          },
          "payout": {
            "description": "Payout details",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayoutObject"
            }
          },
          "price_pool_gold": {
            "type": "number",
            "description": "Price pool in gold",
            "example": 100
          },
          "payout_gold": {
            "description": "Payout details in gold",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayoutObject"
            }
          },
          "price_pool_cards": {
            "type": "number",
            "description": "Price pool in gold",
            "example": 100
          },
          "payout_cards": {
            "description": "Payout details in cards",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayoutObject"
            }
          },
          "price_pool_tickets": {
            "type": "number",
            "description": "Price pool in gold",
            "example": 100
          },
          "payout_tickets": {
            "description": "Payout details in gold",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayoutObject"
            }
          }
        },
        "required": [
          "price_pool",
          "payout",
          "price_pool_gold",
          "payout_gold",
          "price_pool_cards",
          "payout_cards",
          "price_pool_tickets",
          "payout_tickets"
        ]
      },
      "TicketsWithEntryTacticsConfigDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the config",
            "example": "2d182873-dcec-4f34-9daa-4acf7560681c"
          },
          "name": {
            "type": "string",
            "description": "Name of the tactic",
            "example": "Tactic 🛡️"
          },
          "payout_structure": {
            "$ref": "#/components/schemas/TicketsWithEntryTacticsConfigPayoutDTO"
          }
        },
        "required": [
          "id",
          "name",
          "payout_structure"
        ]
      },
      "TicketsWithEntryTactic": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the tactic",
            "example": "70aa7e8d-15de-445a-a12b-4bdc76c489c0"
          },
          "start_date": {
            "format": "date-time",
            "type": "string",
            "description": "Start date of the tactic",
            "example": "2024-05-27T00:00:00.000Z"
          },
          "end_date": {
            "format": "date-time",
            "type": "string",
            "description": "End date of the tactic",
            "example": "2024-05-28T23:00:00.000Z"
          },
          "eth_price": {
            "description": "ETH price",
            "example": "3747.26",
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "config": {
            "$ref": "#/components/schemas/TicketsWithEntryTacticsConfigDTO"
          }
        },
        "required": [
          "id",
          "start_date",
          "end_date",
          "eth_price",
          "config"
        ]
      },
      "TicketsWithEntryDTO": {
        "type": "object",
        "properties": {
          "rank": {
            "type": "number",
            "description": "Rank",
            "example": 0,
            "nullable": true
          },
          "score": {
            "type": "string",
            "description": "Score",
            "example": "0",
            "nullable": true
          },
          "tactics": {
            "$ref": "#/components/schemas/TicketsWithEntryTactic"
          }
        },
        "required": [
          "rank",
          "score",
          "tactics"
        ]
      },
      "TicketsWithEntryRewardsDTO": {
        "type": "object",
        "properties": {
          "reward_eth": {
            "description": "Reward amount in ETH",
            "example": 0.5,
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "reward_gold": {
            "description": "Reward amount in gold",
            "example": 1000,
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "reward_cards": {
            "type": "number",
            "description": "Reward amount in cards",
            "example": 1
          },
          "reward_tickets": {
            "type": "number",
            "description": "Reward amount in tactic tickets",
            "example": 1
          }
        },
        "required": [
          "reward_eth",
          "reward_gold",
          "reward_cards",
          "reward_tickets"
        ]
      },
      "GetTicketsWithEntryResponseDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the ticket",
            "example": "0f331a56-948e-41f5-bc59-9cb64dfb5ce8"
          },
          "entry": {
            "$ref": "#/components/schemas/TicketsWithEntryDTO"
          },
          "tickets_rewards": {
            "$ref": "#/components/schemas/TicketsWithEntryRewardsDTO"
          }
        },
        "required": [
          "id",
          "entry",
          "tickets_rewards"
        ]
      },
      "GetHeroScoresQueryHeroesOrderByDTO": {
        "type": "object",
        "properties": {
          "followers_count": {
            "type": "string",
            "description": "Order by followers count",
            "enum": [
              "asc",
              "desc"
            ]
          }
        }
      },
      "GetHeroScoresQueryOrderByDTO": {
        "type": "object",
        "properties": {
          "heroes": {
            "description": "Order by heroes data",
            "allOf": [
              {
                "$ref": "#/components/schemas/GetHeroScoresQueryHeroesOrderByDTO"
              }
            ]
          },
          "fantasy_score": {
            "type": "string",
            "description": "Order by fantasy score",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "tweet_count": {
            "type": "string",
            "description": "Order by current rank",
            "enum": [
              "asc",
              "desc"
            ]
          }
        }
      },
      "GetHeroScoresQueryDTO": {
        "type": "object",
        "properties": {
          "search": {
            "type": "string",
            "description": "Search query"
          },
          "orderBy": {
            "$ref": "#/components/schemas/GetHeroScoresQueryOrderByDTO"
          },
          "pagination": {
            "description": "Pagination arguments",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationDTO"
              }
            ]
          }
        },
        "required": [
          "search"
        ]
      },
      "PaginatedTacticsHeroScoreResult": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Data items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TacticsHeroScore"
            }
          },
          "meta": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaDTO"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "GetLastEthPriceResponse": {
        "type": "object",
        "properties": {
          "eth_price": {
            "description": "The last recorded Ethereum price",
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "timestamp": {
            "format": "date-time",
            "type": "string",
            "description": "Unix timestamp of the last recorded Ethereum price"
          }
        },
        "required": [
          "eth_price",
          "timestamp"
        ]
      },
      "GetTotalMoneyDistributedDTO": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "example": 1000
          }
        },
        "required": [
          "total"
        ]
      },
      "OpenTacticRegistrationDTO": {
        "type": "object",
        "properties": {
          "tactic_id": {
            "type": "string",
            "description": "The ID of the tactic to open registration for"
          }
        },
        "required": [
          "tactic_id"
        ]
      },
      "GetTacticsHeroesCurrent24hResponse": {
        "type": "object",
        "properties": {
          "fantasy_score": {
            "description": "Fantasy score of the hero",
            "example": "100.00",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "views": {
            "format": "int64",
            "type": "integer",
            "description": "Number of views for the hero",
            "example": "1000"
          },
          "tweet_count": {
            "format": "int64",
            "type": "integer",
            "description": "Number of tweets mentioning the hero",
            "example": "500"
          }
        },
        "required": [
          "fantasy_score",
          "views",
          "tweet_count"
        ]
      },
      "GetTacticsHeroesResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the hero",
            "example": "unique-id-string"
          },
          "handle": {
            "type": "string",
            "description": "Handle of the hero",
            "example": "hero_handle"
          },
          "name": {
            "type": "string",
            "description": "Name of the hero",
            "example": "Hero Name"
          },
          "followers_count": {
            "format": "int64",
            "type": "integer",
            "description": "Count of followers",
            "example": 0
          },
          "profile_image_url_https": {
            "type": "string",
            "description": "URL of the profile image in HTTPS",
            "example": "http://profileimage.url"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-07-01T13:34:57.306Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-07-01T13:35:04.802Z"
          },
          "stars": {
            "type": "number",
            "description": "Stars of the hero",
            "example": 3
          },
          "current_24h": {
            "$ref": "#/components/schemas/GetTacticsHeroesCurrent24hResponse"
          }
        },
        "required": [
          "id",
          "handle",
          "name",
          "followers_count",
          "created_at",
          "updated_at",
          "stars",
          "current_24h"
        ]
      },
      "PaginatedGetTacticsHeroesResponseResult": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Data items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetTacticsHeroesResponse"
            }
          },
          "meta": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaDTO"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "GetTacticCoinsHistoricalDataHistoryResponse": {
        "type": "object",
        "properties": {
          "percent_change": {
            "type": "number"
          },
          "price_usd": {
            "type": "number"
          },
          "market_cap": {
            "type": "number"
          },
          "datetime": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "percent_change",
          "price_usd",
          "market_cap",
          "datetime"
        ]
      },
      "GetTacticCoinsHistoricalDataResponseDTO": {
        "type": "object",
        "properties": {
          "hero_id": {
            "type": "string"
          },
          "hero": {
            "$ref": "#/components/schemas/Hero"
          },
          "coin_id": {
            "type": "string"
          },
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetTacticCoinsHistoricalDataHistoryResponse"
            }
          }
        },
        "required": [
          "hero_id",
          "hero",
          "coin_id",
          "history"
        ]
      },
      "RegisterTacticBodyDTO": {
        "type": "object",
        "properties": {
          "tactic_id": {
            "type": "string",
            "description": "The ID of the tactic to register to"
          },
          "captain_id": {
            "type": "string",
            "description": "The ID of the captain to register to"
          }
        },
        "required": [
          "tactic_id"
        ]
      },
      "RegisterToTacticResponseDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the registered tactic"
          }
        },
        "required": [
          "id"
        ]
      },
      "GetNotValidatedEntriesResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the entry",
            "example": "some-unique-id"
          },
          "tactic_id": {
            "type": "string",
            "description": "Tactic ID",
            "example": "some-tactic-id"
          },
          "validate_deck_before": {
            "format": "date-time",
            "type": "string",
            "description": "Validate deck before",
            "example": "2024-05-27T00:00:00.000Z"
          }
        },
        "required": [
          "id",
          "tactic_id",
          "validate_deck_before"
        ]
      },
      "HeroChoice": {
        "type": "object",
        "properties": {}
      },
      "SaveDeckDTO": {
        "type": "object",
        "properties": {
          "tacticPlayerId": {
            "type": "string",
            "description": "The ID of the tactic player",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "heroChoices": {
            "description": "The hero choices",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HeroChoice"
            }
          }
        },
        "required": [
          "tacticPlayerId",
          "heroChoices"
        ]
      },
      "CreateDeckResponseDTO": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "ok": {
            "type": "boolean"
          }
        },
        "required": [
          "message",
          "ok"
        ]
      },
      "SummaryOfTacticId_TacticDTO_ConfigDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the config",
            "example": "2d182873-dcec-4f34-9daa-4acf7560681c"
          },
          "name": {
            "type": "string",
            "description": "Name of the tactic",
            "example": "Tactic 🛡️"
          },
          "emoji": {
            "type": "string",
            "description": "Emoji of the tactic",
            "example": "🛡️"
          },
          "duration": {
            "type": "number",
            "description": "Duration of the tactic in hours",
            "example": 24
          },
          "entry_price": {
            "description": "Entry price as a Decimal value",
            "example": "0",
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "flat_fee": {
            "description": "Flat fee as a Decimal value",
            "example": "0",
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "payout_model": {
            "type": "string",
            "description": "Payout model for the tactic",
            "example": "linear"
          },
          "flags": {
            "type": "object",
            "description": "Flags for additional configuration",
            "example": "{}"
          },
          "max_stars": {
            "type": "number",
            "description": "Maximum stars for the tactic",
            "example": 25
          },
          "activated": {
            "type": "boolean",
            "description": "Whether the tactic is activated",
            "example": true
          },
          "payout_structure_id": {
            "type": "string",
            "description": "Identifier for the payout structure",
            "example": "a30fdfca-e59f-4326-a195-cbb9a1a3b09b"
          },
          "start_hour": {
            "type": "number",
            "description": "Start hour for the tactic",
            "example": 13
          },
          "create_new_tactic": {
            "type": "boolean",
            "description": "Whether to create a new tactic",
            "example": true
          },
          "payout_structure": {
            "description": "Payout structure details",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutStructure"
              }
            ]
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Created at",
            "example": "2024-05-27T00:00:00.000Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Created at",
            "example": "2024-05-27T00:00:00.000Z"
          },
          "banner_image": {
            "type": "string",
            "description": "Banner image for the tactic",
            "example": "https://r2.fantasy.top/assets/tactics-background.png"
          },
          "use_twitter_indexed_score": {
            "type": "boolean",
            "description": "wether or not the compute is made by the twitter indexer or the nest api, nest api handle only for the moment for the coin tactic",
            "example": true
          },
          "recurring_dates": {
            "description": "Recurring dates for the tactic",
            "example": [
              {
                "day": 1,
                "hour": 12
              },
              {
                "day": 2,
                "hour": 12
              }
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "left_captain_id": {
            "type": "string",
            "description": "Left captain id",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "right_captain_id": {
            "type": "string",
            "description": "Right captain id",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "is_left_vs_right": {
            "type": "boolean",
            "description": "Whether the tactic is left vs right",
            "example": true
          },
          "is_rolling": {
            "type": "boolean",
            "description": "Whether the tactic is rolling",
            "example": true
          },
          "is_solo_rolling": {
            "type": "boolean",
            "description": "Whether the tactic is solo rolling",
            "example": true
          }
        },
        "required": [
          "id",
          "name",
          "emoji",
          "duration",
          "entry_price",
          "flat_fee",
          "payout_model",
          "flags",
          "max_stars",
          "activated",
          "payout_structure_id",
          "start_hour",
          "create_new_tactic",
          "created_at",
          "updated_at",
          "banner_image",
          "use_twitter_indexed_score",
          "recurring_dates",
          "left_captain_id",
          "right_captain_id",
          "is_left_vs_right",
          "is_rolling",
          "is_solo_rolling"
        ]
      },
      "SummaryOfTacticId_TacticDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the tactic",
            "example": "70aa7e8d-15de-445a-a12b-4bdc76c489c0"
          },
          "tactic_config_id": {
            "type": "string",
            "description": "Identifier for the tactic configuration",
            "example": "c3889c78-c0f4-4277-ba10-0a16ddb32a49"
          },
          "start_date": {
            "format": "date-time",
            "type": "string",
            "description": "Start date of the tactic",
            "example": "2024-05-27T00:00:00.000Z"
          },
          "end_date": {
            "format": "date-time",
            "type": "string",
            "description": "End date of the tactic",
            "example": "2024-05-28T23:00:00.000Z"
          },
          "is_processed": {
            "type": "boolean",
            "description": "Whether the tactic is processed",
            "example": true
          },
          "cumulated_weth": {
            "description": "Cumulated WETH amount",
            "example": "0",
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "wallet_address": {
            "type": "string",
            "description": "Wallet address",
            "example": "0x866f235726B9dE2C355895e35AeBCCe7f48dA0f5"
          },
          "eth_price": {
            "description": "ETH price",
            "example": "3747.26",
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "is_rewards_processed": {
            "type": "boolean",
            "description": "Whether the rewards are processed",
            "example": true
          },
          "registration_openned": {
            "type": "boolean",
            "description": "Whether the registration is opened",
            "example": true
          },
          "visible": {
            "type": "boolean",
            "description": "Whether the tactic is visible",
            "example": true
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-07-01T13:35:34.437Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-07-01T13:35:40.847Z"
          },
          "has_been_validated": {
            "type": "boolean",
            "description": "Tactic has been validated ?"
          },
          "config": {
            "$ref": "#/components/schemas/SummaryOfTacticId_TacticDTO_ConfigDTO"
          }
        },
        "required": [
          "id",
          "tactic_config_id",
          "start_date",
          "end_date",
          "is_processed",
          "cumulated_weth",
          "wallet_address",
          "eth_price",
          "is_rewards_processed",
          "registration_openned",
          "visible",
          "created_at",
          "updated_at",
          "has_been_validated",
          "config"
        ]
      },
      "SummaryOfTacticId_Top5Heroes_HeroScoreDTO": {
        "type": "object",
        "properties": {
          "stars": {
            "type": "number",
            "description": "Stars",
            "example": 5
          },
          "fantasy_score": {
            "description": "Fantasy score",
            "example": "100.0",
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "current_rank": {
            "type": "number",
            "description": "Current rank",
            "example": 1,
            "nullable": true
          }
        },
        "required": [
          "stars",
          "fantasy_score",
          "current_rank"
        ]
      },
      "SummaryOfTacticId_Top5HeroesDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the hero",
            "example": "unique-id-string"
          },
          "handle": {
            "type": "string",
            "description": "Handle of the hero",
            "example": "hero_handle"
          },
          "name": {
            "type": "string",
            "description": "Name of the hero",
            "example": "Hero Name"
          },
          "profile_image_url_https": {
            "type": "string",
            "description": "URL of the profile image in HTTPS",
            "example": "http://profileimage.url"
          },
          "hero_score": {
            "$ref": "#/components/schemas/SummaryOfTacticId_Top5Heroes_HeroScoreDTO"
          }
        },
        "required": [
          "id",
          "handle",
          "name",
          "hero_score"
        ]
      },
      "SummaryOfTacticId_EntryDTO_TicketRewardDTO": {
        "type": "object",
        "properties": {
          "reward_eth": {
            "description": "Reward amount in ETH",
            "example": 0.5,
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "reward_gold": {
            "description": "Reward amount in gold",
            "example": 1000,
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "reward_cards": {
            "type": "number",
            "description": "Reward amount in cards",
            "example": 1
          },
          "reward_tickets": {
            "type": "number",
            "description": "Reward amount in tactic tickets",
            "example": 1
          }
        },
        "required": [
          "reward_eth",
          "reward_gold",
          "reward_cards",
          "reward_tickets"
        ]
      },
      "SummaryOfTacticId_EntryDTO": {
        "type": "object",
        "properties": {
          "tactic_id": {
            "type": "string",
            "description": "Tactic ID",
            "example": "some-tactic-id"
          },
          "rank": {
            "type": "number",
            "description": "Rank",
            "example": 0,
            "nullable": true
          },
          "score": {
            "type": "string",
            "description": "Score",
            "example": "0",
            "nullable": true
          },
          "ticket_reward": {
            "$ref": "#/components/schemas/SummaryOfTacticId_EntryDTO_TicketRewardDTO"
          }
        },
        "required": [
          "tactic_id",
          "rank",
          "score",
          "ticket_reward"
        ]
      },
      "SummaryOfTacticId_WinnersOfEachTacticDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "handle": {
            "type": "string"
          },
          "profile_picture": {
            "type": "string"
          },
          "entry": {
            "$ref": "#/components/schemas/SummaryOfTacticId_EntryDTO"
          }
        },
        "required": [
          "id",
          "name",
          "handle",
          "profile_picture",
          "entry"
        ]
      },
      "SummaryOfTacticId_Top5XFactorsHeroesDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the hero",
            "example": "unique-id-string"
          },
          "handle": {
            "type": "string",
            "description": "Handle of the hero",
            "example": "hero_handle"
          },
          "name": {
            "type": "string",
            "description": "Name of the hero",
            "example": "Hero Name"
          },
          "profile_image_url_https": {
            "type": "string",
            "description": "URL of the profile image in HTTPS",
            "example": "http://profileimage.url"
          },
          "current_rank": {
            "type": "number"
          },
          "fantasy_score": {
            "$ref": "#/components/schemas/DecimalNumber"
          },
          "stars": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "handle",
          "name",
          "current_rank",
          "fantasy_score",
          "stars"
        ]
      },
      "SummaryOfTacticIdDTO": {
        "type": "object",
        "properties": {
          "tactic": {
            "$ref": "#/components/schemas/SummaryOfTacticId_TacticDTO"
          },
          "top_5_heroes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SummaryOfTacticId_Top5HeroesDTO"
            }
          },
          "winners_of_tactic": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SummaryOfTacticId_WinnersOfEachTacticDTO"
            }
          },
          "top_5_x_factors_heroes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SummaryOfTacticId_Top5XFactorsHeroesDTO"
            }
          }
        },
        "required": [
          "tactic",
          "top_5_heroes",
          "winners_of_tactic",
          "top_5_x_factors_heroes"
        ]
      },
      "SummaryOfTacticIdOfPlayer_TicketRewardDTO": {
        "type": "object",
        "properties": {
          "ETH": {
            "type": "number"
          },
          "GOLD": {
            "type": "number"
          },
          "PACK": {
            "type": "number"
          },
          "TICKETS": {
            "type": "number"
          }
        },
        "required": [
          "ETH",
          "GOLD",
          "PACK",
          "TICKETS"
        ]
      },
      "SummaryOfTacticIdOfPlayer_TacticEntryDTO": {
        "type": "object",
        "properties": {
          "tactic_id": {
            "type": "string",
            "description": "Tactic ID",
            "example": "some-tactic-id"
          },
          "rank": {
            "type": "number",
            "description": "Rank",
            "example": 0,
            "nullable": true
          },
          "score": {
            "type": "string",
            "description": "Score",
            "example": "0",
            "nullable": true
          },
          "heroes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SummaryOfTacticId_Top5HeroesDTO"
            }
          },
          "ticket_rewards": {
            "$ref": "#/components/schemas/SummaryOfTacticIdOfPlayer_TicketRewardDTO"
          }
        },
        "required": [
          "tactic_id",
          "rank",
          "score",
          "heroes",
          "ticket_rewards"
        ]
      },
      "SummaryOfTacticIdOfPlayerDTO": {
        "type": "object",
        "properties": {
          "tactic": {
            "$ref": "#/components/schemas/SummaryOfTacticId_TacticDTO"
          },
          "tactic_player_info": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SummaryOfTacticIdOfPlayer_TacticEntryDTO"
            }
          },
          "best_rank": {
            "type": "number"
          },
          "nb_of_deck_played": {
            "type": "number"
          },
          "total_rewards": {
            "$ref": "#/components/schemas/SummaryOfTacticIdOfPlayer_TicketRewardDTO"
          },
          "top_5_x_factors_heroes_of_user": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SummaryOfTacticId_Top5XFactorsHeroesDTO"
            }
          },
          "is_claimed": {
            "type": "boolean"
          }
        },
        "required": [
          "tactic",
          "tactic_player_info",
          "best_rank",
          "nb_of_deck_played",
          "total_rewards",
          "top_5_x_factors_heroes_of_user",
          "is_claimed"
        ]
      },
      "GetTacticsLeaderboardByWinnings_PlayerDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "handle": {
            "type": "string"
          },
          "profile_picture": {
            "type": "string"
          },
          "rank": {
            "type": "number"
          },
          "total_usd": {
            "type": "number"
          },
          "total_gold": {
            "type": "number"
          },
          "total_cards": {
            "type": "number"
          },
          "total_tickets": {
            "type": "number"
          },
          "deck_count": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "name",
          "handle",
          "profile_picture",
          "rank",
          "total_usd",
          "total_gold",
          "total_cards",
          "total_tickets",
          "deck_count"
        ]
      },
      "GetTacticsLeaderboardByWinningsDTO": {
        "type": "object",
        "properties": {
          "players": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetTacticsLeaderboardByWinnings_PlayerDTO"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/MetaInfiniteQueryDto"
          }
        },
        "required": [
          "players",
          "meta"
        ]
      },
      "GetHeroProgressOverTournament_HeroDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the hero",
            "example": "unique-id-string"
          },
          "name": {
            "type": "string",
            "description": "Name of the hero",
            "example": "Hero Name"
          },
          "profile_image_url_https": {
            "type": "string",
            "description": "URL of the profile image in HTTPS",
            "example": "http://profileimage.url"
          },
          "current_rank": {
            "type": "number"
          },
          "stars": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "name",
          "current_rank",
          "stars"
        ]
      },
      "GetHeroProgressOverTournament_HistoryDTO": {
        "type": "object",
        "properties": {
          "fantasy_score": {
            "type": "number"
          },
          "rank": {
            "type": "number"
          },
          "datetime": {
            "type": "string"
          }
        },
        "required": [
          "fantasy_score",
          "rank",
          "datetime"
        ]
      },
      "GetHeroProgressOverTournamentDTO": {
        "type": "object",
        "properties": {
          "hero": {
            "$ref": "#/components/schemas/GetHeroProgressOverTournament_HeroDTO"
          },
          "histories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetHeroProgressOverTournament_HistoryDTO"
            }
          }
        },
        "required": [
          "hero",
          "histories"
        ]
      },
      "TournamentPlayer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the tournament history",
            "example": "70aa7e8d-15de-445a-a12b-4bdc76c489c0"
          },
          "card1": {
            "type": "string",
            "description": "Card 1 identifier",
            "example": "card123"
          },
          "card2": {
            "type": "string",
            "description": "Card 2 identifier",
            "example": "card456"
          },
          "card3": {
            "type": "string",
            "description": "Card 3 identifier",
            "example": "card789"
          },
          "card4": {
            "type": "string",
            "description": "Card 4 identifier",
            "example": "card012"
          },
          "card5": {
            "type": "string",
            "description": "Card 5 identifier",
            "example": "card345"
          },
          "cards": {
            "description": "Cards",
            "items": {
              "type": "array"
            },
            "type": "array"
          },
          "player_id": {
            "type": "string",
            "description": "Player identifier",
            "example": "player123"
          },
          "players": {
            "description": "player object",
            "allOf": [
              {
                "$ref": "#/components/schemas/Player"
              }
            ]
          },
          "score": {
            "description": "Score in the tournament",
            "example": 1000.5,
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "rank": {
            "type": "number",
            "description": "Rank in the tournament",
            "example": 1
          },
          "rewards_details": {
            "type": "object",
            "description": "Reward details",
            "example": {
              "eth": 0.5,
              "gold": 1000
            }
          },
          "tournament_id": {
            "type": "string",
            "description": "Tournament identifier",
            "example": "70aa7e8d-15de-445a-a12b-4bdc76c489c0"
          },
          "hero_rarity_index1": {
            "type": "string",
            "description": "Hero rarity index for card 1",
            "example": "rare_1"
          },
          "hero_rarity_index2": {
            "type": "string",
            "description": "Hero rarity index for card 2",
            "example": "epic_2"
          },
          "hero_rarity_index3": {
            "type": "string",
            "description": "Hero rarity index for card 3",
            "example": "legendary_3"
          },
          "hero_rarity_index4": {
            "type": "string",
            "description": "Hero rarity index for card 4",
            "example": "common_4"
          },
          "hero_rarity_index5": {
            "type": "string",
            "description": "Hero rarity index for card 5",
            "example": "mythic_5"
          },
          "is_reward_activated": {
            "type": "boolean",
            "description": "Whether the reward is activated",
            "example": true
          },
          "elo_change": {
            "type": "number",
            "description": "Elo change for the player",
            "example": 100
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-05-15T10:30:00.000Z"
          },
          "previous_rank": {
            "type": "number",
            "description": "Previous rank of the player"
          },
          "is_registered": {
            "type": "boolean",
            "description": "Indicates if the player is registered"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-05-15T10:30:00.000Z"
          }
        },
        "required": [
          "id",
          "card1",
          "card2",
          "card3",
          "card4",
          "card5",
          "cards",
          "player_id",
          "players",
          "score",
          "rank",
          "rewards_details",
          "tournament_id",
          "hero_rarity_index1",
          "hero_rarity_index2",
          "hero_rarity_index3",
          "hero_rarity_index4",
          "hero_rarity_index5",
          "is_reward_activated",
          "elo_change",
          "updated_at",
          "previous_rank",
          "is_registered",
          "created_at"
        ]
      },
      "TournamentRewards": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the reward",
            "example": "70aa7e8d-15de-445a-a12b-4bdc76c489c0"
          },
          "type": {
            "type": "string",
            "description": "Type of reward",
            "example": "ETH"
          },
          "total_supply": {
            "description": "Total supply of the reward",
            "example": "1000",
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "tournament_id": {
            "type": "string",
            "description": "Tournament ID associated with this reward",
            "example": "70aa7e8d-15de-445a-a12b-4bdc76c489c0"
          },
          "distribution": {
            "description": "Distribution details of the reward",
            "example": [
              {
                "rank": 1,
                "reward": 500
              },
              {
                "rank": 2,
                "reward": 300
              },
              {
                "rank": 3,
                "reward": 200
              }
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "type",
          "total_supply",
          "tournament_id",
          "distribution"
        ]
      },
      "TournamentPlayerHistories": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the tournament history",
            "example": "70aa7e8d-15de-445a-a12b-4bdc76c489c0"
          },
          "card1": {
            "type": "string",
            "description": "Card 1 identifier",
            "example": "card123"
          },
          "card2": {
            "type": "string",
            "description": "Card 2 identifier",
            "example": "card456"
          },
          "card3": {
            "type": "string",
            "description": "Card 3 identifier",
            "example": "card789"
          },
          "card4": {
            "type": "string",
            "description": "Card 4 identifier",
            "example": "card012"
          },
          "card5": {
            "type": "string",
            "description": "Card 5 identifier",
            "example": "card345"
          },
          "cards": {
            "description": "Cards",
            "items": {
              "type": "array"
            },
            "type": "array"
          },
          "player_id": {
            "type": "string",
            "description": "Player identifier",
            "example": "player123"
          },
          "players": {
            "description": "player object",
            "allOf": [
              {
                "$ref": "#/components/schemas/Player"
              }
            ]
          },
          "score": {
            "description": "Score in the tournament",
            "example": 1000.5,
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "rank": {
            "type": "number",
            "description": "Rank in the tournament",
            "example": 1
          },
          "rewards_details": {
            "type": "object",
            "description": "Reward details",
            "example": {
              "eth": 0.5,
              "gold": 1000
            }
          },
          "tournament_id": {
            "type": "string",
            "description": "Tournament identifier",
            "example": "70aa7e8d-15de-445a-a12b-4bdc76c489c0"
          },
          "hero_rarity_index1": {
            "type": "string",
            "description": "Hero rarity index for card 1",
            "example": "rare_1"
          },
          "hero_rarity_index2": {
            "type": "string",
            "description": "Hero rarity index for card 2",
            "example": "epic_2"
          },
          "hero_rarity_index3": {
            "type": "string",
            "description": "Hero rarity index for card 3",
            "example": "legendary_3"
          },
          "hero_rarity_index4": {
            "type": "string",
            "description": "Hero rarity index for card 4",
            "example": "common_4"
          },
          "hero_rarity_index5": {
            "type": "string",
            "description": "Hero rarity index for card 5",
            "example": "mythic_5"
          },
          "is_reward_activated": {
            "type": "boolean",
            "description": "Whether the reward is activated",
            "example": true
          },
          "elo_change": {
            "type": "number",
            "description": "Elo change for the player",
            "example": 100
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-05-15T10:30:00.000Z"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-05-15T10:30:00.000Z"
          },
          "current_rank": {
            "type": "number",
            "description": "Current rank of the player"
          },
          "fantasy_score": {
            "type": "number",
            "description": "Fantasy score of the player"
          },
          "views": {
            "type": "number",
            "description": "Number of views for the tournament"
          }
        },
        "required": [
          "id",
          "card1",
          "card2",
          "card3",
          "card4",
          "card5",
          "cards",
          "player_id",
          "players",
          "score",
          "rank",
          "rewards_details",
          "tournament_id",
          "hero_rarity_index1",
          "hero_rarity_index2",
          "hero_rarity_index3",
          "hero_rarity_index4",
          "hero_rarity_index5",
          "is_reward_activated",
          "elo_change",
          "updated_at",
          "created_at",
          "current_rank",
          "fantasy_score",
          "views"
        ]
      },
      "CurrentRunningRewardsDTO": {
        "type": "object",
        "properties": {
          "reward_type": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          }
        },
        "required": [
          "reward_type",
          "amount"
        ]
      },
      "Tournament": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the tournament",
            "example": "70aa7e8d-15de-445a-a12b-4bdc76c489c0"
          },
          "name": {
            "type": "string",
            "description": "Name of the tournament",
            "example": "Summer Championship"
          },
          "description": {
            "type": "string",
            "description": "Description of the tournament",
            "example": "Join our exciting summer championship!"
          },
          "start_date": {
            "format": "date-time",
            "type": "string",
            "description": "Start date of the tournament",
            "example": "2024-06-01T00:00:00.000Z"
          },
          "end_date": {
            "format": "date-time",
            "type": "string",
            "description": "End date of the tournament",
            "example": "2024-06-30T23:59:59.999Z"
          },
          "flags": {
            "type": "object",
            "description": "Flags for the tournament",
            "example": {
              "special_rules": true,
              "double_points": false
            }
          },
          "is_main": {
            "type": "boolean",
            "description": "Whether this is a main tournament",
            "example": true
          },
          "league": {
            "type": "number",
            "description": "League number of the tournament",
            "example": 1
          },
          "image": {
            "type": "string",
            "description": "Image URL for the tournament",
            "example": "https://example.com/tournament-image.jpg"
          },
          "is_visible": {
            "type": "boolean",
            "description": "Whether the tournament is visible",
            "example": true
          },
          "is_stat_processed": {
            "type": "boolean",
            "description": "Whether the tournament statistics have been processed",
            "example": false
          },
          "is_elo_processed": {
            "type": "boolean",
            "description": "Whether the tournament elo has been processed",
            "example": false
          },
          "tournament_number": {
            "type": "number",
            "description": "Tournament number",
            "example": 5
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-05-15T10:30:00.000Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-05-15T10:30:00.000Z"
          },
          "reward_image": {
            "type": "string",
            "description": "Image URL for the tournament reward",
            "example": "https://example.com/reward-image.jpg"
          },
          "need_to_be_reprocessed": {
            "type": "boolean",
            "description": "Whether the tournament needs to be reprocessed",
            "example": false
          },
          "has_started": {
            "type": "boolean",
            "description": "Whether the tournament has started",
            "example": true
          },
          "has_been_validated": {
            "type": "boolean",
            "description": "Whether the tournament has been validated",
            "example": false
          },
          "is_rewards_processed": {
            "type": "boolean",
            "description": "Whether the rewards have been processed",
            "example": false
          },
          "rewards": {
            "description": "Rewards for the tournament",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TournamentRewards"
            }
          },
          "histories": {
            "description": "Histories for the tournament",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TournamentPlayerHistories"
            }
          },
          "current_players": {
            "description": "Players for the tournament",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TournamentPlayer"
            }
          },
          "registered_players_count": {
            "type": "number",
            "description": "Total number of registered players",
            "example": 100
          },
          "is_player_registered": {
            "type": "boolean",
            "description": "Whether the current player is registered",
            "example": true
          },
          "totalRegistered": {
            "type": "number",
            "description": "Total number of registered players",
            "example": 100
          },
          "current_rewards": {
            "description": "Current rewards for the tournament",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrentRunningRewardsDTO"
            }
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "start_date",
          "end_date",
          "flags",
          "is_main",
          "league",
          "image",
          "is_visible",
          "is_stat_processed",
          "is_elo_processed",
          "tournament_number",
          "created_at",
          "updated_at",
          "reward_image",
          "need_to_be_reprocessed",
          "has_started",
          "has_been_validated",
          "is_rewards_processed",
          "rewards",
          "histories",
          "current_players",
          "registered_players_count",
          "is_player_registered",
          "totalRegistered",
          "current_rewards"
        ]
      },
      "GetUserRegisteredTournamentsDTO": {
        "type": "object",
        "properties": {
          "tournaments": {
            "description": "List of tournaments the player is registered in",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tournament"
            }
          }
        },
        "required": [
          "tournaments"
        ]
      },
      "GetUserRegisteredTournamentsAndWinningsDTO": {
        "type": "object",
        "properties": {
          "tournaments": {
            "description": "List of tournaments the player is registered in",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tournament"
            }
          },
          "totalRewards": {
            "description": "Total rewards across all registered tournaments",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrentRunningRewardsDTO"
            }
          }
        },
        "required": [
          "tournaments",
          "totalRewards"
        ]
      },
      "GetLeaderboardByWinnings_PlayerDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "handle": {
            "type": "string"
          },
          "profile_picture": {
            "type": "string"
          },
          "rank": {
            "type": "number"
          },
          "elo_score": {
            "type": "number"
          },
          "total_ETH": {
            "type": "number"
          },
          "total_FRAGMENT": {
            "type": "number"
          },
          "total_GOLD": {
            "type": "number"
          },
          "total_FAN": {
            "type": "number"
          },
          "total_elo_change": {
            "type": "number"
          },
          "deck_count": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "name",
          "handle",
          "profile_picture",
          "rank",
          "elo_score",
          "total_ETH",
          "total_FRAGMENT",
          "total_GOLD",
          "total_FAN",
          "total_elo_change",
          "deck_count"
        ]
      },
      "GetLeaderboardByWinningsDTO": {
        "type": "object",
        "properties": {
          "players": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetLeaderboardByWinnings_PlayerDTO"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/MetaInfiniteQueryDto"
          }
        },
        "required": [
          "players",
          "meta"
        ]
      },
      "GetHistoricalDecksAndWinnings_TournamentHistoryDTO": {
        "type": "object",
        "properties": {
          "current_rank": {
            "type": "number",
            "description": "Current rank of the hero",
            "example": 1
          },
          "fantasy_score": {
            "description": "Fantasy score of the hero",
            "example": "100.00",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "views": {
            "format": "int64",
            "type": "integer",
            "description": "Number of views for the hero",
            "example": "1000"
          },
          "stars": {
            "type": "number",
            "description": "Number of stars",
            "example": 3
          }
        },
        "required": [
          "current_rank",
          "fantasy_score",
          "views",
          "stars"
        ]
      },
      "GetHistoricalDecksAndWinnings_HeroDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the hero",
            "example": "unique-id-string"
          },
          "handle": {
            "type": "string",
            "description": "Handle of the hero",
            "example": "hero_handle"
          },
          "name": {
            "type": "string",
            "description": "Name of the hero",
            "example": "Hero Name"
          },
          "stars": {
            "type": "number",
            "description": "Stars of the hero",
            "example": 3
          },
          "tournament_history": {
            "description": "Tournament history",
            "allOf": [
              {
                "$ref": "#/components/schemas/GetHistoricalDecksAndWinnings_TournamentHistoryDTO"
              }
            ]
          }
        },
        "required": [
          "id",
          "handle",
          "name",
          "stars",
          "tournament_history"
        ]
      },
      "GetHistoricalDecksAndWinnings_CardDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "hero_rarity_index": {
            "type": "string"
          },
          "picture": {
            "type": "string"
          },
          "heroes": {
            "description": "Hero of the card",
            "allOf": [
              {
                "$ref": "#/components/schemas/GetHistoricalDecksAndWinnings_HeroDTO"
              }
            ]
          }
        },
        "required": [
          "id",
          "hero_rarity_index",
          "picture",
          "heroes"
        ]
      },
      "GetHistoricalDecksAndWinnings_HistoryDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "player_id": {
            "type": "string"
          },
          "score": {
            "$ref": "#/components/schemas/DecimalNumber"
          },
          "rank": {
            "type": "number"
          },
          "tournament_id": {
            "type": "string"
          },
          "elo_change": {
            "type": "number"
          },
          "cards": {
            "description": "Tournament history",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetHistoricalDecksAndWinnings_CardDTO"
            }
          }
        },
        "required": [
          "id",
          "player_id",
          "score",
          "rank",
          "tournament_id",
          "elo_change",
          "cards"
        ]
      },
      "GetHistoricalDecksAndWinnings_TournamentDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the tournament",
            "example": "70aa7e8d-15de-445a-a12b-4bdc76c489c0"
          },
          "start_date": {
            "format": "date-time",
            "type": "string",
            "description": "Start date of the tournament",
            "example": "2024-06-01T00:00:00.000Z"
          },
          "end_date": {
            "format": "date-time",
            "type": "string",
            "description": "End date of the tournament",
            "example": "2024-06-30T23:59:59.999Z"
          },
          "league": {
            "type": "number",
            "description": "League number of the tournament",
            "example": 1
          },
          "tournament_number": {
            "type": "number",
            "description": "Tournament number",
            "example": 5
          },
          "rewards": {
            "description": "Rewards for the tournament",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TournamentRewards"
            }
          },
          "registered_players_count": {
            "type": "number",
            "description": "Total number of registered players",
            "example": 100
          },
          "histories": {
            "description": "List of players in the tournament",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetHistoricalDecksAndWinnings_HistoryDTO"
            }
          },
          "totalRewards": {
            "description": "Total rewards across all registered tournaments",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrentRunningRewardsDTO"
            }
          }
        },
        "required": [
          "id",
          "start_date",
          "end_date",
          "league",
          "tournament_number",
          "rewards",
          "registered_players_count",
          "histories",
          "totalRewards"
        ]
      },
      "GetHistoricalDecksAndWinningsDTO": {
        "type": "object",
        "properties": {
          "tournaments": {
            "description": "List of tournaments the player is registered in",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetHistoricalDecksAndWinnings_TournamentDTO"
            }
          },
          "totalRewards": {
            "description": "Total rewards across all registered tournaments",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrentRunningRewardsDTO"
            }
          }
        },
        "required": [
          "tournaments",
          "totalRewards"
        ]
      },
      "GetAllPlayersDTO": {
        "type": "object",
        "properties": {
          "pagination": {
            "example": {
              "page": 0,
              "limit": 20
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationDTO"
              }
            ]
          },
          "search": {
            "type": "string",
            "description": "Filter by deck name"
          }
        },
        "required": [
          "pagination"
        ]
      },
      "PaginatedTournamentPlayerResult": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Data items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TournamentPlayer"
            }
          },
          "meta": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaDTO"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "TournamentFlags": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Flag id",
            "example": ""
          },
          "description": {
            "type": "string",
            "description": "Flag description",
            "example": ""
          },
          "label": {
            "type": "string",
            "description": "Flag label",
            "example": ""
          }
        },
        "required": [
          "id",
          "description",
          "label"
        ]
      },
      "RegisterDeckDTO": {
        "type": "object",
        "properties": {
          "cardIds": {
            "description": "The ID of the card",
            "example": "1234567890",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tournamentId": {
            "type": "string",
            "description": "The ID of the tournament",
            "example": "1234567890"
          },
          "deckId": {
            "type": "string",
            "description": "The ID of the deck",
            "example": "1234567890"
          }
        },
        "required": [
          "cardIds",
          "tournamentId",
          "deckId"
        ]
      },
      "LastRefreshDTO": {
        "type": "object",
        "properties": {
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "The last update timestamp",
            "example": "2023-04-01T12:00:00Z"
          }
        },
        "required": [
          "updated_at"
        ]
      },
      "GetTournamentHistoryOfPlayerIdDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the tournament",
            "example": "70aa7e8d-15de-445a-a12b-4bdc76c489c0"
          },
          "tournament_number": {
            "type": "number",
            "description": "Tournament number",
            "example": 5
          },
          "number_of_registered_decks": {
            "type": "number"
          },
          "total_rewards": {
            "type": "object"
          },
          "league_played": {
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        },
        "required": [
          "id",
          "tournament_number",
          "number_of_registered_decks",
          "total_rewards",
          "league_played"
        ]
      },
      "SummaryOfTournamentNumber_TournamentDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the tournament",
            "example": "70aa7e8d-15de-445a-a12b-4bdc76c489c0"
          },
          "name": {
            "type": "string",
            "description": "Name of the tournament",
            "example": "Summer Championship"
          },
          "description": {
            "type": "string",
            "description": "Description of the tournament",
            "example": "Join our exciting summer championship!"
          },
          "start_date": {
            "format": "date-time",
            "type": "string",
            "description": "Start date of the tournament",
            "example": "2024-06-01T00:00:00.000Z"
          },
          "end_date": {
            "format": "date-time",
            "type": "string",
            "description": "End date of the tournament",
            "example": "2024-06-30T23:59:59.999Z"
          },
          "flags": {
            "type": "object",
            "description": "Flags for the tournament",
            "example": {
              "special_rules": true,
              "double_points": false
            }
          },
          "is_main": {
            "type": "boolean",
            "description": "Whether this is a main tournament",
            "example": true
          },
          "league": {
            "type": "number",
            "description": "League number of the tournament",
            "example": 1
          },
          "image": {
            "type": "string",
            "description": "Image URL for the tournament",
            "example": "https://example.com/tournament-image.jpg"
          },
          "is_visible": {
            "type": "boolean",
            "description": "Whether the tournament is visible",
            "example": true
          },
          "is_stat_processed": {
            "type": "boolean",
            "description": "Whether the tournament statistics have been processed",
            "example": false
          },
          "is_elo_processed": {
            "type": "boolean",
            "description": "Whether the tournament elo has been processed",
            "example": false
          },
          "tournament_number": {
            "type": "number",
            "description": "Tournament number",
            "example": 5
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-05-15T10:30:00.000Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-05-15T10:30:00.000Z"
          },
          "reward_image": {
            "type": "string",
            "description": "Image URL for the tournament reward",
            "example": "https://example.com/reward-image.jpg"
          },
          "need_to_be_reprocessed": {
            "type": "boolean",
            "description": "Whether the tournament needs to be reprocessed",
            "example": false
          },
          "has_started": {
            "type": "boolean",
            "description": "Whether the tournament has started",
            "example": true
          },
          "has_been_validated": {
            "type": "boolean",
            "description": "Whether the tournament has been validated",
            "example": false
          },
          "is_rewards_processed": {
            "type": "boolean",
            "description": "Whether the rewards have been processed",
            "example": false
          },
          "histories": {
            "description": "Histories for the tournament",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TournamentPlayerHistories"
            }
          },
          "is_player_registered": {
            "type": "boolean",
            "description": "Whether the current player is registered",
            "example": true
          },
          "totalRegistered": {
            "type": "number",
            "description": "Total number of registered players",
            "example": 100
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "start_date",
          "end_date",
          "flags",
          "is_main",
          "league",
          "image",
          "is_visible",
          "is_stat_processed",
          "is_elo_processed",
          "tournament_number",
          "created_at",
          "updated_at",
          "reward_image",
          "need_to_be_reprocessed",
          "has_started",
          "has_been_validated",
          "is_rewards_processed",
          "histories",
          "is_player_registered",
          "totalRegistered"
        ]
      },
      "SummaryOfTournamentNumber_HeroDTO": {
        "type": "object",
        "properties": {
          "handle": {
            "type": "string",
            "description": "Handle of the hero",
            "example": "hero_handle"
          },
          "name": {
            "type": "string",
            "description": "Name of the hero",
            "example": "Hero Name"
          },
          "stars": {
            "type": "number",
            "description": "Stars of the hero",
            "example": 3
          }
        },
        "required": [
          "handle",
          "name",
          "stars"
        ]
      },
      "SummaryOfTournamentNumber_CardDTO_CardDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "hero_id": {
            "type": "string"
          },
          "picture_url": {
            "type": "string"
          },
          "heroes": {
            "$ref": "#/components/schemas/SummaryOfTournamentNumber_HeroDTO"
          }
        },
        "required": [
          "id",
          "hero_id",
          "heroes"
        ]
      },
      "SummaryOfTournamentNumber_HistoryDTO": {
        "type": "object",
        "properties": {
          "score": {
            "$ref": "#/components/schemas/DecimalNumber"
          },
          "rank": {
            "type": "number"
          },
          "rewards_details": {
            "type": "object"
          },
          "tournament_id": {
            "type": "string"
          },
          "cards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SummaryOfTournamentNumber_CardDTO_CardDTO"
            }
          }
        },
        "required": [
          "score",
          "rank",
          "rewards_details",
          "tournament_id",
          "cards"
        ]
      },
      "SummaryOfTournamentNumberDTO_EloPlayerSeasonDTO": {
        "type": "object",
        "properties": {
          "elo_score": {
            "type": "number",
            "description": "The current ELO score of the player",
            "example": 1500
          }
        },
        "required": [
          "elo_score"
        ]
      },
      "SummaryOfTournamentNumber_WinnersOfEachTournamentDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "handle": {
            "type": "string"
          },
          "profile_picture": {
            "type": "string"
          },
          "history": {
            "$ref": "#/components/schemas/SummaryOfTournamentNumber_HistoryDTO"
          },
          "elo_player_season": {
            "$ref": "#/components/schemas/SummaryOfTournamentNumberDTO_EloPlayerSeasonDTO"
          }
        },
        "required": [
          "id",
          "name",
          "handle",
          "profile_picture",
          "history",
          "elo_player_season"
        ]
      },
      "SummaryOfTournamentNumber_Top5Heroes_TournamentHistoryDTO": {
        "type": "object",
        "properties": {
          "current_rank": {
            "type": "number",
            "description": "Current rank of the hero",
            "example": 1
          },
          "fantasy_score": {
            "description": "Fantasy score of the hero",
            "example": "100.00",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          }
        },
        "required": [
          "current_rank",
          "fantasy_score"
        ]
      },
      "SummaryOfTournamentNumber_Top5HeroesDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the hero",
            "example": "unique-id-string"
          },
          "handle": {
            "type": "string",
            "description": "Handle of the hero",
            "example": "hero_handle"
          },
          "name": {
            "type": "string",
            "description": "Name of the hero",
            "example": "Hero Name"
          },
          "profile_image_url_https": {
            "type": "string",
            "description": "URL of the profile image in HTTPS",
            "example": "http://profileimage.url"
          },
          "stars": {
            "type": "number",
            "description": "Stars of the hero",
            "example": 3
          },
          "history": {
            "$ref": "#/components/schemas/SummaryOfTournamentNumber_Top5Heroes_TournamentHistoryDTO"
          }
        },
        "required": [
          "id",
          "handle",
          "name",
          "stars",
          "history"
        ]
      },
      "SummaryOfTournamentNumber_Top5XFactorsHeroesDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the hero",
            "example": "unique-id-string"
          },
          "handle": {
            "type": "string",
            "description": "Handle of the hero",
            "example": "hero_handle"
          },
          "name": {
            "type": "string",
            "description": "Name of the hero",
            "example": "Hero Name"
          },
          "profile_image_url_https": {
            "type": "string",
            "description": "URL of the profile image in HTTPS",
            "example": "http://profileimage.url"
          },
          "current_stars": {
            "type": "number"
          },
          "previous_stars": {
            "type": "number"
          },
          "current_rank": {
            "type": "number"
          },
          "fantasy_score": {
            "$ref": "#/components/schemas/DecimalNumber"
          }
        },
        "required": [
          "id",
          "handle",
          "name",
          "current_stars",
          "previous_stars",
          "current_rank",
          "fantasy_score"
        ]
      },
      "SummaryOfTournamentNumber_TopOutrageousWinnersDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "handle": {
            "type": "string"
          },
          "profile_picture": {
            "type": "string"
          },
          "elo_player_season": {
            "$ref": "#/components/schemas/SummaryOfTournamentNumberDTO_EloPlayerSeasonDTO"
          },
          "reward_type": {
            "type": "string"
          },
          "reward_value": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "name",
          "handle",
          "profile_picture",
          "elo_player_season",
          "reward_type",
          "reward_value"
        ]
      },
      "SummaryOfTournamentNumber_TopPlayersEloAndEloChangeDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "handle": {
            "type": "string"
          },
          "profile_picture": {
            "type": "string"
          },
          "elo_player_season": {
            "$ref": "#/components/schemas/SummaryOfTournamentNumberDTO_EloPlayerSeasonDTO"
          },
          "elo_change_total": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "name",
          "handle",
          "profile_picture",
          "elo_player_season",
          "elo_change_total"
        ]
      },
      "SummaryOfTournamentNumberDTO": {
        "type": "object",
        "properties": {
          "tournaments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SummaryOfTournamentNumber_TournamentDTO"
            }
          },
          "winners_of_each_tournament": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SummaryOfTournamentNumber_WinnersOfEachTournamentDTO"
            }
          },
          "top_5_heroes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SummaryOfTournamentNumber_Top5HeroesDTO"
            }
          },
          "top_5_x_factors_heroes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SummaryOfTournamentNumber_Top5XFactorsHeroesDTO"
            }
          },
          "top_outrageous_winners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SummaryOfTournamentNumber_TopOutrageousWinnersDTO"
            }
          },
          "top_players_elo_and_elo_change": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SummaryOfTournamentNumber_TopPlayersEloAndEloChangeDTO"
            }
          }
        },
        "required": [
          "tournaments",
          "winners_of_each_tournament",
          "top_5_heroes",
          "top_5_x_factors_heroes",
          "top_outrageous_winners",
          "top_players_elo_and_elo_change"
        ]
      },
      "SummaryOfTournamentNumberOfPlayer_TournamentPlayerInfoDTO": {
        "type": "object",
        "properties": {
          "rewards_details": {
            "type": "object"
          },
          "tournament_id": {
            "type": "string"
          },
          "total_elo_change": {
            "type": "number"
          },
          "previous_elo": {
            "type": "number"
          },
          "best_rank": {
            "type": "number"
          },
          "nb_of_deck_played": {
            "type": "number"
          },
          "cards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SummaryOfTournamentNumber_CardDTO_CardDTO"
            }
          }
        },
        "required": [
          "rewards_details",
          "tournament_id",
          "total_elo_change",
          "previous_elo",
          "best_rank",
          "nb_of_deck_played",
          "cards"
        ]
      },
      "SummaryOfTournamentNumberOfPlayer_TotalRewardsDTO": {
        "type": "object",
        "properties": {
          "ETH": {
            "type": "number"
          },
          "FAN": {
            "type": "number"
          },
          "GOLD": {
            "type": "number"
          },
          "PACK": {
            "type": "number"
          },
          "STAR": {
            "type": "number"
          },
          "FRAGMENT": {
            "type": "number"
          },
          "ELO": {
            "type": "number"
          }
        },
        "required": [
          "ETH",
          "FAN",
          "GOLD",
          "PACK",
          "STAR",
          "FRAGMENT",
          "ELO"
        ]
      },
      "SummaryOfTournamentNumberOfPlayerDTO": {
        "type": "object",
        "properties": {
          "already_claimed": {
            "type": "boolean"
          },
          "tournaments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SummaryOfTournamentNumber_TournamentDTO"
            }
          },
          "tournament_player_info": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SummaryOfTournamentNumberOfPlayer_TournamentPlayerInfoDTO"
            }
          },
          "total_rewards": {
            "$ref": "#/components/schemas/SummaryOfTournamentNumberOfPlayer_TotalRewardsDTO"
          },
          "top_5_x_factors_heroes_of_user": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SummaryOfTournamentNumber_Top5XFactorsHeroesDTO"
            }
          }
        },
        "required": [
          "already_claimed",
          "tournaments",
          "tournament_player_info",
          "total_rewards",
          "top_5_x_factors_heroes_of_user"
        ]
      },
      "GetVoteConfigQueryDTO": {
        "type": "object",
        "properties": {
          "only_visible": {
            "type": "boolean",
            "description": "Include only visible vote configurations"
          },
          "pagination": {
            "description": "Pagination arguments",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationDTO"
              }
            ]
          }
        }
      },
      "VoteConfig": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Vote ID",
            "example": "5f54365e881d540000000001"
          },
          "title": {
            "type": "string",
            "description": "Vote title",
            "example": "Example Vote"
          },
          "picture_desktop": {
            "type": "string",
            "description": "Vote picture URL",
            "example": "https://example.com/image.jpg"
          },
          "picture_mobile": {
            "type": "string",
            "description": "Vote picture URL",
            "example": "https://example.com/image.jpg"
          },
          "description": {
            "type": "string",
            "description": "Vote description",
            "example": "Description for the vote"
          },
          "start_time": {
            "format": "date-time",
            "type": "string",
            "description": "Start time of the vote",
            "example": "2020-12-31T12:00:00.000Z"
          },
          "end_time": {
            "format": "date-time",
            "type": "string",
            "description": "End time of the vote",
            "example": "2021-01-01T12:00:00.000Z"
          },
          "is_visible": {
            "type": "boolean",
            "description": "Is the vote open for voting?",
            "example": true
          },
          "vote_heroes": {
            "description": "List of vote heroes",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoteHeroSelection"
            }
          },
          "distinctPlayers": {
            "type": "number",
            "description": "Number of votes",
            "example": 100,
            "nullable": true
          },
          "totalFanPoints": {
            "type": "number",
            "description": "Total fan points for the vote",
            "example": 1000,
            "nullable": true
          }
        },
        "required": [
          "id",
          "title",
          "picture_desktop",
          "picture_mobile",
          "description",
          "start_time",
          "end_time",
          "is_visible",
          "vote_heroes"
        ]
      },
      "VoteHeroSelection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the vote hero selection"
          },
          "hero_id": {
            "type": "string",
            "description": "The ID of the hero the player selected"
          },
          "last_4_scores_avg": {
            "type": "number",
            "description": "Last 4 Tournament scores average",
            "example": "444.44"
          },
          "vote_config_id": {
            "type": "string",
            "description": "The ID of the vote configuration"
          },
          "config": {
            "description": "Config of the vote hero selection",
            "allOf": [
              {
                "$ref": "#/components/schemas/VoteConfig"
              }
            ]
          },
          "hero": {
            "description": "Hero of the vote hero selection",
            "allOf": [
              {
                "$ref": "#/components/schemas/Hero"
              }
            ]
          }
        },
        "required": [
          "id",
          "hero_id",
          "last_4_scores_avg",
          "vote_config_id",
          "config",
          "hero"
        ]
      },
      "PaginatedVoteConfigResult": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Data items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoteConfig"
            }
          },
          "meta": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaDTO"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "Vote": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the vote",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "player_id": {
            "type": "string",
            "description": "The ID of the player who cast the vote",
            "example": "987654321"
          },
          "vote_config_id": {
            "type": "string",
            "description": "The ID of the vote configuration",
            "example": "vote_config_123"
          },
          "hero_id": {
            "type": "string",
            "description": "The ID of the hero voted for",
            "example": "hero_456"
          },
          "fan_count": {
            "type": "number",
            "description": "The number of fan pts use in vote",
            "example": 100
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "The timestamp when the vote was created",
            "example": "2023-07-21T12:34:56Z"
          },
          "player": {
            "example": {
              "id": "987654321",
              "name": "John Doe",
              "handle": "@johndoe"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/Player"
              }
            ]
          },
          "vote_config": {
            "example": {
              "id": "vote_config_123",
              "title": "Best Hero 2023",
              "start_time": "2023-07-01T00:00:00Z",
              "end_time": "2023-07-31T23:59:59Z"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/VoteConfig"
              }
            ]
          },
          "hero": {
            "example": {
              "id": "hero_456",
              "name": "Super Hero"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/Hero"
              }
            ]
          }
        },
        "required": [
          "id",
          "player_id",
          "vote_config_id",
          "hero_id",
          "fan_count",
          "created_at",
          "player",
          "vote_config",
          "hero"
        ]
      },
      "CreateVote": {
        "type": "object",
        "properties": {
          "vote_config_id": {
            "type": "string",
            "description": "The ID of the vote configuration",
            "example": "vote_config_123"
          },
          "hero_id": {
            "type": "string",
            "description": "The ID of the hero voted for",
            "example": "hero_456"
          },
          "fan_count": {
            "type": "number",
            "description": "The number of fan pts use in vote",
            "example": 100
          }
        },
        "required": [
          "vote_config_id",
          "hero_id",
          "fan_count"
        ]
      },
      "VoteWithoutInclude": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the vote",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "player_id": {
            "type": "string",
            "description": "The ID of the player who cast the vote",
            "example": "987654321"
          },
          "vote_config_id": {
            "type": "string",
            "description": "The ID of the vote configuration",
            "example": "vote_config_123"
          },
          "hero_id": {
            "type": "string",
            "description": "The ID of the hero voted for",
            "example": "hero_456"
          },
          "fan_count": {
            "type": "number",
            "description": "The number of fan pts use in vote",
            "example": 100
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "The timestamp when the vote was created",
            "example": "2023-07-21T12:34:56Z"
          }
        },
        "required": [
          "id",
          "player_id",
          "vote_config_id",
          "hero_id",
          "fan_count",
          "created_at"
        ]
      },
      "HeroWithVotesCount": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the hero",
            "example": "unique-id-string"
          },
          "handle": {
            "type": "string",
            "description": "Handle of the hero",
            "example": "hero_handle"
          },
          "name": {
            "type": "string",
            "description": "Name of the hero",
            "example": "Hero Name"
          },
          "previous_rank": {
            "type": "number",
            "description": "Previous rank of the hero",
            "example": 0
          },
          "is_player": {
            "type": "boolean",
            "description": "Indicates if the hero is a player",
            "example": false
          },
          "is_blue_verified": {
            "type": "boolean",
            "description": "Indicates if the hero is blue verified",
            "example": false
          },
          "default_profile_image": {
            "type": "boolean",
            "description": "Indicates if the hero has a default profile image",
            "example": false
          },
          "description": {
            "type": "string",
            "description": "Description of the hero",
            "example": "Hero description here"
          },
          "fast_followers_count": {
            "type": "number",
            "description": "Count of fast followers",
            "example": 0
          },
          "favourites_count": {
            "format": "int64",
            "type": "integer",
            "description": "Count of favourites",
            "example": 0
          },
          "followers_count": {
            "format": "int64",
            "type": "integer",
            "description": "Count of followers",
            "example": 0
          },
          "friends_count": {
            "type": "number",
            "description": "Count of friends",
            "example": 0
          },
          "listed_count": {
            "type": "number",
            "description": "Listed count",
            "example": 0
          },
          "location": {
            "type": "string",
            "description": "Location of the hero",
            "example": "Location here"
          },
          "media_count": {
            "type": "number",
            "description": "Media count",
            "example": 0
          },
          "possibly_sensitive": {
            "type": "boolean",
            "description": "Indicates if the hero is possibly sensitive",
            "example": false
          },
          "profile_banner_url": {
            "type": "string",
            "description": "URL of the profile banner",
            "example": "http://banner.url"
          },
          "profile_image_url_https": {
            "type": "string",
            "description": "URL of the profile image in HTTPS",
            "example": "http://profileimage.url"
          },
          "has_banner": {
            "type": "boolean",
            "description": "Indicates if the hero has a banner",
            "example": false
          },
          "verified": {
            "type": "boolean",
            "description": "Indicates if the hero is verified",
            "example": false
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-07-01T13:34:57.306Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-07-01T13:35:04.802Z"
          },
          "statuses_count": {
            "type": "number",
            "description": "Count of statuses",
            "example": 0
          },
          "stars": {
            "type": "number",
            "description": "Stars of the hero",
            "example": 3
          },
          "player_address": {
            "type": "string",
            "description": "Player address of the hero",
            "example": "player_address_here"
          },
          "can_be_packed": {
            "type": "boolean",
            "description": "Indicates if the hero can be packed",
            "example": true
          },
          "previous_stars": {
            "type": "number",
            "description": "Previous stars of the hero",
            "example": 3
          },
          "star_gain": {
            "type": "number",
            "description": "Star gain of the hero",
            "example": 0
          },
          "tactic_scores": {
            "description": "List of hero_scores",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OmitTypeClass"
            }
          },
          "tournament_histories": {
            "description": "List of card hero swapping",
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "volume": {
            "type": "number",
            "description": "Volume of trade on hero (optional)"
          },
          "last_sale": {
            "type": "number",
            "description": "Last trade on hero (optional)"
          },
          "floor": {
            "type": "number",
            "description": "Floor price of hero (optional)"
          },
          "status": {
            "type": "string",
            "description": "Status of the hero",
            "example": "TACTIC_ONLY",
            "examples": [
              "HERO",
              "TACTIC_ONLY",
              "DELETED",
              "PAUSED"
            ]
          },
          "credibility_average": {
            "description": "Credibility score",
            "allOf": [
              {
                "$ref": "#/components/schemas/CredibilityAverage"
              }
            ]
          },
          "tactic_image_prefix": {
            "type": "string",
            "description": "Tactic image prefix",
            "example": "argent"
          },
          "metadata": {
            "type": "object",
            "description": "Metadata of the hero",
            "example": "{}"
          },
          "coin_id": {
            "type": "string",
            "description": "coin_id: contract address and network id of codex.io",
            "example": "acatzTjUeHDT3SoufN6NMxGUmBFtoqFHnFwusdw8kYX:1399811149"
          },
          "coin": {
            "description": "Coin",
            "allOf": [
              {
                "$ref": "#/components/schemas/Coin"
              }
            ]
          },
          "current": {
            "description": "Current score of the hero",
            "allOf": [
              {
                "$ref": "#/components/schemas/Current"
              }
            ]
          },
          "sell_orders": {
            "description": "Sell orders of the hero",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SellOrder"
            }
          },
          "bid_orders": {
            "description": "Bid orders of the hero",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BidOrder"
            }
          },
          "trades": {
            "description": "Trades of the hero",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Trade"
            }
          },
          "floor_price": {
            "type": "number",
            "description": "Floor price of the hero",
            "example": 0
          },
          "highest_bid": {
            "type": "number",
            "description": "Highest bid of the hero",
            "example": 0
          },
          "expected_score": {
            "description": "Expected score of the hero for tournament",
            "example": 0,
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "flags": {
            "description": "Flags of the hero",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HeroFlag"
            }
          },
          "votes": {
            "description": "Votes from voting module",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoteWithoutInclude"
            }
          },
          "fan_count": {
            "type": "number",
            "description": "Number of votes for the hero",
            "example": 12345
          },
          "last_4_scores_avg": {
            "type": "number",
            "description": "Average of the last 4 scores for the hero",
            "example": 444.4
          }
        },
        "required": [
          "id",
          "handle",
          "name",
          "previous_rank",
          "is_player",
          "is_blue_verified",
          "default_profile_image",
          "fast_followers_count",
          "favourites_count",
          "followers_count",
          "friends_count",
          "listed_count",
          "media_count",
          "possibly_sensitive",
          "has_banner",
          "verified",
          "created_at",
          "updated_at",
          "statuses_count",
          "stars",
          "can_be_packed",
          "previous_stars",
          "tactic_scores",
          "tournament_histories",
          "status",
          "credibility_average",
          "tactic_image_prefix",
          "metadata",
          "coin_id",
          "coin",
          "sell_orders",
          "bid_orders",
          "trades",
          "floor_price",
          "highest_bid",
          "expected_score",
          "flags",
          "fan_count",
          "last_4_scores_avg"
        ]
      },
      "HotOrNotHero": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the hero",
            "example": "unique-id-string"
          },
          "handle": {
            "type": "string",
            "description": "Handle of the hero",
            "example": "hero_handle"
          },
          "name": {
            "type": "string",
            "description": "Name of the hero",
            "example": "Hero Name"
          },
          "followers_count": {
            "format": "int64",
            "type": "integer",
            "description": "Count of followers",
            "example": 0
          },
          "profile_image_url_https": {
            "type": "string",
            "description": "URL of the profile image in HTTPS",
            "example": "http://profileimage.url"
          },
          "status": {
            "type": "string",
            "description": "Status of the hero",
            "example": "TACTIC_ONLY",
            "examples": [
              "HERO",
              "TACTIC_ONLY",
              "DELETED",
              "PAUSED"
            ]
          }
        },
        "required": [
          "id",
          "handle",
          "name",
          "followers_count",
          "status"
        ]
      },
      "HotOrNotFeedResponse": {
        "type": "object",
        "properties": {
          "post_id": {
            "type": "string",
            "description": "Unique identifier for the tweet",
            "example": "tweet-id-123"
          },
          "hero": {
            "description": "Hero",
            "allOf": [
              {
                "$ref": "#/components/schemas/HotOrNotHero"
              }
            ]
          },
          "handle": {
            "type": "string",
            "description": "Twitter handle of the hero",
            "example": "@hero_handle"
          },
          "text": {
            "type": "string",
            "description": "Text for the tweet",
            "example": "I did another good tweet brother FANTARDIO"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp of the tweet",
            "example": "2024-07-01T13:34:57.306Z"
          },
          "weighted_score": {
            "type": "number",
            "description": "Tweet weighted score for ranking",
            "example": 0.85
          }
        },
        "required": [
          "post_id",
          "hero",
          "handle",
          "text",
          "created_at",
          "weighted_score"
        ]
      },
      "HotOrNotInteractionBody": {
        "type": "object",
        "properties": {
          "post_id": {
            "type": "string",
            "description": "The post id",
            "example": "123"
          },
          "is_like": {
            "type": "boolean",
            "description": "The like status",
            "example": true
          }
        },
        "required": [
          "post_id",
          "is_like"
        ]
      },
      "HotOrNotStreakResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Streak ID",
            "example": "123"
          },
          "current_streak": {
            "type": "number",
            "description": "Current streak count",
            "example": 5
          },
          "longest_streak": {
            "type": "number",
            "description": "Longest streak count",
            "example": 10
          },
          "total_guesses": {
            "type": "number",
            "description": "Total guesses",
            "example": 10
          },
          "total_answers": {
            "type": "number",
            "description": "Total answers",
            "example": 10
          },
          "last_updated": {
            "format": "date-time",
            "type": "string",
            "description": "Last time the streak was updated",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "last_reset": {
            "format": "date-time",
            "type": "string",
            "description": "Last time the streak was reset",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "play_since_reset": {
            "type": "number",
            "description": "Play since reset",
            "example": 10
          },
          "unlock_at": {
            "format": "date-time",
            "type": "string",
            "description": "Unlock at",
            "example": "2024-01-01T00:00:00.000Z"
          }
        },
        "required": [
          "id",
          "current_streak",
          "longest_streak",
          "total_guesses",
          "total_answers",
          "last_updated",
          "last_reset",
          "play_since_reset",
          "unlock_at"
        ]
      },
      "HotOrNotInteractionResponse": {
        "type": "object",
        "properties": {
          "is_correct": {
            "type": "boolean",
            "description": "Whether the answer was correct",
            "example": true
          },
          "streak": {
            "description": "Updated streak information",
            "allOf": [
              {
                "$ref": "#/components/schemas/HotOrNotStreakResponse"
              }
            ]
          }
        },
        "required": [
          "is_correct",
          "streak"
        ]
      },
      "StreakReward": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the streak reward",
            "example": "123"
          },
          "threshold": {
            "type": "number",
            "description": "Threshold of the streak reward",
            "example": 10
          },
          "reward_type": {
            "type": "string",
            "description": "Type of the reward",
            "example": "FAN"
          },
          "reward_amount": {
            "type": "number",
            "description": "Amount of the reward",
            "example": 10
          },
          "is_onboarding": {
            "type": "boolean",
            "description": "Whether the reward is for onboarding",
            "example": true
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Created at",
            "example": "2021-01-01"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Updated at",
            "example": "2021-01-01"
          }
        },
        "required": [
          "id",
          "threshold",
          "reward_type",
          "reward_amount",
          "is_onboarding",
          "created_at",
          "updated_at"
        ]
      },
      "HotOrNotNextRewardResponse": {
        "type": "object",
        "properties": {
          "next_threshold": {
            "type": "number",
            "description": "Next threshold",
            "example": 10
          },
          "last_threshold": {
            "type": "number",
            "description": "Last threshold",
            "example": 10
          },
          "rewards": {
            "description": "Rewards",
            "example": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StreakReward"
            }
          }
        },
        "required": [
          "next_threshold",
          "last_threshold",
          "rewards"
        ]
      },
      "EloPlayerSeason": {
        "type": "object",
        "properties": {
          "player_id": {
            "type": "string",
            "description": "The ID of the player",
            "example": "player123"
          },
          "elo_score": {
            "type": "number",
            "description": "The current ELO score of the player",
            "example": 1500
          },
          "max_elo_score": {
            "type": "number",
            "description": "The maximum ELO score achieved by the player",
            "example": 2000
          },
          "current_elo_rank_id": {
            "type": "string",
            "description": "The ID of the current ELO rank",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "max_elo_rank_id": {
            "type": "string",
            "description": "The ID of the maximum ELO rank achieved",
            "example": "123e4567-e89b-12d3-a456-426614174001"
          },
          "season": {
            "type": "number",
            "description": "The season number",
            "example": 1
          },
          "claimable_ranks": {
            "description": "The unclaimed ranks of the player",
            "example": [
              "123e4567-e89b-12d3-a456-426614174000"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "The timestamp when the record was created",
            "example": "2023-07-21T12:34:56Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "The timestamp when the record was last updated",
            "example": "2023-07-21T12:34:56Z"
          },
          "current_elo_rank": {
            "description": "The current ELO rank of the player",
            "allOf": [
              {
                "$ref": "#/components/schemas/EloRank"
              }
            ]
          },
          "max_elo_rank": {
            "description": "The maximum ELO rank achieved by the player",
            "allOf": [
              {
                "$ref": "#/components/schemas/EloRank"
              }
            ]
          },
          "player": {
            "description": "The player associated with this ELO season record",
            "allOf": [
              {
                "$ref": "#/components/schemas/Player"
              }
            ]
          }
        },
        "required": [
          "player_id",
          "elo_score",
          "max_elo_score",
          "current_elo_rank_id",
          "max_elo_rank_id",
          "season",
          "claimable_ranks",
          "created_at",
          "updated_at",
          "current_elo_rank",
          "max_elo_rank",
          "player"
        ]
      },
      "EloRank": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the ELO rank",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the ELO rank",
            "example": "Diamond"
          },
          "image": {
            "type": "string",
            "description": "The image URL for the ELO rank",
            "example": "https://example.com/images/diamond_rank.png"
          },
          "min_elo": {
            "type": "number",
            "description": "The minimum ELO score for this rank",
            "example": 1000
          },
          "max_elo": {
            "type": "number",
            "description": "The maximum ELO score for this rank",
            "example": 1200
          },
          "top_player_count": {
            "type": "number",
            "description": "The number of top players in this rank",
            "example": 100
          },
          "threshold": {
            "type": "object",
            "description": "The threshold configuration for this rank",
            "example": {
              "gold": 80,
              "elite": 80,
              "bronze": 80,
              "silver": 80
            }
          },
          "max_elo_gain": {
            "type": "object",
            "description": "The maximum ELO gain configuration for this rank",
            "example": {
              "gold": [
                70,
                0
              ],
              "elite": [
                100,
                0
              ],
              "bronze": [
                30,
                0
              ],
              "silver": [
                50,
                0
              ]
            }
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "The timestamp when the rank was created",
            "example": "2023-07-21T12:34:56Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "The timestamp when the rank was last updated",
            "example": "2023-07-21T12:34:56Z"
          },
          "reward_details": {
            "type": "object",
            "description": "The reward details for this rank",
            "example": {
              "STAR": 100,
              "FAN": 100,
              "GOLD": 100,
              "CARD": 1
            }
          },
          "current_players": {
            "description": "Players currently in this rank",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EloPlayerSeason"
            }
          },
          "max_players": {
            "description": "Players who reached their max ELO in this rank",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EloPlayerSeason"
            }
          }
        },
        "required": [
          "id",
          "name",
          "image",
          "min_elo",
          "max_elo",
          "threshold",
          "max_elo_gain",
          "created_at",
          "updated_at",
          "reward_details",
          "current_players",
          "max_players"
        ]
      },
      "ClaimRewardRank": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the ELO rank",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "required": [
          "id"
        ]
      },
      "RewardHistory": {
        "type": "object",
        "properties": {
          "reward_id": {
            "type": "string",
            "description": "The ID of the reward often a deterministic uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "player_id": {
            "type": "string",
            "description": "The ID of the player",
            "example": "player123"
          },
          "type": {
            "type": "string",
            "description": "The type of the reward",
            "example": "start",
            "enum": [
              "STAR",
              "FAN",
              "GOLD",
              "PACK",
              "FRAGMENT",
              "star_banner"
            ]
          },
          "source": {
            "type": "string",
            "description": "The source of the reward",
            "example": "elo_rank"
          },
          "tournament_id": {
            "type": "string",
            "description": "The ID of the tournament (if applicable)",
            "example": "123e4567-e89b-12d3-a456-426614174001"
          },
          "mint_config_id": {
            "type": "string",
            "description": "The ID of the mint configuration (if applicable)",
            "example": "mint_config_123"
          },
          "amount": {
            "description": "The amount of the reward (if applicable)",
            "example": 100.5,
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "price": {
            "description": "The price of the reward (if applicable)",
            "example": 50.25,
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "cards_per_pack": {
            "type": "number",
            "description": "The number of cards per pack (if applicable)",
            "example": 5
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "The timestamp when the record was created",
            "example": "2023-07-21T12:34:56Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "The timestamp when the record was last updated",
            "example": "2023-07-21T12:34:56Z"
          },
          "is_reward_distributed": {
            "type": "boolean",
            "description": "normaly true because it is the history rewards table",
            "example": true
          }
        },
        "required": [
          "reward_id",
          "player_id",
          "type",
          "source",
          "tournament_id",
          "mint_config_id",
          "amount",
          "price",
          "cards_per_pack",
          "created_at",
          "updated_at",
          "is_reward_distributed"
        ]
      },
      "ClaimRewardRankResponse": {
        "type": "object",
        "properties": {
          "playerElo": {
            "description": "Updated ELO information for the player after claiming the reward",
            "allOf": [
              {
                "$ref": "#/components/schemas/EloPlayerSeason"
              }
            ]
          },
          "rewardsHistory": {
            "description": "Array of reward history entries that have been claimed",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RewardHistory"
            }
          }
        },
        "required": [
          "playerElo",
          "rewardsHistory"
        ]
      },
      "EloLeaderboardDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "handle": {
            "type": "string"
          },
          "profile_picture": {
            "type": "string"
          },
          "player_id": {
            "type": "string"
          },
          "elo_score": {
            "type": "number"
          },
          "rank": {
            "type": "number"
          },
          "image": {
            "type": "string"
          },
          "current_elo_rank_id": {
            "type": "string"
          },
          "season": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "name",
          "handle",
          "profile_picture",
          "player_id",
          "elo_score",
          "rank",
          "image",
          "current_elo_rank_id",
          "season"
        ]
      },
      "EloLeaderboardResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EloLeaderboardDto"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/MetaInfiniteQueryDto"
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "GetCardFromShardsBodyDTO": {
        "type": "object",
        "properties": {
          "fragments_cards_config_id": {
            "type": "string",
            "description": "Fragments cards config id"
          },
          "batch_amount": {
            "type": "number",
            "description": "Number of cards to get"
          }
        },
        "required": [
          "fragments_cards_config_id",
          "batch_amount"
        ]
      },
      "PrizeFragmentRouletteDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "probability": {
            "type": "number"
          },
          "type": {
            "type": "string"
          },
          "text": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "image",
          "probability",
          "type",
          "text"
        ]
      },
      "BuyFragmentRouletteResultDTO": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "selectedPrize": {
            "description": "The selected prize for the claimed daily quest",
            "allOf": [
              {
                "$ref": "#/components/schemas/PrizeFragmentRouletteDTO"
              }
            ]
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "BuyBatchFragmentRouletteResultDTO": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "selectedPrizes": {
            "description": "The selected prizes for the claimed batch roulette",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrizeFragmentRouletteDTO"
            }
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "FragmentClaimDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "batchAmount": {
            "type": "number"
          },
          "configPicture": {
            "type": "string"
          },
          "configName": {
            "type": "string"
          },
          "processDate": {
            "format": "date-time",
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "batchAmount",
          "configPicture",
          "configName",
          "processDate",
          "createdAt"
        ]
      },
      "HasPendingRewardsFromFragmentDTO": {
        "type": "object",
        "properties": {
          "hasPending": {
            "type": "boolean"
          },
          "fragments": {
            "type": "number"
          },
          "claims": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FragmentClaimDTO"
            }
          }
        },
        "required": [
          "hasPending",
          "fragments",
          "claims"
        ]
      },
      "ClaimRewardsDTO": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Message",
            "example": "Rewards claimed"
          },
          "cardId": {
            "type": "string",
            "description": "Card ID",
            "example": "0_123"
          }
        },
        "required": [
          "message"
        ]
      },
      "ClaimTournamentRewardsDTO": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Rewards claimed successfully"
          },
          "claimed": {
            "type": "object",
            "example": {
              "FAN": 100,
              "GOLD": 50,
              "STAR": 10
            }
          }
        },
        "required": [
          "message",
          "claimed"
        ]
      },
      "GetQuoteItem": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "price_usd": {
            "type": "number"
          }
        },
        "required": [
          "type",
          "amount",
          "price_usd"
        ]
      },
      "GetAndFilterSellOrdersQueryDTO": {
        "type": "object",
        "properties": {
          "filters": {
            "type": "object"
          },
          "search": {
            "type": "string"
          },
          "rankCriteria": {
            "type": "number"
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationDTO"
          }
        },
        "required": [
          "filters",
          "rankCriteria"
        ]
      },
      "SellOrderWithHighestBid": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID as a BigInt value"
          },
          "card_id": {
            "type": "string",
            "description": "Card ID composed of {tokenId}_{FantasyCollectionAddress}, unique"
          },
          "hero_id": {
            "type": "string",
            "description": "Hero ID"
          },
          "hero_rarity_index": {
            "type": "string",
            "description": "Hero rarity index"
          },
          "trader": {
            "type": "string",
            "description": "Trader"
          },
          "side": {
            "type": "number",
            "description": "Side 1 for sell, 0 for buy",
            "default": 1
          },
          "collection": {
            "type": "string",
            "description": "Collection"
          },
          "token_id": {
            "type": "string",
            "description": "Token ID as a BigInt value"
          },
          "payment_token": {
            "type": "string",
            "description": "Payment token"
          },
          "expiration_time": {
            "type": "string",
            "description": "Expiration time as a BigInt value"
          },
          "merkle_root": {
            "type": "string",
            "description": "Merkle root"
          },
          "salt": {
            "type": "string",
            "description": "Salt as a BigInt value"
          },
          "price": {
            "type": "string",
            "description": "Price"
          },
          "price_numeric": {
            "type": "string",
            "description": "Price numeric as a Decimal value"
          },
          "order_hash": {
            "type": "string",
            "description": "Order hash, optional"
          },
          "signature": {
            "type": "string",
            "description": "Signature, unique"
          },
          "rarity": {
            "type": "number",
            "description": "Rarity"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date, optional"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Update date, optional"
          },
          "is_locked": {
            "type": "boolean",
            "description": "Is locked"
          },
          "cards": {
            "description": "Card",
            "allOf": [
              {
                "$ref": "#/components/schemas/CardWithoutHeroes"
              }
            ]
          },
          "highest_bid": {
            "type": "string",
            "description": "Highest bid"
          },
          "listed_count": {
            "type": "number",
            "description": "Listed count"
          }
        },
        "required": [
          "id",
          "card_id",
          "hero_id",
          "hero_rarity_index",
          "trader",
          "side",
          "collection",
          "token_id",
          "payment_token",
          "expiration_time",
          "merkle_root",
          "salt",
          "price",
          "price_numeric",
          "signature",
          "rarity"
        ]
      },
      "PaginatedSellOrderWithHighestBidResult": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Data items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SellOrderWithHighestBid"
            }
          },
          "meta": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaDTO"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "GetSellOrdersDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID as a BigInt value"
          },
          "hero_rarity_index": {
            "type": "string",
            "description": "Hero rarity index"
          },
          "trader": {
            "type": "string",
            "description": "Trader"
          },
          "token_id": {
            "type": "string",
            "description": "Token ID as a BigInt value"
          },
          "payment_token": {
            "type": "string",
            "description": "Payment token"
          },
          "expiration_time": {
            "type": "string",
            "description": "Expiration time as a BigInt value"
          },
          "merkle_root": {
            "type": "string",
            "description": "Merkle root"
          },
          "salt": {
            "type": "string",
            "description": "Salt as a BigInt value"
          },
          "price": {
            "type": "string",
            "description": "Price"
          },
          "signature": {
            "type": "string",
            "description": "Signature, unique"
          }
        },
        "required": [
          "id",
          "hero_rarity_index",
          "trader",
          "token_id",
          "payment_token",
          "expiration_time",
          "merkle_root",
          "salt",
          "price",
          "signature"
        ]
      },
      "SellOrdersResponseDTO": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number"
          },
          "orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetSellOrdersDTO"
            }
          }
        },
        "required": [
          "total",
          "orders"
        ]
      },
      "GetCardMarketBasicInfo_UniqueSellOrderDTO": {
        "type": "object",
        "properties": {
          "hero_id": {
            "type": "string"
          },
          "sell_order_id": {
            "format": "int64",
            "type": "integer"
          },
          "lowest_price": {
            "$ref": "#/components/schemas/DecimalNumber"
          }
        },
        "required": [
          "hero_id",
          "sell_order_id",
          "lowest_price"
        ]
      },
      "GetCardMarketBasicInfo_LastTradeDTO": {
        "type": "object",
        "properties": {
          "price": {
            "description": "Price",
            "example": "100",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          }
        },
        "required": [
          "price"
        ]
      },
      "GetCardMarketBasicInfo_HighestBidDTO": {
        "type": "object",
        "properties": {
          "price": {
            "description": "Price",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          }
        },
        "required": [
          "price"
        ]
      },
      "GetCardMarketBasicInfoDTO": {
        "type": "object",
        "properties": {
          "unique_sell_order": {
            "$ref": "#/components/schemas/GetCardMarketBasicInfo_UniqueSellOrderDTO"
          },
          "last_trade": {
            "$ref": "#/components/schemas/GetCardMarketBasicInfo_LastTradeDTO"
          },
          "highest_bid": {
            "$ref": "#/components/schemas/GetCardMarketBasicInfo_HighestBidDTO"
          }
        },
        "required": [
          "unique_sell_order",
          "last_trade",
          "highest_bid"
        ]
      },
      "GetBidOrders_PersonalBidDTO": {
        "type": "object",
        "properties": {
          "trader": {
            "type": "string",
            "description": "Trader"
          },
          "side": {
            "type": "number",
            "description": "Side"
          },
          "collection": {
            "type": "string",
            "description": "Collection"
          },
          "payment_token": {
            "type": "string",
            "description": "Payment token"
          },
          "expiration_time": {
            "type": "string",
            "description": "Expiration time as a BigInt value"
          },
          "merkle_root": {
            "type": "string",
            "description": "Merkle root"
          },
          "salt": {
            "type": "string",
            "description": "Salt as a BigInt value"
          },
          "signature": {
            "type": "string",
            "description": "Signature"
          },
          "id": {
            "type": "string",
            "description": "ID as a BigInt value"
          },
          "token_id": {
            "type": "string",
            "description": "Token ID as a BigInt value"
          },
          "bidder_handle": {
            "type": "string",
            "description": "Bidder handle"
          },
          "rarity": {
            "type": "number",
            "description": "Rarity"
          },
          "hero_id": {
            "type": "string",
            "description": "Hero ID"
          },
          "price": {
            "description": "Price",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          }
        },
        "required": [
          "trader",
          "side",
          "collection",
          "payment_token",
          "expiration_time",
          "merkle_root",
          "salt",
          "signature",
          "id",
          "token_id",
          "bidder_handle",
          "rarity",
          "hero_id",
          "price"
        ]
      },
      "GetBidOrders_OrderbookBidDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID as a BigInt value"
          },
          "price": {
            "description": "Price",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          }
        },
        "required": [
          "id",
          "price"
        ]
      },
      "GetBidOrders_HighestFiveBidDTO": {
        "type": "object",
        "properties": {
          "trader": {
            "type": "string",
            "description": "Trader"
          },
          "side": {
            "type": "number",
            "description": "Side"
          },
          "collection": {
            "type": "string",
            "description": "Collection"
          },
          "payment_token": {
            "type": "string",
            "description": "Payment token"
          },
          "expiration_time": {
            "type": "string",
            "description": "Expiration time as a BigInt value"
          },
          "merkle_root": {
            "type": "string",
            "description": "Merkle root"
          },
          "salt": {
            "type": "string",
            "description": "Salt as a BigInt value"
          },
          "signature": {
            "type": "string",
            "description": "Signature"
          },
          "id": {
            "type": "string",
            "description": "ID as a BigInt value"
          },
          "token_id": {
            "type": "string",
            "description": "Token ID as a BigInt value"
          },
          "token_ids": {
            "type": "string",
            "description": "Token IDs"
          },
          "bidder_handle": {
            "type": "string",
            "description": "Bidder handle"
          },
          "rarity": {
            "type": "number",
            "description": "Rarity"
          },
          "hero_id": {
            "type": "string",
            "description": "Hero ID"
          },
          "price": {
            "description": "Price",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          }
        },
        "required": [
          "trader",
          "side",
          "collection",
          "payment_token",
          "expiration_time",
          "merkle_root",
          "salt",
          "signature",
          "id",
          "token_id",
          "token_ids",
          "bidder_handle",
          "rarity",
          "hero_id",
          "price"
        ]
      },
      "GetBidOrdersDTO": {
        "type": "object",
        "properties": {
          "personal_bids": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetBidOrders_PersonalBidDTO"
            }
          },
          "orderbook_bids": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetBidOrders_OrderbookBidDTO"
            }
          },
          "orderbook_bids_count": {
            "type": "number"
          },
          "highest_five_bids": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetBidOrders_HighestFiveBidDTO"
            }
          }
        },
        "required": [
          "personal_bids",
          "orderbook_bids",
          "orderbook_bids_count",
          "highest_five_bids"
        ]
      },
      "GetPersonalOrderCountDTO": {
        "type": "object",
        "properties": {
          "bid_count": {
            "type": "number"
          },
          "sell_count": {
            "type": "number"
          }
        },
        "required": [
          "bid_count",
          "sell_count"
        ]
      },
      "CreateSellOrderDto": {
        "type": "object",
        "properties": {
          "trader": {
            "type": "string",
            "description": "Trader"
          },
          "side": {
            "type": "number",
            "description": "Side 1 for sell, 0 for buy",
            "default": 1
          },
          "collection": {
            "type": "string",
            "description": "Collection"
          },
          "token_id": {
            "type": "string",
            "description": "Token ID as a BigInt value"
          },
          "payment_token": {
            "type": "string",
            "description": "Payment token"
          },
          "expiration_time": {
            "type": "string",
            "description": "Expiration time as a BigInt value"
          },
          "merkle_root": {
            "type": "string",
            "description": "Merkle root"
          },
          "salt": {
            "type": "string",
            "description": "Salt as a BigInt value"
          },
          "price": {
            "type": "string",
            "description": "Price"
          },
          "signature": {
            "type": "string",
            "description": "Signature, unique"
          }
        },
        "required": [
          "trader",
          "side",
          "collection",
          "token_id",
          "payment_token",
          "expiration_time",
          "merkle_root",
          "salt",
          "price",
          "signature"
        ]
      },
      "CreateBidOrderDto": {
        "type": "object",
        "properties": {
          "trader": {
            "type": "string",
            "description": "Trader"
          },
          "side": {
            "type": "number",
            "description": "Side"
          },
          "collection": {
            "type": "string",
            "description": "Collection"
          },
          "payment_token": {
            "type": "string",
            "description": "Payment token"
          },
          "expiration_time": {
            "type": "string",
            "description": "Expiration time as a BigInt value"
          },
          "merkle_root": {
            "type": "string",
            "description": "Merkle root"
          },
          "salt": {
            "type": "string",
            "description": "Salt as a BigInt value"
          },
          "signature": {
            "type": "string",
            "description": "Signature"
          },
          "token_id": {
            "type": "string",
            "description": "Token ID as a BigInt value"
          },
          "token_ids": {
            "type": "string",
            "description": "Token IDs"
          },
          "bidder_handle": {
            "type": "string",
            "description": "Bidder handle"
          },
          "rarity": {
            "type": "number",
            "description": "Rarity"
          },
          "hero_id": {
            "type": "string",
            "description": "Hero ID"
          },
          "price": {
            "type": "string",
            "description": "Price"
          }
        },
        "required": [
          "trader",
          "side",
          "collection",
          "payment_token",
          "expiration_time",
          "merkle_root",
          "salt",
          "signature",
          "token_id",
          "token_ids",
          "bidder_handle",
          "rarity",
          "hero_id",
          "price"
        ]
      },
      "CreateBurnForFragmentsSellOrderDto": {
        "type": "object",
        "properties": {
          "trader": {
            "type": "string",
            "description": "Trader address",
            "example": "0x123"
          },
          "side": {
            "type": "number",
            "description": "Side",
            "example": 1
          },
          "token_id": {
            "type": "number",
            "description": "The token id",
            "example": "1"
          },
          "price": {
            "type": "string",
            "description": "The price",
            "example": "1"
          },
          "expiration_time": {
            "type": "string",
            "description": "The expiration time",
            "example": "1"
          },
          "merkle_root": {
            "type": "string",
            "description": "The merkle root",
            "example": "0x123"
          },
          "salt": {
            "type": "number",
            "description": "The salt",
            "example": "1"
          }
        },
        "required": [
          "trader",
          "side",
          "token_id",
          "price",
          "expiration_time",
          "merkle_root",
          "salt"
        ]
      },
      "CreateBurnForFragmentsDto": {
        "type": "object",
        "properties": {
          "sell_orders": {
            "description": "The token ids to burn",
            "example": [
              {
                "trader": "1",
                "side": 1
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateBurnForFragmentsSellOrderDto"
            }
          },
          "signatures": {
            "description": "The signatures of the burn",
            "example": [
              "0x123",
              "0x456",
              "0x789"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "sell_orders",
          "signatures"
        ]
      },
      "CreateBurnForFragmentsResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the burn for fragments was successful",
            "example": true
          },
          "processed_at": {
            "format": "date-time",
            "type": "string",
            "description": "The date of the burn for fragments",
            "example": "2024-01-01"
          }
        },
        "required": [
          "success",
          "processed_at"
        ]
      },
      "GetPendingBurnsResponseDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "fragments_nb": {
            "type": "number"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "fragments_nb",
          "created_at"
        ]
      },
      "GetCardMarketInfoDTO": {
        "type": "object",
        "properties": {
          "limit_price": {
            "type": "number"
          },
          "best_offer": {
            "type": "number"
          },
          "last_sale": {
            "type": "number"
          }
        },
        "required": [
          "limit_price",
          "best_offer",
          "last_sale"
        ]
      },
      "ReferralStatistics": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "player_id": {
            "type": "string"
          },
          "players": {
            "$ref": "#/components/schemas/Player"
          },
          "volume_referrals": {
            "type": "string"
          },
          "tactics_referrals": {
            "type": "number"
          },
          "cards_rewards": {
            "type": "number"
          },
          "tactics_rewards": {
            "type": "number"
          },
          "packs_referrals": {
            "type": "number"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "player_id",
          "players",
          "volume_referrals",
          "tactics_referrals",
          "cards_rewards",
          "tactics_rewards",
          "packs_referrals",
          "created_at",
          "updated_at"
        ]
      },
      "ReferralsStatisticsDetailsResponse": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number"
          },
          "progressRange": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "progress": {
            "type": "number"
          },
          "next_rewards": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "has_reward_to_claim": {
            "type": "boolean"
          },
          "rewardToClaimId": {
            "type": "string"
          },
          "rewardToClaimMintConfigId": {
            "type": "string"
          }
        },
        "required": [
          "value",
          "progressRange",
          "progress",
          "next_rewards",
          "has_reward_to_claim",
          "rewardToClaimId",
          "rewardToClaimMintConfigId"
        ]
      },
      "ReferralsStatisticsResponse": {
        "type": "object",
        "properties": {
          "referralCode": {
            "type": "string"
          },
          "volume": {
            "$ref": "#/components/schemas/ReferralsStatisticsDetailsResponse"
          },
          "tactics": {
            "$ref": "#/components/schemas/ReferralsStatisticsDetailsResponse"
          },
          "packs": {
            "$ref": "#/components/schemas/ReferralsStatisticsDetailsResponse"
          },
          "cards_rewards": {
            "type": "number"
          },
          "tactics_rewards": {
            "type": "number"
          },
          "total_referred_players": {
            "type": "number"
          }
        },
        "required": [
          "referralCode",
          "volume",
          "tactics",
          "packs",
          "cards_rewards",
          "tactics_rewards",
          "total_referred_players"
        ]
      },
      "GetReferredPlayersResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "handle": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "profile_picture": {
            "type": "string"
          },
          "twitter_id": {
            "type": "string"
          },
          "google_id": {
            "type": "string"
          },
          "fantasy_points": {
            "type": "number"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "fantasy_points_referrals": {
            "type": "number"
          },
          "stars": {
            "type": "number"
          },
          "league": {
            "type": "number"
          },
          "is_hero": {
            "type": "boolean"
          },
          "is_onboarding_done": {
            "type": "boolean"
          },
          "gold": {
            "description": "Gold as a Decimal value",
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "tactics_referral_settings_id": {
            "type": "string"
          },
          "following_count": {
            "type": "number"
          },
          "post_count": {
            "type": "number"
          },
          "like_count": {
            "type": "number"
          },
          "is_x_verified": {
            "type": "boolean"
          },
          "follower_count": {
            "type": "number"
          },
          "can_play_free_tactics": {
            "type": "boolean"
          },
          "fragments": {
            "type": "number"
          },
          "are_nft_approved": {
            "type": "boolean"
          },
          "weth_allowance": {
            "description": "WETH allowance as a Decimal value",
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalNumber"
              }
            ]
          },
          "monad_address": {
            "type": "string"
          },
          "total_volume": {
            "type": "number"
          },
          "total_tactics": {
            "type": "number"
          },
          "total_packs": {
            "type": "number"
          },
          "is_direct_referral": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "name",
          "handle",
          "email",
          "profile_picture",
          "twitter_id",
          "google_id",
          "fantasy_points",
          "created_at",
          "updated_at",
          "fantasy_points_referrals",
          "stars",
          "league",
          "is_hero",
          "is_onboarding_done",
          "gold",
          "tactics_referral_settings_id",
          "follower_count",
          "can_play_free_tactics",
          "fragments",
          "are_nft_approved",
          "weth_allowance",
          "monad_address",
          "total_volume",
          "total_tactics",
          "total_packs",
          "is_direct_referral"
        ]
      },
      "PaginatedGetReferredPlayersResponseResult": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Data items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetReferredPlayersResponse"
            }
          },
          "meta": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaDTO"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "PaginatedReferralStatisticsResult": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Data items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferralStatistics"
            }
          },
          "meta": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaDTO"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "FragmentsCardsConfig": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "fragments": {
            "type": "number"
          },
          "nb_cards": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "picture_url": {
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "is_active": {
            "type": "boolean"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "fragments",
          "nb_cards",
          "name",
          "description",
          "picture_url",
          "metadata",
          "is_active",
          "created_at",
          "updated_at"
        ]
      },
      "GetBroadcastActiveNotificationDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "notification_type": {
            "type": "string"
          },
          "notification_data": {
            "type": "object"
          },
          "active": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "notification_type",
          "notification_data",
          "active"
        ]
      },
      "ChoiceMetadata": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "photo": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "CreateChoiceDTO": {
        "type": "object",
        "properties": {
          "typeRef": {
            "type": "string",
            "enum": [
              "hero",
              "tweet",
              "coin"
            ]
          },
          "resourceId": {
            "type": "string",
            "example": "1586054864240525315"
          },
          "metadata": {
            "example": {
              "name": "Hero Name",
              "photo": "need to be vercel image url",
              "description": "Hero description"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/ChoiceMetadata"
              }
            ]
          },
          "flag": {
            "description": "Flags that the choice is related to",
            "example": [
              "hero",
              "memecoin",
              "crypto",
              "nft"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Choice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "typeRef": {
            "type": "string",
            "enum": [
              "hero",
              "tweet",
              "coin"
            ]
          },
          "resourceId": {
            "type": "string",
            "example": "1586054864240525315"
          },
          "metadata": {
            "example": {
              "name": "Hero Name",
              "photo": "need to be vercel image url",
              "description": "Hero description"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/ChoiceMetadata"
              }
            ]
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "updatedAt",
          "createdAt"
        ]
      },
      "CreateFlagDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "description"
        ]
      },
      "GuessFlag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "description"
        ]
      },
      "LinkFlagsToChoicesDTO": {
        "type": "object",
        "properties": {
          "choice_ids": {
            "description": "Choices that the flag is related to",
            "example": [
              "uuid",
              "uuid",
              "uuid"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "flag_ids": {
            "description": "Flags that the choice is related to",
            "example": [
              "is_hero",
              "is_memecoin",
              "is_crypto",
              "is_nft"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "choice_ids",
          "flag_ids"
        ]
      },
      "CreateQuestionDTO": {
        "type": "object",
        "properties": {
          "choice_1_id": {
            "type": "string"
          },
          "choice_2_id": {
            "type": "string"
          },
          "flag_id": {
            "type": "string"
          },
          "question": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "subject_id": {
            "type": "string"
          },
          "weight": {
            "type": "number"
          }
        },
        "required": [
          "choice_1_id",
          "choice_2_id"
        ]
      },
      "GetChoicesFormattedDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "photo": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "extra_data": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "GetQuestionResponseDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "choice_1_id": {
            "type": "string"
          },
          "choice_2_id": {
            "type": "string"
          },
          "flag_id": {
            "type": "string"
          },
          "question": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "subject_id": {
            "type": "string"
          },
          "choice_1": {
            "$ref": "#/components/schemas/GetChoicesFormattedDTO"
          },
          "choice_2": {
            "$ref": "#/components/schemas/GetChoicesFormattedDTO"
          },
          "subject": {
            "$ref": "#/components/schemas/GetChoicesFormattedDTO"
          }
        },
        "required": [
          "id",
          "choice_1_id",
          "choice_2_id",
          "choice_1",
          "choice_2"
        ]
      },
      "GuessStreak": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "player_id": {
            "type": "string"
          },
          "current_streak": {
            "type": "number"
          },
          "longest_streak": {
            "type": "number"
          },
          "total_guesses": {
            "type": "number"
          },
          "total_answers": {
            "type": "number"
          },
          "play_since_reset": {
            "type": "number"
          },
          "last_reset": {
            "format": "date-time",
            "type": "string"
          },
          "unlock_at": {
            "format": "date-time",
            "type": "string"
          },
          "last_updated": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "player_id",
          "current_streak",
          "longest_streak",
          "total_guesses",
          "total_answers",
          "play_since_reset",
          "last_reset",
          "unlock_at",
          "last_updated"
        ]
      },
      "AnswerQuestionDTO": {
        "type": "object",
        "properties": {
          "question_id": {
            "type": "string",
            "description": "The id of the question",
            "example": "uuid"
          },
          "choice_id": {
            "type": "string",
            "description": "The id of the choice",
            "example": "uuid"
          },
          "flag_id": {
            "type": "string",
            "description": "Flag ID"
          }
        },
        "required": [
          "question_id",
          "choice_id"
        ]
      },
      "AnswerQuestionResponseDTO": {
        "type": "object",
        "properties": {
          "is_correct": {
            "type": "boolean"
          },
          "streak": {
            "$ref": "#/components/schemas/GuessStreak"
          }
        },
        "required": [
          "is_correct",
          "streak"
        ]
      },
      "GuessStreakReward": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the streak reward",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "threshold": {
            "type": "number",
            "description": "The threshold of the streak reward",
            "example": 10
          },
          "reward_type": {
            "type": "string",
            "description": "The type of the reward",
            "example": "FAN"
          },
          "reward_amount": {
            "type": "number",
            "description": "The amount of the reward",
            "example": 10000
          },
          "is_onboarding": {
            "type": "boolean",
            "description": "Whether the reward is for onboarding",
            "example": true
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "The date the streak reward was created",
            "example": "2025-01-01T00:00:00.000Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "The date the streak reward was updated",
            "example": "2025-01-01T00:00:00.000Z"
          }
        },
        "required": [
          "id",
          "threshold",
          "reward_type",
          "reward_amount",
          "is_onboarding",
          "created_at",
          "updated_at"
        ]
      },
      "GetStreakRewardsResponseDTO": {
        "type": "object",
        "properties": {
          "rewards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GuessStreakReward"
            }
          },
          "next_threshold": {
            "type": "number"
          },
          "last_threshold": {
            "type": "number"
          }
        },
        "required": [
          "rewards",
          "next_threshold",
          "last_threshold"
        ]
      },
      "CreateSubscriptionDto": {
        "type": "object",
        "properties": {
          "subscriptionId": {
            "type": "string"
          }
        },
        "required": [
          "subscriptionId"
        ]
      },
      "SendNotificationDto": {
        "type": "object",
        "properties": {
          "userIds": {
            "description": "Array of OneSignal player IDs to send the notification to",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string",
            "description": "Title of the notification"
          },
          "body": {
            "type": "string",
            "description": "Body content of the notification"
          },
          "link": {
            "type": "string",
            "description": "URL to redirect to when clicking the notification"
          }
        },
        "required": [
          "userIds",
          "title",
          "body",
          "link"
        ]
      },
      "TradeCreatedDataNew": {
        "type": "object",
        "properties": {
          "seller_id": {
            "type": "string",
            "description": "ID of the seller"
          },
          "buyer_id": {
            "type": "string",
            "description": "ID of the buyer"
          },
          "price": {
            "type": "string",
            "description": "Price of the trade"
          },
          "is_sell": {
            "type": "boolean",
            "description": "Whether this is a sell trade"
          }
        },
        "required": [
          "seller_id",
          "buyer_id",
          "price",
          "is_sell"
        ]
      },
      "TradeCreatedData": {
        "type": "object",
        "properties": {
          "new": {
            "$ref": "#/components/schemas/TradeCreatedDataNew"
          }
        },
        "required": [
          "new"
        ]
      },
      "RewardsAvailableData": {
        "type": "object",
        "properties": {
          "player_ids": {
            "description": "Array of player IDs",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "player_ids"
        ]
      },
      "TacticRewardsAvailableDataNew": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Tactic ID"
          }
        },
        "required": [
          "id"
        ]
      },
      "TacticRewardsAvailableData": {
        "type": "object",
        "properties": {
          "new": {
            "$ref": "#/components/schemas/TacticRewardsAvailableDataNew"
          }
        },
        "required": [
          "new"
        ]
      },
      "HandlePushNotificationDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "TRADE_CREATED",
              "REWARDS_AVAILABLE",
              "TACTIC_OPENED",
              "TACTIC_REWARDS_AVAILABLE",
              "TOURNAMENT_REWARDS_AVAILABLE",
              "TOURNAMENT_REGISTRATION_AVAILABLE"
            ],
            "description": "Type of the event"
          },
          "data": {
            "description": "Event data object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TradeCreatedData"
              },
              {
                "$ref": "#/components/schemas/RewardsAvailableData"
              },
              {
                "$ref": "#/components/schemas/TacticRewardsAvailableData"
              }
            ]
          }
        },
        "required": [
          "type",
          "data"
        ]
      },
      "DateTimeFilterDTO": {
        "type": "object",
        "properties": {
          "equals": {
            "format": "date-time",
            "type": "string"
          },
          "in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "notIn": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "lt": {
            "format": "date-time",
            "type": "string"
          },
          "lte": {
            "format": "date-time",
            "type": "string"
          },
          "gt": {
            "format": "date-time",
            "type": "string"
          },
          "gte": {
            "format": "date-time",
            "type": "string"
          },
          "not": {
            "$ref": "#/components/schemas/DateTimeFilterDTO"
          }
        }
      },
      "BoolFilterDTO": {
        "type": "object",
        "properties": {
          "equals": {
            "type": "boolean"
          },
          "not": {
            "$ref": "#/components/schemas/BoolFilterDTO"
          }
        }
      }
    }
  }
}
