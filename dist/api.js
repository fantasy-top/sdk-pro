"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Fantasy API | PRO
 * The Fantasy API documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CardApi = exports.CardApiFactory = exports.CardApiFp = exports.CardApiAxiosParamCreator = exports.TrendingHeroDTOTrendingReasonEnum = exports.TacticsOrderByDTOUpdatedAtEnum = exports.TacticsOrderByDTOCreatedAtEnum = exports.TacticsOrderByDTOVisibleEnum = exports.TacticsOrderByDTORegistrationOpennedEnum = exports.TacticsOrderByDTOIsRewardsProcessedEnum = exports.TacticsOrderByDTOEthPriceEnum = exports.TacticsOrderByDTOWalletAddressEnum = exports.TacticsOrderByDTOCumulatedWethEnum = exports.TacticsOrderByDTOIsProcessedEnum = exports.TacticsOrderByDTOEndDateEnum = exports.TacticsOrderByDTOStartDateEnum = exports.TacticsOrderByDTOTacticConfigIdEnum = exports.TacticsOrderByDTOIdEnum = exports.TacticsEntryOrderByDTOUpdatedAtEnum = exports.TacticsEntryOrderByDTOCreatedAtEnum = exports.TacticsEntryOrderByDTOAutocompletedAtEnum = exports.TacticsEntryOrderByDTOAutocompletedEnum = exports.TacticsEntryOrderByDTOPreviousRankEnum = exports.TacticsEntryOrderByDTOTicketIdEnum = exports.TacticsEntryOrderByDTOHero5StarsEnum = exports.TacticsEntryOrderByDTOHero4StarsEnum = exports.TacticsEntryOrderByDTOHero3StarsEnum = exports.TacticsEntryOrderByDTOHero2StarsEnum = exports.TacticsEntryOrderByDTOHero1StarsEnum = exports.TacticsEntryOrderByDTOValidateDeckBeforeEnum = exports.TacticsEntryOrderByDTORewardsEnum = exports.TacticsEntryOrderByDTOScoreEnum = exports.TacticsEntryOrderByDTORankEnum = exports.TacticsEntryOrderByDTOHero5IdEnum = exports.TacticsEntryOrderByDTOHero4IdEnum = exports.TacticsEntryOrderByDTOHero3IdEnum = exports.TacticsEntryOrderByDTOHero2IdEnum = exports.TacticsEntryOrderByDTOHero1IdEnum = exports.TacticsEntryOrderByDTOPlayerIdEnum = exports.TacticsEntryOrderByDTOTacticIdEnum = exports.TacticsEntryOrderByDTOIdEnum = exports.StringFilterDTOModeEnum = exports.GetTacticsOptionsDTODistinctEnum = exports.GetTacticsEntriesOptionsDTODistinctEnum = exports.GetPlayerCardsDTOOrderByEnum = exports.GetLastActivityQueryDTOActivityTypeEnum = exports.GetLastActivityDtoTypeEnum = exports.GetHeroScoresQueryOrderByDTOTweetCountEnum = exports.GetHeroScoresQueryOrderByDTOFantasyScoreEnum = exports.GetHeroScoresQueryHeroesOrderByDTOFollowersCountEnum = void 0;
exports.Client = exports.VotingApi = exports.VotingApiFactory = exports.VotingApiFp = exports.VotingApiAxiosParamCreator = exports.TacticsApi = exports.TacticsApiFactory = exports.TacticsApiFp = exports.TacticsApiAxiosParamCreator = exports.PlayerApi = exports.PlayerApiFactory = exports.PlayerApiFp = exports.PlayerApiAxiosParamCreator = exports.HeroApi = exports.HeroApiFactory = exports.HeroApiFp = exports.HeroApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
exports.GetHeroScoresQueryHeroesOrderByDTOFollowersCountEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.GetHeroScoresQueryOrderByDTOFantasyScoreEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.GetHeroScoresQueryOrderByDTOTweetCountEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.GetLastActivityDtoTypeEnum = {
    MintPack: 'MINT_PACK',
    BurnCard: 'BURN_CARD',
    LevelUp: 'LEVEL_UP',
    SaveDeck: 'SAVE_DECK',
    Trade: 'TRADE',
    Listing: 'LISTING',
    Bid: 'BID'
};
exports.GetLastActivityQueryDTOActivityTypeEnum = {
    MintPack: 'MINT_PACK',
    BurnCard: 'BURN_CARD',
    LevelUp: 'LEVEL_UP',
    SaveDeck: 'SAVE_DECK',
    Trade: 'TRADE',
    Listing: 'LISTING',
    Bid: 'BID'
};
exports.GetPlayerCardsDTOOrderByEnum = {
    Score: 'cards_score',
    Number: 'cards_number',
    ScoreAsc: 'cards_score_asc'
};
exports.GetTacticsEntriesOptionsDTODistinctEnum = {
    TacticId: 'tactic_id',
    PlayerId: 'player_id',
    Hero1Id: 'hero1_id',
    Hero2Id: 'hero2_id',
    Hero3Id: 'hero3_id',
    Hero4Id: 'hero4_id',
    Hero5Id: 'hero5_id',
    Rank: 'rank',
    Score: 'score',
    Rewards: 'rewards',
    ValidateDeckBefore: 'validate_deck_before',
    Id: 'id',
    Hero1Stars: 'hero1_stars',
    Hero2Stars: 'hero2_stars',
    Hero3Stars: 'hero3_stars',
    Hero4Stars: 'hero4_stars',
    Hero5Stars: 'hero5_stars',
    TicketId: 'ticket_id',
    PreviousRank: 'previous_rank',
    Autocompleted: 'autocompleted',
    AutocompletedAt: 'autocompleted_at',
    CreatedAt: 'created_at',
    UpdatedAt: 'updated_at'
};
exports.GetTacticsOptionsDTODistinctEnum = {
    Id: 'id',
    TacticConfigId: 'tactic_config_id',
    StartDate: 'start_date',
    EndDate: 'end_date',
    IsProcessed: 'is_processed',
    CumulatedWeth: 'cumulated_weth',
    HasBeenValidated: 'has_been_validated',
    WalletAddress: 'wallet_address',
    EthPrice: 'eth_price',
    IsRewardsProcessed: 'is_rewards_processed',
    RegistrationOpenned: 'registration_openned',
    Visible: 'visible',
    CreatedAt: 'created_at',
    UpdatedAt: 'updated_at'
};
exports.StringFilterDTOModeEnum = {
    Default: 'default',
    Insensitive: 'insensitive'
};
exports.TacticsEntryOrderByDTOIdEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOTacticIdEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOPlayerIdEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOHero1IdEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOHero2IdEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOHero3IdEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOHero4IdEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOHero5IdEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTORankEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOScoreEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTORewardsEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOValidateDeckBeforeEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOHero1StarsEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOHero2StarsEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOHero3StarsEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOHero4StarsEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOHero5StarsEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOTicketIdEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOPreviousRankEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOAutocompletedEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOAutocompletedAtEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOCreatedAtEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOUpdatedAtEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOIdEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOTacticConfigIdEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOStartDateEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOEndDateEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOIsProcessedEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOCumulatedWethEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOWalletAddressEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOEthPriceEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOIsRewardsProcessedEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTORegistrationOpennedEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOVisibleEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOCreatedAtEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOUpdatedAtEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TrendingHeroDTOTrendingReasonEnum = {
    FloorPrice: 'floor_price',
    Views: 'views',
    None: 'none'
};
/**
 * CardApi - axios parameter creator
 * @export
 */
const CardApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllCards: async (page, limit, options = {}) => {
            const localVarPath = `/card/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardById: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getCardById', 'id', id);
            const localVarPath = `/card/by-id/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} playerId
         * @param {GetPlayerCardsDTO} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardsByPlayerId: async (playerId, query, options = {}) => {
            // verify required parameter 'playerId' is not null or undefined
            (0, common_1.assertParamExists)('getCardsByPlayerId', 'playerId', playerId);
            const localVarPath = `/card/player/{playerId}`
                .replace(`{${"playerId"}}`, encodeURIComponent(String(playerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (query !== undefined) {
                for (const [key, value] of Object.entries(query)) {
                    localVarQueryParameter[key] = value;
                }
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} heroId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroSupply: async (heroId, options = {}) => {
            // verify required parameter 'heroId' is not null or undefined
            (0, common_1.assertParamExists)('getHeroSupply', 'heroId', heroId);
            const localVarPath = `/card/supply/{heroId}`
                .replace(`{${"heroId"}}`, encodeURIComponent(String(heroId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.CardApiAxiosParamCreator = CardApiAxiosParamCreator;
/**
 * CardApi - functional programming interface
 * @export
 */
const CardApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.CardApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAllCards(page, limit, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAllCards(page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['CardApi.findAllCards']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCardById(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCardById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['CardApi.getCardById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} playerId
         * @param {GetPlayerCardsDTO} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCardsByPlayerId(playerId, query, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCardsByPlayerId(playerId, query, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['CardApi.getCardsByPlayerId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} heroId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHeroSupply(heroId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHeroSupply(heroId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['CardApi.getHeroSupply']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.CardApiFp = CardApiFp;
/**
 * CardApi - factory interface
 * @export
 */
const CardApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.CardApiFp)(configuration);
    return {
        /**
         *
         * @param {CardApiFindAllCardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllCards(requestParameters = {}, options) {
            return localVarFp.findAllCards(requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {CardApiGetCardByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardById(requestParameters, options) {
            return localVarFp.getCardById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {CardApiGetCardsByPlayerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardsByPlayerId(requestParameters, options) {
            return localVarFp.getCardsByPlayerId(requestParameters.playerId, requestParameters.query, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {CardApiGetHeroSupplyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroSupply(requestParameters, options) {
            return localVarFp.getHeroSupply(requestParameters.heroId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.CardApiFactory = CardApiFactory;
/**
 * CardApi - object-oriented interface
 * @export
 * @class CardApi
 * @extends {BaseAPI}
 */
class CardApi extends base_1.BaseAPI {
    /**
     *
     * @param {CardApiFindAllCardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApi
     */
    findAllCards(requestParameters = {}, options) {
        return (0, exports.CardApiFp)(this.configuration).findAllCards(requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {CardApiGetCardByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApi
     */
    getCardById(requestParameters, options) {
        return (0, exports.CardApiFp)(this.configuration).getCardById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {CardApiGetCardsByPlayerIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApi
     */
    getCardsByPlayerId(requestParameters, options) {
        return (0, exports.CardApiFp)(this.configuration).getCardsByPlayerId(requestParameters.playerId, requestParameters.query, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {CardApiGetHeroSupplyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApi
     */
    getHeroSupply(requestParameters, options) {
        return (0, exports.CardApiFp)(this.configuration).getHeroSupply(requestParameters.heroId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.CardApi = CardApi;
/**
 * HeroApi - axios parameter creator
 * @export
 */
const HeroApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get all heroes with pagination
         * @param {number} [limit] Limit the number of heroes returned
         * @param {number} [page] Page number for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllHeroes: async (limit, page, options = {}) => {
            const localVarPath = `/hero/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get heroes by name or handle
         * @param {string} search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroesByHandleOrName: async (search, options = {}) => {
            // verify required parameter 'search' is not null or undefined
            (0, common_1.assertParamExists)('getHeroesByHandleOrName', 'search', search);
            const localVarPath = `/hero/search/name`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get heroes by IDs
         * @param {Array<string>} ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroesByIds: async (ids, options = {}) => {
            // verify required parameter 'ids' is not null or undefined
            (0, common_1.assertParamExists)('getHeroesByIds', 'ids', ids);
            const localVarPath = `/hero/search/ids`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.HeroApiAxiosParamCreator = HeroApiAxiosParamCreator;
/**
 * HeroApi - functional programming interface
 * @export
 */
const HeroApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.HeroApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get all heroes with pagination
         * @param {number} [limit] Limit the number of heroes returned
         * @param {number} [page] Page number for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllHeroes(limit, page, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllHeroes(limit, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['HeroApi.getAllHeroes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get heroes by name or handle
         * @param {string} search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHeroesByHandleOrName(search, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHeroesByHandleOrName(search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['HeroApi.getHeroesByHandleOrName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get heroes by IDs
         * @param {Array<string>} ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHeroesByIds(ids, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHeroesByIds(ids, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['HeroApi.getHeroesByIds']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.HeroApiFp = HeroApiFp;
/**
 * HeroApi - factory interface
 * @export
 */
const HeroApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.HeroApiFp)(configuration);
    return {
        /**
         *
         * @summary Get all heroes with pagination
         * @param {HeroApiGetAllHeroesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllHeroes(requestParameters = {}, options) {
            return localVarFp.getAllHeroes(requestParameters.limit, requestParameters.page, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get heroes by name or handle
         * @param {HeroApiGetHeroesByHandleOrNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroesByHandleOrName(requestParameters, options) {
            return localVarFp.getHeroesByHandleOrName(requestParameters.search, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get heroes by IDs
         * @param {HeroApiGetHeroesByIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroesByIds(requestParameters, options) {
            return localVarFp.getHeroesByIds(requestParameters.ids, options).then((request) => request(axios, basePath));
        },
    };
};
exports.HeroApiFactory = HeroApiFactory;
/**
 * HeroApi - object-oriented interface
 * @export
 * @class HeroApi
 * @extends {BaseAPI}
 */
class HeroApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get all heroes with pagination
     * @param {HeroApiGetAllHeroesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeroApi
     */
    getAllHeroes(requestParameters = {}, options) {
        return (0, exports.HeroApiFp)(this.configuration).getAllHeroes(requestParameters.limit, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get heroes by name or handle
     * @param {HeroApiGetHeroesByHandleOrNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeroApi
     */
    getHeroesByHandleOrName(requestParameters, options) {
        return (0, exports.HeroApiFp)(this.configuration).getHeroesByHandleOrName(requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get heroes by IDs
     * @param {HeroApiGetHeroesByIdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeroApi
     */
    getHeroesByIds(requestParameters, options) {
        return (0, exports.HeroApiFp)(this.configuration).getHeroesByIds(requestParameters.ids, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.HeroApi = HeroApi;
/**
 * PlayerApi - axios parameter creator
 * @export
 */
const PlayerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Search players by name, address or handle
         * @param {string} search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPlayersBySearch: async (search, options = {}) => {
            // verify required parameter 'search' is not null or undefined
            (0, common_1.assertParamExists)('findPlayersBySearch', 'search', search);
            const localVarPath = `/player/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all paginated players
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPlayersWithPagination: async (page, limit, options = {}) => {
            const localVarPath = `/player/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.PlayerApiAxiosParamCreator = PlayerApiAxiosParamCreator;
/**
 * PlayerApi - functional programming interface
 * @export
 */
const PlayerApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PlayerApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Search players by name, address or handle
         * @param {string} search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findPlayersBySearch(search, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findPlayersBySearch(search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['PlayerApi.findPlayersBySearch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get all paginated players
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPlayersWithPagination(page, limit, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPlayersWithPagination(page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['PlayerApi.getAllPlayersWithPagination']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.PlayerApiFp = PlayerApiFp;
/**
 * PlayerApi - factory interface
 * @export
 */
const PlayerApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PlayerApiFp)(configuration);
    return {
        /**
         *
         * @summary Search players by name, address or handle
         * @param {PlayerApiFindPlayersBySearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPlayersBySearch(requestParameters, options) {
            return localVarFp.findPlayersBySearch(requestParameters.search, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all paginated players
         * @param {PlayerApiGetAllPlayersWithPaginationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPlayersWithPagination(requestParameters = {}, options) {
            return localVarFp.getAllPlayersWithPagination(requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
    };
};
exports.PlayerApiFactory = PlayerApiFactory;
/**
 * PlayerApi - object-oriented interface
 * @export
 * @class PlayerApi
 * @extends {BaseAPI}
 */
class PlayerApi extends base_1.BaseAPI {
    /**
     *
     * @summary Search players by name, address or handle
     * @param {PlayerApiFindPlayersBySearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    findPlayersBySearch(requestParameters, options) {
        return (0, exports.PlayerApiFp)(this.configuration).findPlayersBySearch(requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get all paginated players
     * @param {PlayerApiGetAllPlayersWithPaginationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    getAllPlayersWithPagination(requestParameters = {}, options) {
        return (0, exports.PlayerApiFp)(this.configuration).getAllPlayersWithPagination(requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PlayerApi = PlayerApi;
/**
 * TacticsApi - axios parameter creator
 * @export
 */
const TacticsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get the total number of entries for a player
         * @param {string} playerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countEntriesByPlayerId: async (playerId, options = {}) => {
            // verify required parameter 'playerId' is not null or undefined
            (0, common_1.assertParamExists)('countEntriesByPlayerId', 'playerId', playerId);
            const localVarPath = `/tactics/entry/total/{playerId}`
                .replace(`{${"playerId"}}`, encodeURIComponent(String(playerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get the total number of tickets for a player
         * @param {string} playerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countTicketsByPlayerId: async (playerId, options = {}) => {
            // verify required parameter 'playerId' is not null or undefined
            (0, common_1.assertParamExists)('countTicketsByPlayerId', 'playerId', playerId);
            const localVarPath = `/tactics/tickets/count/{playerId}`
                .replace(`{${"playerId"}}`, encodeURIComponent(String(playerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all tactics
         * @param {GetTacticsQueryDTO} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (query, options = {}) => {
            const localVarPath = `/tactics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (query !== undefined) {
                for (const [key, value] of Object.entries(query)) {
                    localVarQueryParameter[key] = value;
                }
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get tactic by id
         * @param {string} id
         * @param {GetTacticsQueryDTO} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id, query, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getById', 'id', id);
            const localVarPath = `/tactics/byId/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (query !== undefined) {
                for (const [key, value] of Object.entries(query)) {
                    localVarQueryParameter[key] = value;
                }
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get heros scores for a given tactic
         * @param {string} tacticId
         * @param {GetHeroScoresQueryDTO} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroScoresByTacticId: async (tacticId, query, options = {}) => {
            // verify required parameter 'tacticId' is not null or undefined
            (0, common_1.assertParamExists)('getHeroScoresByTacticId', 'tacticId', tacticId);
            const localVarPath = `/tactics/hero-scores/{tacticId}`
                .replace(`{${"tacticId"}}`, encodeURIComponent(String(tacticId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (query !== undefined) {
                for (const [key, value] of Object.entries(query)) {
                    localVarQueryParameter[key] = value;
                }
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get the total gains of a player
         * @param {string} playerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTotalGains: async (playerId, options = {}) => {
            // verify required parameter 'playerId' is not null or undefined
            (0, common_1.assertParamExists)('getTotalGains', 'playerId', playerId);
            const localVarPath = `/tactics/tickets/total-gains/{playerId}`
                .replace(`{${"playerId"}}`, encodeURIComponent(String(playerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.TacticsApiAxiosParamCreator = TacticsApiAxiosParamCreator;
/**
 * TacticsApi - functional programming interface
 * @export
 */
const TacticsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.TacticsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get the total number of entries for a player
         * @param {string} playerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countEntriesByPlayerId(playerId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countEntriesByPlayerId(playerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['TacticsApi.countEntriesByPlayerId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get the total number of tickets for a player
         * @param {string} playerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countTicketsByPlayerId(playerId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countTicketsByPlayerId(playerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['TacticsApi.countTicketsByPlayerId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get all tactics
         * @param {GetTacticsQueryDTO} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(query, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(query, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['TacticsApi.get']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get tactic by id
         * @param {string} id
         * @param {GetTacticsQueryDTO} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(id, query, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(id, query, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['TacticsApi.getById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get heros scores for a given tactic
         * @param {string} tacticId
         * @param {GetHeroScoresQueryDTO} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHeroScoresByTacticId(tacticId, query, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHeroScoresByTacticId(tacticId, query, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['TacticsApi.getHeroScoresByTacticId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get the total gains of a player
         * @param {string} playerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTotalGains(playerId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTotalGains(playerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['TacticsApi.getTotalGains']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.TacticsApiFp = TacticsApiFp;
/**
 * TacticsApi - factory interface
 * @export
 */
const TacticsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.TacticsApiFp)(configuration);
    return {
        /**
         *
         * @summary Get the total number of entries for a player
         * @param {TacticsApiCountEntriesByPlayerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countEntriesByPlayerId(requestParameters, options) {
            return localVarFp.countEntriesByPlayerId(requestParameters.playerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get the total number of tickets for a player
         * @param {TacticsApiCountTicketsByPlayerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countTicketsByPlayerId(requestParameters, options) {
            return localVarFp.countTicketsByPlayerId(requestParameters.playerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all tactics
         * @param {TacticsApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters = {}, options) {
            return localVarFp.get(requestParameters.query, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get tactic by id
         * @param {TacticsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters, options) {
            return localVarFp.getById(requestParameters.id, requestParameters.query, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get heros scores for a given tactic
         * @param {TacticsApiGetHeroScoresByTacticIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroScoresByTacticId(requestParameters, options) {
            return localVarFp.getHeroScoresByTacticId(requestParameters.tacticId, requestParameters.query, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get the total gains of a player
         * @param {TacticsApiGetTotalGainsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTotalGains(requestParameters, options) {
            return localVarFp.getTotalGains(requestParameters.playerId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.TacticsApiFactory = TacticsApiFactory;
/**
 * TacticsApi - object-oriented interface
 * @export
 * @class TacticsApi
 * @extends {BaseAPI}
 */
class TacticsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get the total number of entries for a player
     * @param {TacticsApiCountEntriesByPlayerIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TacticsApi
     */
    countEntriesByPlayerId(requestParameters, options) {
        return (0, exports.TacticsApiFp)(this.configuration).countEntriesByPlayerId(requestParameters.playerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get the total number of tickets for a player
     * @param {TacticsApiCountTicketsByPlayerIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TacticsApi
     */
    countTicketsByPlayerId(requestParameters, options) {
        return (0, exports.TacticsApiFp)(this.configuration).countTicketsByPlayerId(requestParameters.playerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get all tactics
     * @param {TacticsApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TacticsApi
     */
    get(requestParameters = {}, options) {
        return (0, exports.TacticsApiFp)(this.configuration).get(requestParameters.query, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get tactic by id
     * @param {TacticsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TacticsApi
     */
    getById(requestParameters, options) {
        return (0, exports.TacticsApiFp)(this.configuration).getById(requestParameters.id, requestParameters.query, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get heros scores for a given tactic
     * @param {TacticsApiGetHeroScoresByTacticIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TacticsApi
     */
    getHeroScoresByTacticId(requestParameters, options) {
        return (0, exports.TacticsApiFp)(this.configuration).getHeroScoresByTacticId(requestParameters.tacticId, requestParameters.query, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get the total gains of a player
     * @param {TacticsApiGetTotalGainsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TacticsApi
     */
    getTotalGains(requestParameters, options) {
        return (0, exports.TacticsApiFp)(this.configuration).getTotalGains(requestParameters.playerId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.TacticsApi = TacticsApi;
/**
 * VotingApi - axios parameter creator
 * @export
 */
const VotingApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get all voting configurations
         * @param {GetVoteConfigQueryDTO} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigs: async (query, options = {}) => {
            const localVarPath = `/vote/configs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (query !== undefined) {
                for (const [key, value] of Object.entries(query)) {
                    localVarQueryParameter[key] = value;
                }
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all vote by hero
         * @param {string} voteConfigId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVotesByHero: async (voteConfigId, options = {}) => {
            // verify required parameter 'voteConfigId' is not null or undefined
            (0, common_1.assertParamExists)('getVotesByHero', 'voteConfigId', voteConfigId);
            const localVarPath = `/vote/heros/{vote_config_id}`
                .replace(`{${"vote_config_id"}}`, encodeURIComponent(String(voteConfigId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.VotingApiAxiosParamCreator = VotingApiAxiosParamCreator;
/**
 * VotingApi - functional programming interface
 * @export
 */
const VotingApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.VotingApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get all voting configurations
         * @param {GetVoteConfigQueryDTO} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConfigs(query, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConfigs(query, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['VotingApi.getConfigs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get all vote by hero
         * @param {string} voteConfigId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVotesByHero(voteConfigId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVotesByHero(voteConfigId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['VotingApi.getVotesByHero']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.VotingApiFp = VotingApiFp;
/**
 * VotingApi - factory interface
 * @export
 */
const VotingApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.VotingApiFp)(configuration);
    return {
        /**
         *
         * @summary Get all voting configurations
         * @param {VotingApiGetConfigsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigs(requestParameters = {}, options) {
            return localVarFp.getConfigs(requestParameters.query, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all vote by hero
         * @param {VotingApiGetVotesByHeroRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVotesByHero(requestParameters, options) {
            return localVarFp.getVotesByHero(requestParameters.voteConfigId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.VotingApiFactory = VotingApiFactory;
/**
 * VotingApi - object-oriented interface
 * @export
 * @class VotingApi
 * @extends {BaseAPI}
 */
class VotingApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get all voting configurations
     * @param {VotingApiGetConfigsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VotingApi
     */
    getConfigs(requestParameters = {}, options) {
        return (0, exports.VotingApiFp)(this.configuration).getConfigs(requestParameters.query, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get all vote by hero
     * @param {VotingApiGetVotesByHeroRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VotingApi
     */
    getVotesByHero(requestParameters, options) {
        return (0, exports.VotingApiFp)(this.configuration).getVotesByHero(requestParameters.voteConfigId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.VotingApi = VotingApi;
class Client extends base_1.BaseAPI {
    card;
    hero;
    player;
    tactics;
    voting;
    config;
    static instance = null;
    constructor(config) {
        super(config);
        this.config = config;
        this.card = new CardApi(config);
        this.hero = new HeroApi(config);
        this.player = new PlayerApi(config);
        this.tactics = new TacticsApi(config);
        this.voting = new VotingApi(config);
        return new Proxy(this, {
            get(target, prop, receiver) {
                const value = target[prop];
                if (typeof value === 'function') {
                    return value.bind(target);
                }
                return value;
            }
        });
    }
    static getInstance(config) {
        if (!Client.instance) {
            Client.instance = new Client(config);
        }
        return Client.instance;
    }
    resetToken() {
        const token = typeof this.config.accessToken === 'function'
            ? this.config.accessToken()
            : this.config.accessToken;
        const newConfig = { ...this.config, accessToken: token };
        Client.instance = new Client(newConfig);
        Object.assign(this, Client.instance);
    }
}
exports.Client = Client;
