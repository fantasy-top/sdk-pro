"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Fantasy API | PRO
 * The Fantasy API documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TacticsOrderByDTOWalletAddressEnum = exports.TacticsOrderByDTOCumulatedWethEnum = exports.TacticsOrderByDTOIsProcessedEnum = exports.TacticsOrderByDTOEndDateEnum = exports.TacticsOrderByDTOStartDateEnum = exports.TacticsOrderByDTOTacticConfigIdEnum = exports.TacticsOrderByDTOIdEnum = exports.TacticsEntryOrderByDTOUpdatedAtEnum = exports.TacticsEntryOrderByDTOCreatedAtEnum = exports.TacticsEntryOrderByDTOAutocompletedAtEnum = exports.TacticsEntryOrderByDTOAutocompletedEnum = exports.TacticsEntryOrderByDTOPreviousRankEnum = exports.TacticsEntryOrderByDTOTicketIdEnum = exports.TacticsEntryOrderByDTOHero5StarsEnum = exports.TacticsEntryOrderByDTOHero4StarsEnum = exports.TacticsEntryOrderByDTOHero3StarsEnum = exports.TacticsEntryOrderByDTOHero2StarsEnum = exports.TacticsEntryOrderByDTOHero1StarsEnum = exports.TacticsEntryOrderByDTOValidateDeckBeforeEnum = exports.TacticsEntryOrderByDTORewardsEnum = exports.TacticsEntryOrderByDTOScoreEnum = exports.TacticsEntryOrderByDTORankEnum = exports.TacticsEntryOrderByDTOHero5IdEnum = exports.TacticsEntryOrderByDTOHero4IdEnum = exports.TacticsEntryOrderByDTOHero3IdEnum = exports.TacticsEntryOrderByDTOHero2IdEnum = exports.TacticsEntryOrderByDTOHero1IdEnum = exports.TacticsEntryOrderByDTOPlayerIdEnum = exports.TacticsEntryOrderByDTOTacticIdEnum = exports.TacticsEntryOrderByDTOIdEnum = exports.StringFilterDTOModeEnum = exports.RewardHistoryTypeEnum = exports.HeroWithStatsOrderByDTOFantasyScoreEnum = exports.HeroWithStatsOrderByDTOTweetCountEnum = exports.HeroWithStatsOrderByDTOViewsEnum = exports.HeroWithStatsOrderByDTOPreviousRankEnum = exports.HeroWithStatsOrderByDTOCurrentRankEnum = exports.HandlePushNotificationDtoTypeEnum = exports.GetTacticsOptionsDTODistinctEnum = exports.GetTacticsEntriesOptionsDTODistinctEnum = exports.GetPlayerGroupedCardsDTOOrderByEnum = exports.GetPlayerAllCardsDTOOrderByEnum = exports.GetPlayerActivityDtoActivityTypeEnum = exports.GetLastActivityQueryDTOActivityTypeEnum = exports.GetLastActivityDtoTypeEnum = exports.GetHeroScoresQueryOrderByDTOTweetCountEnum = exports.GetHeroScoresQueryOrderByDTOFantasyScoreEnum = exports.GetHeroScoresQueryHeroesOrderByDTOFollowersCountEnum = exports.CreateChoiceDTOTypeRefEnum = exports.ChoiceTypeRefEnum = void 0;
exports.Client = exports.VotingApi = exports.VotingApiFactory = exports.VotingApiFp = exports.VotingApiAxiosParamCreator = exports.TournamentsApi = exports.TournamentsApiFactory = exports.TournamentsApiFp = exports.TournamentsApiAxiosParamCreator = exports.TacticsApi = exports.TacticsApiFactory = exports.TacticsApiFp = exports.TacticsApiAxiosParamCreator = exports.PlayerApi = exports.PlayerApiFactory = exports.PlayerApiFp = exports.PlayerApiAxiosParamCreator = exports.MarketplaceApi = exports.MarketplaceApiFactory = exports.MarketplaceApiFp = exports.MarketplaceApiAxiosParamCreator = exports.HeroApi = exports.HeroApiFactory = exports.HeroApiFp = exports.HeroApiAxiosParamCreator = exports.CardApi = exports.CardApiFactory = exports.CardApiFp = exports.CardApiAxiosParamCreator = exports.TrendingHeroDTOTrendingReasonEnum = exports.TacticsOrderByDTOUpdatedAtEnum = exports.TacticsOrderByDTOCreatedAtEnum = exports.TacticsOrderByDTOVisibleEnum = exports.TacticsOrderByDTORegistrationOpennedEnum = exports.TacticsOrderByDTOIsRewardsProcessedEnum = exports.TacticsOrderByDTOEthPriceEnum = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
exports.ChoiceTypeRefEnum = {
    Hero: 'hero',
    Tweet: 'tweet',
    Coin: 'coin'
};
exports.CreateChoiceDTOTypeRefEnum = {
    Hero: 'hero',
    Tweet: 'tweet',
    Coin: 'coin'
};
exports.GetHeroScoresQueryHeroesOrderByDTOFollowersCountEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.GetHeroScoresQueryOrderByDTOFantasyScoreEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.GetHeroScoresQueryOrderByDTOTweetCountEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.GetLastActivityDtoTypeEnum = {
    All: 'ALL',
    MintPack: 'MINT_PACK',
    WinCard: 'WIN_CARD',
    BurnCard: 'BURN_CARD',
    LevelUp: 'LEVEL_UP',
    SaveDeck: 'SAVE_DECK',
    Trade: 'TRADE',
    Listing: 'LISTING',
    Bid: 'BID'
};
exports.GetLastActivityQueryDTOActivityTypeEnum = {
    All: 'ALL',
    MintPack: 'MINT_PACK',
    WinCard: 'WIN_CARD',
    BurnCard: 'BURN_CARD',
    LevelUp: 'LEVEL_UP',
    SaveDeck: 'SAVE_DECK',
    Trade: 'TRADE',
    Listing: 'LISTING',
    Bid: 'BID'
};
exports.GetPlayerActivityDtoActivityTypeEnum = {
    All: 'ALL',
    MintPack: 'MINT_PACK',
    WinCard: 'WIN_CARD',
    BurnCard: 'BURN_CARD',
    LevelUp: 'LEVEL_UP',
    SaveDeck: 'SAVE_DECK',
    Trade: 'TRADE',
    Listing: 'LISTING',
    Bid: 'BID'
};
exports.GetPlayerAllCardsDTOOrderByEnum = {
    Score: 'cards_score',
    Number: 'cards_number',
    ScoreAsc: 'cards_score_asc',
    ScoreDesc: 'cards_score_desc'
};
exports.GetPlayerGroupedCardsDTOOrderByEnum = {
    Score: 'cards_score',
    Number: 'cards_number',
    ScoreAsc: 'cards_score_asc',
    ScoreDesc: 'cards_score_desc'
};
exports.GetTacticsEntriesOptionsDTODistinctEnum = {
    TacticId: 'tactic_id',
    PlayerId: 'player_id',
    Hero1Id: 'hero1_id',
    Hero2Id: 'hero2_id',
    Hero3Id: 'hero3_id',
    Hero4Id: 'hero4_id',
    Hero5Id: 'hero5_id',
    Rank: 'rank',
    Score: 'score',
    Rewards: 'rewards',
    ValidateDeckBefore: 'validate_deck_before',
    Id: 'id',
    Hero1Stars: 'hero1_stars',
    Hero2Stars: 'hero2_stars',
    Hero3Stars: 'hero3_stars',
    Hero4Stars: 'hero4_stars',
    Hero5Stars: 'hero5_stars',
    TicketId: 'ticket_id',
    PreviousRank: 'previous_rank',
    Autocompleted: 'autocompleted',
    AutocompletedAt: 'autocompleted_at',
    CreatedAt: 'created_at',
    UpdatedAt: 'updated_at'
};
exports.GetTacticsOptionsDTODistinctEnum = {
    Id: 'id',
    TacticConfigId: 'tactic_config_id',
    StartDate: 'start_date',
    EndDate: 'end_date',
    IsProcessed: 'is_processed',
    CumulatedWeth: 'cumulated_weth',
    HasBeenValidated: 'has_been_validated',
    WalletAddress: 'wallet_address',
    EthPrice: 'eth_price',
    IsRewardsProcessed: 'is_rewards_processed',
    RegistrationOpenned: 'registration_openned',
    Visible: 'visible',
    CreatedAt: 'created_at',
    UpdatedAt: 'updated_at'
};
exports.HandlePushNotificationDtoTypeEnum = {
    TradeCreated: 'TRADE_CREATED',
    RewardsAvailable: 'REWARDS_AVAILABLE',
    TacticOpened: 'TACTIC_OPENED',
    TacticRewardsAvailable: 'TACTIC_REWARDS_AVAILABLE',
    TournamentRewardsAvailable: 'TOURNAMENT_REWARDS_AVAILABLE',
    TournamentRegistrationAvailable: 'TOURNAMENT_REGISTRATION_AVAILABLE'
};
exports.HeroWithStatsOrderByDTOCurrentRankEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.HeroWithStatsOrderByDTOPreviousRankEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.HeroWithStatsOrderByDTOViewsEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.HeroWithStatsOrderByDTOTweetCountEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.HeroWithStatsOrderByDTOFantasyScoreEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.RewardHistoryTypeEnum = {
    Star: 'STAR',
    Fan: 'FAN',
    Gold: 'GOLD',
    Pack: 'PACK',
    Fragment: 'FRAGMENT',
    StarBanner: 'star_banner'
};
exports.StringFilterDTOModeEnum = {
    Default: 'default',
    Insensitive: 'insensitive'
};
exports.TacticsEntryOrderByDTOIdEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOTacticIdEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOPlayerIdEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOHero1IdEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOHero2IdEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOHero3IdEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOHero4IdEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOHero5IdEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTORankEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOScoreEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTORewardsEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOValidateDeckBeforeEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOHero1StarsEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOHero2StarsEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOHero3StarsEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOHero4StarsEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOHero5StarsEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOTicketIdEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOPreviousRankEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOAutocompletedEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOAutocompletedAtEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOCreatedAtEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOUpdatedAtEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOIdEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOTacticConfigIdEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOStartDateEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOEndDateEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOIsProcessedEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOCumulatedWethEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOWalletAddressEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOEthPriceEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOIsRewardsProcessedEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTORegistrationOpennedEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOVisibleEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOCreatedAtEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOUpdatedAtEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TrendingHeroDTOTrendingReasonEnum = {
    FloorPrice: 'floor_price',
    Views: 'views',
    None: 'none'
};
/**
 * CardApi - axios parameter creator
 * @export
 */
const CardApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {number} page Page number
         * @param {number} limit Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllCards: async (page, limit, options = {}) => {
            // verify required parameter 'page' is not null or undefined
            (0, common_1.assertParamExists)('findAllCards', 'page', page);
            // verify required parameter 'limit' is not null or undefined
            (0, common_1.assertParamExists)('findAllCards', 'limit', limit);
            const localVarPath = `/card/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardById: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getCardById', 'id', id);
            const localVarPath = `/card/by-id/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {Array<string>} ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardsByIdsForOpenPacks: async (ids, options = {}) => {
            // verify required parameter 'ids' is not null or undefined
            (0, common_1.assertParamExists)('getCardsByIdsForOpenPacks', 'ids', ids);
            const localVarPath = `/card/by-ids/for-open-packs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} playerId
         * @param {GetPlayerGroupedCardsDTO} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardsByPlayerId: async (playerId, query, options = {}) => {
            // verify required parameter 'playerId' is not null or undefined
            (0, common_1.assertParamExists)('getCardsByPlayerId', 'playerId', playerId);
            const localVarPath = `/card/player/{playerId}`
                .replace(`{${"playerId"}}`, encodeURIComponent(String(playerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (query !== undefined) {
                for (const [key, value] of Object.entries(query)) {
                    localVarQueryParameter[key] = value;
                }
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} playerId
         * @param {GetCardsForDeckBuilderDTO} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeckBuilderCardsByPlayerId: async (playerId, query, options = {}) => {
            // verify required parameter 'playerId' is not null or undefined
            (0, common_1.assertParamExists)('getDeckBuilderCardsByPlayerId', 'playerId', playerId);
            const localVarPath = `/card/deck-builder/{playerId}`
                .replace(`{${"playerId"}}`, encodeURIComponent(String(playerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (query !== undefined) {
                for (const [key, value] of Object.entries(query)) {
                    localVarQueryParameter[key] = value;
                }
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} heroId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroSupply: async (heroId, options = {}) => {
            // verify required parameter 'heroId' is not null or undefined
            (0, common_1.assertParamExists)('getHeroSupply', 'heroId', heroId);
            const localVarPath = `/card/supply/{heroId}`
                .replace(`{${"heroId"}}`, encodeURIComponent(String(heroId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} playerId
         * @param {GetPlayerAllCardsDTO} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIndividualCardsByPlayerId: async (playerId, query, options = {}) => {
            // verify required parameter 'playerId' is not null or undefined
            (0, common_1.assertParamExists)('getIndividualCardsByPlayerId', 'playerId', playerId);
            const localVarPath = `/card/player-all-cards/{playerId}`
                .replace(`{${"playerId"}}`, encodeURIComponent(String(playerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (query !== undefined) {
                for (const [key, value] of Object.entries(query)) {
                    localVarQueryParameter[key] = value;
                }
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.CardApiAxiosParamCreator = CardApiAxiosParamCreator;
/**
 * CardApi - functional programming interface
 * @export
 */
const CardApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.CardApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {number} page Page number
         * @param {number} limit Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAllCards(page, limit, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAllCards(page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['CardApi.findAllCards']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCardById(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCardById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['CardApi.getCardById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {Array<string>} ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCardsByIdsForOpenPacks(ids, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCardsByIdsForOpenPacks(ids, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['CardApi.getCardsByIdsForOpenPacks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} playerId
         * @param {GetPlayerGroupedCardsDTO} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCardsByPlayerId(playerId, query, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCardsByPlayerId(playerId, query, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['CardApi.getCardsByPlayerId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} playerId
         * @param {GetCardsForDeckBuilderDTO} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeckBuilderCardsByPlayerId(playerId, query, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeckBuilderCardsByPlayerId(playerId, query, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['CardApi.getDeckBuilderCardsByPlayerId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} heroId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHeroSupply(heroId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHeroSupply(heroId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['CardApi.getHeroSupply']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} playerId
         * @param {GetPlayerAllCardsDTO} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIndividualCardsByPlayerId(playerId, query, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIndividualCardsByPlayerId(playerId, query, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['CardApi.getIndividualCardsByPlayerId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.CardApiFp = CardApiFp;
/**
 * CardApi - factory interface
 * @export
 */
const CardApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.CardApiFp)(configuration);
    return {
        /**
         *
         * @param {CardApiFindAllCardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllCards(requestParameters, options) {
            return localVarFp.findAllCards(requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {CardApiGetCardByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardById(requestParameters, options) {
            return localVarFp.getCardById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {CardApiGetCardsByIdsForOpenPacksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardsByIdsForOpenPacks(requestParameters, options) {
            return localVarFp.getCardsByIdsForOpenPacks(requestParameters.ids, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {CardApiGetCardsByPlayerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardsByPlayerId(requestParameters, options) {
            return localVarFp.getCardsByPlayerId(requestParameters.playerId, requestParameters.query, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {CardApiGetDeckBuilderCardsByPlayerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeckBuilderCardsByPlayerId(requestParameters, options) {
            return localVarFp.getDeckBuilderCardsByPlayerId(requestParameters.playerId, requestParameters.query, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {CardApiGetHeroSupplyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroSupply(requestParameters, options) {
            return localVarFp.getHeroSupply(requestParameters.heroId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {CardApiGetIndividualCardsByPlayerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIndividualCardsByPlayerId(requestParameters, options) {
            return localVarFp.getIndividualCardsByPlayerId(requestParameters.playerId, requestParameters.query, options).then((request) => request(axios, basePath));
        },
    };
};
exports.CardApiFactory = CardApiFactory;
/**
 * CardApi - object-oriented interface
 * @export
 * @class CardApi
 * @extends {BaseAPI}
 */
class CardApi extends base_1.BaseAPI {
    /**
     *
     * @param {CardApiFindAllCardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApi
     */
    findAllCards(requestParameters, options) {
        return (0, exports.CardApiFp)(this.configuration).findAllCards(requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {CardApiGetCardByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApi
     */
    getCardById(requestParameters, options) {
        return (0, exports.CardApiFp)(this.configuration).getCardById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {CardApiGetCardsByIdsForOpenPacksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApi
     */
    getCardsByIdsForOpenPacks(requestParameters, options) {
        return (0, exports.CardApiFp)(this.configuration).getCardsByIdsForOpenPacks(requestParameters.ids, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {CardApiGetCardsByPlayerIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApi
     */
    getCardsByPlayerId(requestParameters, options) {
        return (0, exports.CardApiFp)(this.configuration).getCardsByPlayerId(requestParameters.playerId, requestParameters.query, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {CardApiGetDeckBuilderCardsByPlayerIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApi
     */
    getDeckBuilderCardsByPlayerId(requestParameters, options) {
        return (0, exports.CardApiFp)(this.configuration).getDeckBuilderCardsByPlayerId(requestParameters.playerId, requestParameters.query, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {CardApiGetHeroSupplyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApi
     */
    getHeroSupply(requestParameters, options) {
        return (0, exports.CardApiFp)(this.configuration).getHeroSupply(requestParameters.heroId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {CardApiGetIndividualCardsByPlayerIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApi
     */
    getIndividualCardsByPlayerId(requestParameters, options) {
        return (0, exports.CardApiFp)(this.configuration).getIndividualCardsByPlayerId(requestParameters.playerId, requestParameters.query, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.CardApi = CardApi;
/**
 * HeroApi - axios parameter creator
 * @export
 */
const HeroApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get all heroes with pagination
         * @param {boolean} orderByStarsChange
         * @param {number} [limit] Limit the number of heroes returned
         * @param {number} [page] Page number for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllHeroes: async (orderByStarsChange, limit, page, options = {}) => {
            // verify required parameter 'orderByStarsChange' is not null or undefined
            (0, common_1.assertParamExists)('getAllHeroes', 'orderByStarsChange', orderByStarsChange);
            const localVarPath = `/hero/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (orderByStarsChange !== undefined) {
                localVarQueryParameter['order_by_stars_change'] = orderByStarsChange;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get hero by handle
         * @param {string} handle Handle of the hero
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroByHandle: async (handle, options = {}) => {
            // verify required parameter 'handle' is not null or undefined
            (0, common_1.assertParamExists)('getHeroByHandle', 'handle', handle);
            const localVarPath = `/hero/get-hero-by-handle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (handle !== undefined) {
                localVarQueryParameter['handle'] = handle;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get hero score history and tournament scores
         * @param {string} heroId ID of the hero
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroHistory: async (heroId, options = {}) => {
            // verify required parameter 'heroId' is not null or undefined
            (0, common_1.assertParamExists)('getHeroHistory', 'heroId', heroId);
            const localVarPath = `/hero/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (heroId !== undefined) {
                localVarQueryParameter['heroId'] = heroId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get hero holders
         * @param {GetHeroHoldersDTO} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroHolders: async (query, options = {}) => {
            const localVarPath = `/hero/holders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (query !== undefined) {
                for (const [key, value] of Object.entries(query)) {
                    localVarQueryParameter[key] = value;
                }
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get hero transactions
         * @param {GetTransactionDTO} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroTransactions: async (query, options = {}) => {
            const localVarPath = `/hero/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (query !== undefined) {
                for (const [key, value] of Object.entries(query)) {
                    localVarQueryParameter[key] = value;
                }
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get heroes by name or handle
         * @param {string} search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroesByHandleOrName: async (search, options = {}) => {
            // verify required parameter 'search' is not null or undefined
            (0, common_1.assertParamExists)('getHeroesByHandleOrName', 'search', search);
            const localVarPath = `/hero/search/name`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get heroes by IDs
         * @param {Array<string>} ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroesByIds: async (ids, options = {}) => {
            // verify required parameter 'ids' is not null or undefined
            (0, common_1.assertParamExists)('getHeroesByIds', 'ids', ids);
            const localVarPath = `/hero/search/ids`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.HeroApiAxiosParamCreator = HeroApiAxiosParamCreator;
/**
 * HeroApi - functional programming interface
 * @export
 */
const HeroApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.HeroApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get all heroes with pagination
         * @param {boolean} orderByStarsChange
         * @param {number} [limit] Limit the number of heroes returned
         * @param {number} [page] Page number for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllHeroes(orderByStarsChange, limit, page, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllHeroes(orderByStarsChange, limit, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['HeroApi.getAllHeroes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get hero by handle
         * @param {string} handle Handle of the hero
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHeroByHandle(handle, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHeroByHandle(handle, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['HeroApi.getHeroByHandle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get hero score history and tournament scores
         * @param {string} heroId ID of the hero
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHeroHistory(heroId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHeroHistory(heroId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['HeroApi.getHeroHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get hero holders
         * @param {GetHeroHoldersDTO} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHeroHolders(query, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHeroHolders(query, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['HeroApi.getHeroHolders']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get hero transactions
         * @param {GetTransactionDTO} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHeroTransactions(query, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHeroTransactions(query, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['HeroApi.getHeroTransactions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get heroes by name or handle
         * @param {string} search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHeroesByHandleOrName(search, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHeroesByHandleOrName(search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['HeroApi.getHeroesByHandleOrName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get heroes by IDs
         * @param {Array<string>} ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHeroesByIds(ids, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHeroesByIds(ids, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['HeroApi.getHeroesByIds']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.HeroApiFp = HeroApiFp;
/**
 * HeroApi - factory interface
 * @export
 */
const HeroApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.HeroApiFp)(configuration);
    return {
        /**
         *
         * @summary Get all heroes with pagination
         * @param {HeroApiGetAllHeroesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllHeroes(requestParameters, options) {
            return localVarFp.getAllHeroes(requestParameters.orderByStarsChange, requestParameters.limit, requestParameters.page, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get hero by handle
         * @param {HeroApiGetHeroByHandleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroByHandle(requestParameters, options) {
            return localVarFp.getHeroByHandle(requestParameters.handle, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get hero score history and tournament scores
         * @param {HeroApiGetHeroHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroHistory(requestParameters, options) {
            return localVarFp.getHeroHistory(requestParameters.heroId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get hero holders
         * @param {HeroApiGetHeroHoldersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroHolders(requestParameters = {}, options) {
            return localVarFp.getHeroHolders(requestParameters.query, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get hero transactions
         * @param {HeroApiGetHeroTransactionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroTransactions(requestParameters = {}, options) {
            return localVarFp.getHeroTransactions(requestParameters.query, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get heroes by name or handle
         * @param {HeroApiGetHeroesByHandleOrNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroesByHandleOrName(requestParameters, options) {
            return localVarFp.getHeroesByHandleOrName(requestParameters.search, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get heroes by IDs
         * @param {HeroApiGetHeroesByIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroesByIds(requestParameters, options) {
            return localVarFp.getHeroesByIds(requestParameters.ids, options).then((request) => request(axios, basePath));
        },
    };
};
exports.HeroApiFactory = HeroApiFactory;
/**
 * HeroApi - object-oriented interface
 * @export
 * @class HeroApi
 * @extends {BaseAPI}
 */
class HeroApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get all heroes with pagination
     * @param {HeroApiGetAllHeroesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeroApi
     */
    getAllHeroes(requestParameters, options) {
        return (0, exports.HeroApiFp)(this.configuration).getAllHeroes(requestParameters.orderByStarsChange, requestParameters.limit, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get hero by handle
     * @param {HeroApiGetHeroByHandleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeroApi
     */
    getHeroByHandle(requestParameters, options) {
        return (0, exports.HeroApiFp)(this.configuration).getHeroByHandle(requestParameters.handle, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get hero score history and tournament scores
     * @param {HeroApiGetHeroHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeroApi
     */
    getHeroHistory(requestParameters, options) {
        return (0, exports.HeroApiFp)(this.configuration).getHeroHistory(requestParameters.heroId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get hero holders
     * @param {HeroApiGetHeroHoldersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeroApi
     */
    getHeroHolders(requestParameters = {}, options) {
        return (0, exports.HeroApiFp)(this.configuration).getHeroHolders(requestParameters.query, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get hero transactions
     * @param {HeroApiGetHeroTransactionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeroApi
     */
    getHeroTransactions(requestParameters = {}, options) {
        return (0, exports.HeroApiFp)(this.configuration).getHeroTransactions(requestParameters.query, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get heroes by name or handle
     * @param {HeroApiGetHeroesByHandleOrNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeroApi
     */
    getHeroesByHandleOrName(requestParameters, options) {
        return (0, exports.HeroApiFp)(this.configuration).getHeroesByHandleOrName(requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get heroes by IDs
     * @param {HeroApiGetHeroesByIdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeroApi
     */
    getHeroesByIds(requestParameters, options) {
        return (0, exports.HeroApiFp)(this.configuration).getHeroesByIds(requestParameters.ids, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.HeroApi = HeroApi;
/**
 * MarketplaceApi - axios parameter creator
 * @export
 */
const MarketplaceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} heroId
         * @param {number} rarity
         * @param {boolean} includeOrderbook
         * @param {boolean} includePersonalBids
         * @param {boolean} includeHighestFiveBids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBidOrders: async (heroId, rarity, includeOrderbook, includePersonalBids, includeHighestFiveBids, options = {}) => {
            // verify required parameter 'heroId' is not null or undefined
            (0, common_1.assertParamExists)('getBidOrders', 'heroId', heroId);
            // verify required parameter 'rarity' is not null or undefined
            (0, common_1.assertParamExists)('getBidOrders', 'rarity', rarity);
            // verify required parameter 'includeOrderbook' is not null or undefined
            (0, common_1.assertParamExists)('getBidOrders', 'includeOrderbook', includeOrderbook);
            // verify required parameter 'includePersonalBids' is not null or undefined
            (0, common_1.assertParamExists)('getBidOrders', 'includePersonalBids', includePersonalBids);
            // verify required parameter 'includeHighestFiveBids' is not null or undefined
            (0, common_1.assertParamExists)('getBidOrders', 'includeHighestFiveBids', includeHighestFiveBids);
            const localVarPath = `/marketplace/bid-orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (heroId !== undefined) {
                localVarQueryParameter['heroId'] = heroId;
            }
            if (rarity !== undefined) {
                localVarQueryParameter['rarity'] = rarity;
            }
            if (includeOrderbook !== undefined) {
                localVarQueryParameter['includeOrderbook'] = includeOrderbook;
            }
            if (includePersonalBids !== undefined) {
                localVarQueryParameter['includePersonalBids'] = includePersonalBids;
            }
            if (includeHighestFiveBids !== undefined) {
                localVarQueryParameter['includeHighestFiveBids'] = includeHighestFiveBids;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} heroRarityIndex
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardMarketBasicInfo: async (heroRarityIndex, options = {}) => {
            // verify required parameter 'heroRarityIndex' is not null or undefined
            (0, common_1.assertParamExists)('getCardMarketBasicInfo', 'heroRarityIndex', heroRarityIndex);
            const localVarPath = `/marketplace/get-card-market-basic-info/{hero_rarity_index}`
                .replace(`{${"hero_rarity_index"}}`, encodeURIComponent(String(heroRarityIndex)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} heroId
         * @param {number} rarity
         * @param {string} order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardMarketInfo: async (heroId, rarity, order, options = {}) => {
            // verify required parameter 'heroId' is not null or undefined
            (0, common_1.assertParamExists)('getCardMarketInfo', 'heroId', heroId);
            // verify required parameter 'rarity' is not null or undefined
            (0, common_1.assertParamExists)('getCardMarketInfo', 'rarity', rarity);
            // verify required parameter 'order' is not null or undefined
            (0, common_1.assertParamExists)('getCardMarketInfo', 'order', order);
            const localVarPath = `/marketplace/card-market-info/{heroId}/{rarity}/{order}`
                .replace(`{${"heroId"}}`, encodeURIComponent(String(heroId)))
                .replace(`{${"rarity"}}`, encodeURIComponent(String(rarity)))
                .replace(`{${"order"}}`, encodeURIComponent(String(order)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get lowest price for hero rarity
         * @param {string} heroRarityIndex
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLowestPriceForHeroRarity: async (heroRarityIndex, options = {}) => {
            // verify required parameter 'heroRarityIndex' is not null or undefined
            (0, common_1.assertParamExists)('getLowestPriceForHeroRarity', 'heroRarityIndex', heroRarityIndex);
            const localVarPath = `/marketplace/lowest-price-for-hero-rarity/{heroRarityIndex}`
                .replace(`{${"heroRarityIndex"}}`, encodeURIComponent(String(heroRarityIndex)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get marketplace data
         * @param {GetAndFilterSellOrdersQueryDTO} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarketplaceData: async (query, options = {}) => {
            const localVarPath = `/marketplace/sell-orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (query !== undefined) {
                for (const [key, value] of Object.entries(query)) {
                    localVarQueryParameter[key] = value;
                }
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get sell orders by hero rarity index
         * @param {string} heroRarityIndex
         * @param {string} type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSellOrdersByHeroRarityIndex: async (heroRarityIndex, type, options = {}) => {
            // verify required parameter 'heroRarityIndex' is not null or undefined
            (0, common_1.assertParamExists)('getSellOrdersByHeroRarityIndex', 'heroRarityIndex', heroRarityIndex);
            // verify required parameter 'type' is not null or undefined
            (0, common_1.assertParamExists)('getSellOrdersByHeroRarityIndex', 'type', type);
            const localVarPath = `/marketplace/sell-orders/{heroRarityIndex}`
                .replace(`{${"heroRarityIndex"}}`, encodeURIComponent(String(heroRarityIndex)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.MarketplaceApiAxiosParamCreator = MarketplaceApiAxiosParamCreator;
/**
 * MarketplaceApi - functional programming interface
 * @export
 */
const MarketplaceApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.MarketplaceApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} heroId
         * @param {number} rarity
         * @param {boolean} includeOrderbook
         * @param {boolean} includePersonalBids
         * @param {boolean} includeHighestFiveBids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBidOrders(heroId, rarity, includeOrderbook, includePersonalBids, includeHighestFiveBids, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBidOrders(heroId, rarity, includeOrderbook, includePersonalBids, includeHighestFiveBids, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['MarketplaceApi.getBidOrders']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} heroRarityIndex
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCardMarketBasicInfo(heroRarityIndex, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCardMarketBasicInfo(heroRarityIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['MarketplaceApi.getCardMarketBasicInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} heroId
         * @param {number} rarity
         * @param {string} order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCardMarketInfo(heroId, rarity, order, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCardMarketInfo(heroId, rarity, order, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['MarketplaceApi.getCardMarketInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get lowest price for hero rarity
         * @param {string} heroRarityIndex
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLowestPriceForHeroRarity(heroRarityIndex, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLowestPriceForHeroRarity(heroRarityIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['MarketplaceApi.getLowestPriceForHeroRarity']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get marketplace data
         * @param {GetAndFilterSellOrdersQueryDTO} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMarketplaceData(query, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMarketplaceData(query, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['MarketplaceApi.getMarketplaceData']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get sell orders by hero rarity index
         * @param {string} heroRarityIndex
         * @param {string} type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSellOrdersByHeroRarityIndex(heroRarityIndex, type, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSellOrdersByHeroRarityIndex(heroRarityIndex, type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['MarketplaceApi.getSellOrdersByHeroRarityIndex']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.MarketplaceApiFp = MarketplaceApiFp;
/**
 * MarketplaceApi - factory interface
 * @export
 */
const MarketplaceApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.MarketplaceApiFp)(configuration);
    return {
        /**
         *
         * @param {MarketplaceApiGetBidOrdersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBidOrders(requestParameters, options) {
            return localVarFp.getBidOrders(requestParameters.heroId, requestParameters.rarity, requestParameters.includeOrderbook, requestParameters.includePersonalBids, requestParameters.includeHighestFiveBids, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {MarketplaceApiGetCardMarketBasicInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardMarketBasicInfo(requestParameters, options) {
            return localVarFp.getCardMarketBasicInfo(requestParameters.heroRarityIndex, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {MarketplaceApiGetCardMarketInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardMarketInfo(requestParameters, options) {
            return localVarFp.getCardMarketInfo(requestParameters.heroId, requestParameters.rarity, requestParameters.order, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get lowest price for hero rarity
         * @param {MarketplaceApiGetLowestPriceForHeroRarityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLowestPriceForHeroRarity(requestParameters, options) {
            return localVarFp.getLowestPriceForHeroRarity(requestParameters.heroRarityIndex, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get marketplace data
         * @param {MarketplaceApiGetMarketplaceDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarketplaceData(requestParameters = {}, options) {
            return localVarFp.getMarketplaceData(requestParameters.query, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get sell orders by hero rarity index
         * @param {MarketplaceApiGetSellOrdersByHeroRarityIndexRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSellOrdersByHeroRarityIndex(requestParameters, options) {
            return localVarFp.getSellOrdersByHeroRarityIndex(requestParameters.heroRarityIndex, requestParameters.type, options).then((request) => request(axios, basePath));
        },
    };
};
exports.MarketplaceApiFactory = MarketplaceApiFactory;
/**
 * MarketplaceApi - object-oriented interface
 * @export
 * @class MarketplaceApi
 * @extends {BaseAPI}
 */
class MarketplaceApi extends base_1.BaseAPI {
    /**
     *
     * @param {MarketplaceApiGetBidOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketplaceApi
     */
    getBidOrders(requestParameters, options) {
        return (0, exports.MarketplaceApiFp)(this.configuration).getBidOrders(requestParameters.heroId, requestParameters.rarity, requestParameters.includeOrderbook, requestParameters.includePersonalBids, requestParameters.includeHighestFiveBids, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {MarketplaceApiGetCardMarketBasicInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketplaceApi
     */
    getCardMarketBasicInfo(requestParameters, options) {
        return (0, exports.MarketplaceApiFp)(this.configuration).getCardMarketBasicInfo(requestParameters.heroRarityIndex, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {MarketplaceApiGetCardMarketInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketplaceApi
     */
    getCardMarketInfo(requestParameters, options) {
        return (0, exports.MarketplaceApiFp)(this.configuration).getCardMarketInfo(requestParameters.heroId, requestParameters.rarity, requestParameters.order, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get lowest price for hero rarity
     * @param {MarketplaceApiGetLowestPriceForHeroRarityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketplaceApi
     */
    getLowestPriceForHeroRarity(requestParameters, options) {
        return (0, exports.MarketplaceApiFp)(this.configuration).getLowestPriceForHeroRarity(requestParameters.heroRarityIndex, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get marketplace data
     * @param {MarketplaceApiGetMarketplaceDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketplaceApi
     */
    getMarketplaceData(requestParameters = {}, options) {
        return (0, exports.MarketplaceApiFp)(this.configuration).getMarketplaceData(requestParameters.query, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get sell orders by hero rarity index
     * @param {MarketplaceApiGetSellOrdersByHeroRarityIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketplaceApi
     */
    getSellOrdersByHeroRarityIndex(requestParameters, options) {
        return (0, exports.MarketplaceApiFp)(this.configuration).getSellOrdersByHeroRarityIndex(requestParameters.heroRarityIndex, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.MarketplaceApi = MarketplaceApi;
/**
 * PlayerApi - axios parameter creator
 * @export
 */
const PlayerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Search players by name, address or handle
         * @param {string} search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPlayersBySearch: async (search, options = {}) => {
            // verify required parameter 'search' is not null or undefined
            (0, common_1.assertParamExists)('findPlayersBySearch', 'search', search);
            const localVarPath = `/player/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all activity for a player
         * @param {string} playerId
         * @param {GetPlayerActivityDto} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivityForPlayer: async (playerId, query, options = {}) => {
            // verify required parameter 'playerId' is not null or undefined
            (0, common_1.assertParamExists)('getActivityForPlayer', 'playerId', playerId);
            const localVarPath = `/player/activity/{playerId}`
                .replace(`{${"playerId"}}`, encodeURIComponent(String(playerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (query !== undefined) {
                for (const [key, value] of Object.entries(query)) {
                    localVarQueryParameter[key] = value;
                }
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all paginated players
         * @param {number} page Page number
         * @param {number} limit Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPlayersWithPagination: async (page, limit, options = {}) => {
            // verify required parameter 'page' is not null or undefined
            (0, common_1.assertParamExists)('getAllPlayersWithPagination', 'page', page);
            // verify required parameter 'limit' is not null or undefined
            (0, common_1.assertParamExists)('getAllPlayersWithPagination', 'limit', limit);
            const localVarPath = `/player/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all bids for a player
         * @param {string} playerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBidsForPlayerId: async (playerId, options = {}) => {
            // verify required parameter 'playerId' is not null or undefined
            (0, common_1.assertParamExists)('getBidsForPlayerId', 'playerId', playerId);
            const localVarPath = `/player/bids/{playerId}`
                .replace(`{${"playerId"}}`, encodeURIComponent(String(playerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all bids for a player for a specific card
         * @param {string} playerId
         * @param {string} heroId
         * @param {number} rarity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBidsForPlayerIdAndHeroIdAndRarity: async (playerId, heroId, rarity, options = {}) => {
            // verify required parameter 'playerId' is not null or undefined
            (0, common_1.assertParamExists)('getBidsForPlayerIdAndHeroIdAndRarity', 'playerId', playerId);
            // verify required parameter 'heroId' is not null or undefined
            (0, common_1.assertParamExists)('getBidsForPlayerIdAndHeroIdAndRarity', 'heroId', heroId);
            // verify required parameter 'rarity' is not null or undefined
            (0, common_1.assertParamExists)('getBidsForPlayerIdAndHeroIdAndRarity', 'rarity', rarity);
            const localVarPath = `/player/bids/{playerId}/{heroId}/{rarity}`
                .replace(`{${"playerId"}}`, encodeURIComponent(String(playerId)))
                .replace(`{${"heroId"}}`, encodeURIComponent(String(heroId)))
                .replace(`{${"rarity"}}`, encodeURIComponent(String(rarity)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get game stats for a player
         * @param {string} playerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGameStatsForPlayer: async (playerId, options = {}) => {
            // verify required parameter 'playerId' is not null or undefined
            (0, common_1.assertParamExists)('getGameStatsForPlayer', 'playerId', playerId);
            const localVarPath = `/player/game-stats/{playerId}`
                .replace(`{${"playerId"}}`, encodeURIComponent(String(playerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all listings for a player
         * @param {string} playerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListingsForPlayer: async (playerId, options = {}) => {
            // verify required parameter 'playerId' is not null or undefined
            (0, common_1.assertParamExists)('getListingsForPlayer', 'playerId', playerId);
            const localVarPath = `/player/listings/{playerId}`
                .replace(`{${"playerId"}}`, encodeURIComponent(String(playerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get player basic data including portfolio and cards
         * @param {string} playerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerBasicData: async (playerId, options = {}) => {
            // verify required parameter 'playerId' is not null or undefined
            (0, common_1.assertParamExists)('getPlayerBasicData', 'playerId', playerId);
            const localVarPath = `/player/basic-data/{playerId}`
                .replace(`{${"playerId"}}`, encodeURIComponent(String(playerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.PlayerApiAxiosParamCreator = PlayerApiAxiosParamCreator;
/**
 * PlayerApi - functional programming interface
 * @export
 */
const PlayerApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PlayerApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Search players by name, address or handle
         * @param {string} search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findPlayersBySearch(search, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findPlayersBySearch(search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['PlayerApi.findPlayersBySearch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get all activity for a player
         * @param {string} playerId
         * @param {GetPlayerActivityDto} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActivityForPlayer(playerId, query, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActivityForPlayer(playerId, query, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['PlayerApi.getActivityForPlayer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get all paginated players
         * @param {number} page Page number
         * @param {number} limit Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPlayersWithPagination(page, limit, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPlayersWithPagination(page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['PlayerApi.getAllPlayersWithPagination']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get all bids for a player
         * @param {string} playerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBidsForPlayerId(playerId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBidsForPlayerId(playerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['PlayerApi.getBidsForPlayerId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get all bids for a player for a specific card
         * @param {string} playerId
         * @param {string} heroId
         * @param {number} rarity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBidsForPlayerIdAndHeroIdAndRarity(playerId, heroId, rarity, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBidsForPlayerIdAndHeroIdAndRarity(playerId, heroId, rarity, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['PlayerApi.getBidsForPlayerIdAndHeroIdAndRarity']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get game stats for a player
         * @param {string} playerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGameStatsForPlayer(playerId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGameStatsForPlayer(playerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['PlayerApi.getGameStatsForPlayer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get all listings for a player
         * @param {string} playerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListingsForPlayer(playerId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListingsForPlayer(playerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['PlayerApi.getListingsForPlayer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get player basic data including portfolio and cards
         * @param {string} playerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlayerBasicData(playerId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlayerBasicData(playerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['PlayerApi.getPlayerBasicData']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.PlayerApiFp = PlayerApiFp;
/**
 * PlayerApi - factory interface
 * @export
 */
const PlayerApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PlayerApiFp)(configuration);
    return {
        /**
         *
         * @summary Search players by name, address or handle
         * @param {PlayerApiFindPlayersBySearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPlayersBySearch(requestParameters, options) {
            return localVarFp.findPlayersBySearch(requestParameters.search, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all activity for a player
         * @param {PlayerApiGetActivityForPlayerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivityForPlayer(requestParameters, options) {
            return localVarFp.getActivityForPlayer(requestParameters.playerId, requestParameters.query, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all paginated players
         * @param {PlayerApiGetAllPlayersWithPaginationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPlayersWithPagination(requestParameters, options) {
            return localVarFp.getAllPlayersWithPagination(requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all bids for a player
         * @param {PlayerApiGetBidsForPlayerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBidsForPlayerId(requestParameters, options) {
            return localVarFp.getBidsForPlayerId(requestParameters.playerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all bids for a player for a specific card
         * @param {PlayerApiGetBidsForPlayerIdAndHeroIdAndRarityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBidsForPlayerIdAndHeroIdAndRarity(requestParameters, options) {
            return localVarFp.getBidsForPlayerIdAndHeroIdAndRarity(requestParameters.playerId, requestParameters.heroId, requestParameters.rarity, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get game stats for a player
         * @param {PlayerApiGetGameStatsForPlayerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGameStatsForPlayer(requestParameters, options) {
            return localVarFp.getGameStatsForPlayer(requestParameters.playerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all listings for a player
         * @param {PlayerApiGetListingsForPlayerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListingsForPlayer(requestParameters, options) {
            return localVarFp.getListingsForPlayer(requestParameters.playerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get player basic data including portfolio and cards
         * @param {PlayerApiGetPlayerBasicDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerBasicData(requestParameters, options) {
            return localVarFp.getPlayerBasicData(requestParameters.playerId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.PlayerApiFactory = PlayerApiFactory;
/**
 * PlayerApi - object-oriented interface
 * @export
 * @class PlayerApi
 * @extends {BaseAPI}
 */
class PlayerApi extends base_1.BaseAPI {
    /**
     *
     * @summary Search players by name, address or handle
     * @param {PlayerApiFindPlayersBySearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    findPlayersBySearch(requestParameters, options) {
        return (0, exports.PlayerApiFp)(this.configuration).findPlayersBySearch(requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get all activity for a player
     * @param {PlayerApiGetActivityForPlayerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    getActivityForPlayer(requestParameters, options) {
        return (0, exports.PlayerApiFp)(this.configuration).getActivityForPlayer(requestParameters.playerId, requestParameters.query, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get all paginated players
     * @param {PlayerApiGetAllPlayersWithPaginationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    getAllPlayersWithPagination(requestParameters, options) {
        return (0, exports.PlayerApiFp)(this.configuration).getAllPlayersWithPagination(requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get all bids for a player
     * @param {PlayerApiGetBidsForPlayerIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    getBidsForPlayerId(requestParameters, options) {
        return (0, exports.PlayerApiFp)(this.configuration).getBidsForPlayerId(requestParameters.playerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get all bids for a player for a specific card
     * @param {PlayerApiGetBidsForPlayerIdAndHeroIdAndRarityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    getBidsForPlayerIdAndHeroIdAndRarity(requestParameters, options) {
        return (0, exports.PlayerApiFp)(this.configuration).getBidsForPlayerIdAndHeroIdAndRarity(requestParameters.playerId, requestParameters.heroId, requestParameters.rarity, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get game stats for a player
     * @param {PlayerApiGetGameStatsForPlayerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    getGameStatsForPlayer(requestParameters, options) {
        return (0, exports.PlayerApiFp)(this.configuration).getGameStatsForPlayer(requestParameters.playerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get all listings for a player
     * @param {PlayerApiGetListingsForPlayerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    getListingsForPlayer(requestParameters, options) {
        return (0, exports.PlayerApiFp)(this.configuration).getListingsForPlayer(requestParameters.playerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get player basic data including portfolio and cards
     * @param {PlayerApiGetPlayerBasicDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    getPlayerBasicData(requestParameters, options) {
        return (0, exports.PlayerApiFp)(this.configuration).getPlayerBasicData(requestParameters.playerId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PlayerApi = PlayerApi;
/**
 * TacticsApi - axios parameter creator
 * @export
 */
const TacticsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get the total number of entries for a player
         * @param {string} playerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countEntriesByPlayerId: async (playerId, options = {}) => {
            // verify required parameter 'playerId' is not null or undefined
            (0, common_1.assertParamExists)('countEntriesByPlayerId', 'playerId', playerId);
            const localVarPath = `/tactics/entry/total/{playerId}`
                .replace(`{${"playerId"}}`, encodeURIComponent(String(playerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get the total number of tickets for a player
         * @param {string} playerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countTicketsByPlayerId: async (playerId, options = {}) => {
            // verify required parameter 'playerId' is not null or undefined
            (0, common_1.assertParamExists)('countTicketsByPlayerId', 'playerId', playerId);
            const localVarPath = `/tactics/tickets/count/{playerId}`
                .replace(`{${"playerId"}}`, encodeURIComponent(String(playerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all tactics
         * @param {GetTacticsQueryDTO} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (query, options = {}) => {
            const localVarPath = `/tactics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (query !== undefined) {
                for (const [key, value] of Object.entries(query)) {
                    localVarQueryParameter[key] = value;
                }
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get tactic by id
         * @param {string} id
         * @param {GetTacticByIdQueryDTO} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id, query, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getById', 'id', id);
            const localVarPath = `/tactics/byId/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (query !== undefined) {
                for (const [key, value] of Object.entries(query)) {
                    localVarQueryParameter[key] = value;
                }
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get heros scores for a given tactic
         * @param {string} tacticId
         * @param {GetHeroScoresQueryDTO} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroScoresByTacticId: async (tacticId, query, options = {}) => {
            // verify required parameter 'tacticId' is not null or undefined
            (0, common_1.assertParamExists)('getHeroScoresByTacticId', 'tacticId', tacticId);
            const localVarPath = `/tactics/hero-scores/{tacticId}`
                .replace(`{${"tacticId"}}`, encodeURIComponent(String(tacticId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (query !== undefined) {
                for (const [key, value] of Object.entries(query)) {
                    localVarQueryParameter[key] = value;
                }
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get the total gains of a player
         * @param {string} playerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTotalGains: async (playerId, options = {}) => {
            // verify required parameter 'playerId' is not null or undefined
            (0, common_1.assertParamExists)('getTotalGains', 'playerId', playerId);
            const localVarPath = `/tactics/tickets/total-gains/{playerId}`
                .replace(`{${"playerId"}}`, encodeURIComponent(String(playerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.TacticsApiAxiosParamCreator = TacticsApiAxiosParamCreator;
/**
 * TacticsApi - functional programming interface
 * @export
 */
const TacticsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.TacticsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get the total number of entries for a player
         * @param {string} playerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countEntriesByPlayerId(playerId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countEntriesByPlayerId(playerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['TacticsApi.countEntriesByPlayerId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get the total number of tickets for a player
         * @param {string} playerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countTicketsByPlayerId(playerId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countTicketsByPlayerId(playerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['TacticsApi.countTicketsByPlayerId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get all tactics
         * @param {GetTacticsQueryDTO} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(query, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(query, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['TacticsApi.get']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get tactic by id
         * @param {string} id
         * @param {GetTacticByIdQueryDTO} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(id, query, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(id, query, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['TacticsApi.getById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get heros scores for a given tactic
         * @param {string} tacticId
         * @param {GetHeroScoresQueryDTO} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHeroScoresByTacticId(tacticId, query, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHeroScoresByTacticId(tacticId, query, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['TacticsApi.getHeroScoresByTacticId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get the total gains of a player
         * @param {string} playerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTotalGains(playerId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTotalGains(playerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['TacticsApi.getTotalGains']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.TacticsApiFp = TacticsApiFp;
/**
 * TacticsApi - factory interface
 * @export
 */
const TacticsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.TacticsApiFp)(configuration);
    return {
        /**
         *
         * @summary Get the total number of entries for a player
         * @param {TacticsApiCountEntriesByPlayerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countEntriesByPlayerId(requestParameters, options) {
            return localVarFp.countEntriesByPlayerId(requestParameters.playerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get the total number of tickets for a player
         * @param {TacticsApiCountTicketsByPlayerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countTicketsByPlayerId(requestParameters, options) {
            return localVarFp.countTicketsByPlayerId(requestParameters.playerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all tactics
         * @param {TacticsApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters = {}, options) {
            return localVarFp.get(requestParameters.query, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get tactic by id
         * @param {TacticsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters, options) {
            return localVarFp.getById(requestParameters.id, requestParameters.query, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get heros scores for a given tactic
         * @param {TacticsApiGetHeroScoresByTacticIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroScoresByTacticId(requestParameters, options) {
            return localVarFp.getHeroScoresByTacticId(requestParameters.tacticId, requestParameters.query, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get the total gains of a player
         * @param {TacticsApiGetTotalGainsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTotalGains(requestParameters, options) {
            return localVarFp.getTotalGains(requestParameters.playerId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.TacticsApiFactory = TacticsApiFactory;
/**
 * TacticsApi - object-oriented interface
 * @export
 * @class TacticsApi
 * @extends {BaseAPI}
 */
class TacticsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get the total number of entries for a player
     * @param {TacticsApiCountEntriesByPlayerIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TacticsApi
     */
    countEntriesByPlayerId(requestParameters, options) {
        return (0, exports.TacticsApiFp)(this.configuration).countEntriesByPlayerId(requestParameters.playerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get the total number of tickets for a player
     * @param {TacticsApiCountTicketsByPlayerIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TacticsApi
     */
    countTicketsByPlayerId(requestParameters, options) {
        return (0, exports.TacticsApiFp)(this.configuration).countTicketsByPlayerId(requestParameters.playerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get all tactics
     * @param {TacticsApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TacticsApi
     */
    get(requestParameters = {}, options) {
        return (0, exports.TacticsApiFp)(this.configuration).get(requestParameters.query, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get tactic by id
     * @param {TacticsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TacticsApi
     */
    getById(requestParameters, options) {
        return (0, exports.TacticsApiFp)(this.configuration).getById(requestParameters.id, requestParameters.query, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get heros scores for a given tactic
     * @param {TacticsApiGetHeroScoresByTacticIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TacticsApi
     */
    getHeroScoresByTacticId(requestParameters, options) {
        return (0, exports.TacticsApiFp)(this.configuration).getHeroScoresByTacticId(requestParameters.tacticId, requestParameters.query, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get the total gains of a player
     * @param {TacticsApiGetTotalGainsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TacticsApi
     */
    getTotalGains(requestParameters, options) {
        return (0, exports.TacticsApiFp)(this.configuration).getTotalGains(requestParameters.playerId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.TacticsApi = TacticsApi;
/**
 * TournamentsApi - axios parameter creator
 * @export
 */
const TournamentsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Count registered decks by player ID
         * @param {string} playerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countRegisteredDecksByPlayerId: async (playerId, options = {}) => {
            // verify required parameter 'playerId' is not null or undefined
            (0, common_1.assertParamExists)('countRegisteredDecksByPlayerId', 'playerId', playerId);
            const localVarPath = `/tournaments/count-registered-decks/{playerId}`
                .replace(`{${"playerId"}}`, encodeURIComponent(String(playerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} playerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentDecksAndWinnings: async (playerId, options = {}) => {
            // verify required parameter 'playerId' is not null or undefined
            (0, common_1.assertParamExists)('getCurrentDecksAndWinnings', 'playerId', playerId);
            const localVarPath = `/tournaments/currentDecksAndWinnings/{playerId}`
                .replace(`{${"playerId"}}`, encodeURIComponent(String(playerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} tournamentNumber
         * @param {string} [startRank]
         * @param {string} [endRank]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroProgressOverTournament: async (tournamentNumber, startRank, endRank, options = {}) => {
            // verify required parameter 'tournamentNumber' is not null or undefined
            (0, common_1.assertParamExists)('getHeroProgressOverTournament', 'tournamentNumber', tournamentNumber);
            const localVarPath = `/tournaments/hero-progress-over-tournament/{tournamentNumber}`
                .replace(`{${"tournamentNumber"}}`, encodeURIComponent(String(tournamentNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (startRank !== undefined) {
                localVarQueryParameter['start_rank'] = startRank;
            }
            if (endRank !== undefined) {
                localVarQueryParameter['end_rank'] = endRank;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} tournamentNumber
         * @param {string} playerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricalDecksAndWinnings: async (tournamentNumber, playerId, options = {}) => {
            // verify required parameter 'tournamentNumber' is not null or undefined
            (0, common_1.assertParamExists)('getHistoricalDecksAndWinnings', 'tournamentNumber', tournamentNumber);
            // verify required parameter 'playerId' is not null or undefined
            (0, common_1.assertParamExists)('getHistoricalDecksAndWinnings', 'playerId', playerId);
            const localVarPath = `/tournaments/historicalDecksAndWinnings/{tournamentNumber}/{playerId}`
                .replace(`{${"tournamentNumber"}}`, encodeURIComponent(String(tournamentNumber)))
                .replace(`{${"playerId"}}`, encodeURIComponent(String(playerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get player decks
         * @param {string} playerId
         * @param {string} tournamentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerDecksByTournamentIdAndPlayerId: async (playerId, tournamentId, options = {}) => {
            // verify required parameter 'playerId' is not null or undefined
            (0, common_1.assertParamExists)('getPlayerDecksByTournamentIdAndPlayerId', 'playerId', playerId);
            // verify required parameter 'tournamentId' is not null or undefined
            (0, common_1.assertParamExists)('getPlayerDecksByTournamentIdAndPlayerId', 'tournamentId', tournamentId);
            const localVarPath = `/tournaments/player-decks/{playerId}/{tournamentId}`
                .replace(`{${"playerId"}}`, encodeURIComponent(String(playerId)))
                .replace(`{${"tournamentId"}}`, encodeURIComponent(String(tournamentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} tournamentId
         * @param {GetAllPlayersDTO} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayersInTournament: async (tournamentId, query, options = {}) => {
            // verify required parameter 'tournamentId' is not null or undefined
            (0, common_1.assertParamExists)('getPlayersInTournament', 'tournamentId', tournamentId);
            const localVarPath = `/tournaments/players/{tournamentId}`
                .replace(`{${"tournamentId"}}`, encodeURIComponent(String(tournamentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (query !== undefined) {
                for (const [key, value] of Object.entries(query)) {
                    localVarQueryParameter[key] = value;
                }
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all summary
         * @param {string} tournamentNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSummaryOfTournamentNumber: async (tournamentNumber, options = {}) => {
            // verify required parameter 'tournamentNumber' is not null or undefined
            (0, common_1.assertParamExists)('getSummaryOfTournamentNumber', 'tournamentNumber', tournamentNumber);
            const localVarPath = `/tournaments/summary/{tournamentNumber}`
                .replace(`{${"tournamentNumber"}}`, encodeURIComponent(String(tournamentNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get tournament by ID
         * @param {string} tournamentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTournamentById: async (tournamentId, options = {}) => {
            // verify required parameter 'tournamentId' is not null or undefined
            (0, common_1.assertParamExists)('getTournamentById', 'tournamentId', tournamentId);
            const localVarPath = `/tournaments/byId/{tournamentId}`
                .replace(`{${"tournamentId"}}`, encodeURIComponent(String(tournamentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} playerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRegisteredTournaments: async (playerId, options = {}) => {
            // verify required parameter 'playerId' is not null or undefined
            (0, common_1.assertParamExists)('getUserRegisteredTournaments', 'playerId', playerId);
            const localVarPath = `/tournaments/user-registered-tournaments/{playerId}`
                .replace(`{${"playerId"}}`, encodeURIComponent(String(playerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.TournamentsApiAxiosParamCreator = TournamentsApiAxiosParamCreator;
/**
 * TournamentsApi - functional programming interface
 * @export
 */
const TournamentsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.TournamentsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Count registered decks by player ID
         * @param {string} playerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countRegisteredDecksByPlayerId(playerId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countRegisteredDecksByPlayerId(playerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['TournamentsApi.countRegisteredDecksByPlayerId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} playerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentDecksAndWinnings(playerId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentDecksAndWinnings(playerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['TournamentsApi.getCurrentDecksAndWinnings']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} tournamentNumber
         * @param {string} [startRank]
         * @param {string} [endRank]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHeroProgressOverTournament(tournamentNumber, startRank, endRank, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHeroProgressOverTournament(tournamentNumber, startRank, endRank, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['TournamentsApi.getHeroProgressOverTournament']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} tournamentNumber
         * @param {string} playerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricalDecksAndWinnings(tournamentNumber, playerId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHistoricalDecksAndWinnings(tournamentNumber, playerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['TournamentsApi.getHistoricalDecksAndWinnings']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get player decks
         * @param {string} playerId
         * @param {string} tournamentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlayerDecksByTournamentIdAndPlayerId(playerId, tournamentId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlayerDecksByTournamentIdAndPlayerId(playerId, tournamentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['TournamentsApi.getPlayerDecksByTournamentIdAndPlayerId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} tournamentId
         * @param {GetAllPlayersDTO} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlayersInTournament(tournamentId, query, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlayersInTournament(tournamentId, query, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['TournamentsApi.getPlayersInTournament']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get all summary
         * @param {string} tournamentNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSummaryOfTournamentNumber(tournamentNumber, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSummaryOfTournamentNumber(tournamentNumber, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['TournamentsApi.getSummaryOfTournamentNumber']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get tournament by ID
         * @param {string} tournamentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTournamentById(tournamentId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTournamentById(tournamentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['TournamentsApi.getTournamentById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} playerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserRegisteredTournaments(playerId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserRegisteredTournaments(playerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['TournamentsApi.getUserRegisteredTournaments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.TournamentsApiFp = TournamentsApiFp;
/**
 * TournamentsApi - factory interface
 * @export
 */
const TournamentsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.TournamentsApiFp)(configuration);
    return {
        /**
         *
         * @summary Count registered decks by player ID
         * @param {TournamentsApiCountRegisteredDecksByPlayerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countRegisteredDecksByPlayerId(requestParameters, options) {
            return localVarFp.countRegisteredDecksByPlayerId(requestParameters.playerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {TournamentsApiGetCurrentDecksAndWinningsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentDecksAndWinnings(requestParameters, options) {
            return localVarFp.getCurrentDecksAndWinnings(requestParameters.playerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {TournamentsApiGetHeroProgressOverTournamentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroProgressOverTournament(requestParameters, options) {
            return localVarFp.getHeroProgressOverTournament(requestParameters.tournamentNumber, requestParameters.startRank, requestParameters.endRank, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {TournamentsApiGetHistoricalDecksAndWinningsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricalDecksAndWinnings(requestParameters, options) {
            return localVarFp.getHistoricalDecksAndWinnings(requestParameters.tournamentNumber, requestParameters.playerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get player decks
         * @param {TournamentsApiGetPlayerDecksByTournamentIdAndPlayerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerDecksByTournamentIdAndPlayerId(requestParameters, options) {
            return localVarFp.getPlayerDecksByTournamentIdAndPlayerId(requestParameters.playerId, requestParameters.tournamentId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {TournamentsApiGetPlayersInTournamentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayersInTournament(requestParameters, options) {
            return localVarFp.getPlayersInTournament(requestParameters.tournamentId, requestParameters.query, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all summary
         * @param {TournamentsApiGetSummaryOfTournamentNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSummaryOfTournamentNumber(requestParameters, options) {
            return localVarFp.getSummaryOfTournamentNumber(requestParameters.tournamentNumber, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get tournament by ID
         * @param {TournamentsApiGetTournamentByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTournamentById(requestParameters, options) {
            return localVarFp.getTournamentById(requestParameters.tournamentId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {TournamentsApiGetUserRegisteredTournamentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRegisteredTournaments(requestParameters, options) {
            return localVarFp.getUserRegisteredTournaments(requestParameters.playerId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.TournamentsApiFactory = TournamentsApiFactory;
/**
 * TournamentsApi - object-oriented interface
 * @export
 * @class TournamentsApi
 * @extends {BaseAPI}
 */
class TournamentsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Count registered decks by player ID
     * @param {TournamentsApiCountRegisteredDecksByPlayerIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentsApi
     */
    countRegisteredDecksByPlayerId(requestParameters, options) {
        return (0, exports.TournamentsApiFp)(this.configuration).countRegisteredDecksByPlayerId(requestParameters.playerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {TournamentsApiGetCurrentDecksAndWinningsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentsApi
     */
    getCurrentDecksAndWinnings(requestParameters, options) {
        return (0, exports.TournamentsApiFp)(this.configuration).getCurrentDecksAndWinnings(requestParameters.playerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {TournamentsApiGetHeroProgressOverTournamentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentsApi
     */
    getHeroProgressOverTournament(requestParameters, options) {
        return (0, exports.TournamentsApiFp)(this.configuration).getHeroProgressOverTournament(requestParameters.tournamentNumber, requestParameters.startRank, requestParameters.endRank, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {TournamentsApiGetHistoricalDecksAndWinningsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentsApi
     */
    getHistoricalDecksAndWinnings(requestParameters, options) {
        return (0, exports.TournamentsApiFp)(this.configuration).getHistoricalDecksAndWinnings(requestParameters.tournamentNumber, requestParameters.playerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get player decks
     * @param {TournamentsApiGetPlayerDecksByTournamentIdAndPlayerIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentsApi
     */
    getPlayerDecksByTournamentIdAndPlayerId(requestParameters, options) {
        return (0, exports.TournamentsApiFp)(this.configuration).getPlayerDecksByTournamentIdAndPlayerId(requestParameters.playerId, requestParameters.tournamentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {TournamentsApiGetPlayersInTournamentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentsApi
     */
    getPlayersInTournament(requestParameters, options) {
        return (0, exports.TournamentsApiFp)(this.configuration).getPlayersInTournament(requestParameters.tournamentId, requestParameters.query, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get all summary
     * @param {TournamentsApiGetSummaryOfTournamentNumberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentsApi
     */
    getSummaryOfTournamentNumber(requestParameters, options) {
        return (0, exports.TournamentsApiFp)(this.configuration).getSummaryOfTournamentNumber(requestParameters.tournamentNumber, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get tournament by ID
     * @param {TournamentsApiGetTournamentByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentsApi
     */
    getTournamentById(requestParameters, options) {
        return (0, exports.TournamentsApiFp)(this.configuration).getTournamentById(requestParameters.tournamentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {TournamentsApiGetUserRegisteredTournamentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentsApi
     */
    getUserRegisteredTournaments(requestParameters, options) {
        return (0, exports.TournamentsApiFp)(this.configuration).getUserRegisteredTournaments(requestParameters.playerId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.TournamentsApi = TournamentsApi;
/**
 * VotingApi - axios parameter creator
 * @export
 */
const VotingApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get all voting configurations
         * @param {GetVoteConfigQueryDTO} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigs: async (query, options = {}) => {
            const localVarPath = `/vote/configs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (query !== undefined) {
                for (const [key, value] of Object.entries(query)) {
                    localVarQueryParameter[key] = value;
                }
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query to get vote of the current user
         * @param {string} voteConfigId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyVote: async (voteConfigId, options = {}) => {
            // verify required parameter 'voteConfigId' is not null or undefined
            (0, common_1.assertParamExists)('getMyVote', 'voteConfigId', voteConfigId);
            const localVarPath = `/vote/my-vote/{vote_config_id}`
                .replace(`{${"vote_config_id"}}`, encodeURIComponent(String(voteConfigId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all vote by hero
         * @param {string} voteConfigId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVotesByHero: async (voteConfigId, options = {}) => {
            // verify required parameter 'voteConfigId' is not null or undefined
            (0, common_1.assertParamExists)('getVotesByHero', 'voteConfigId', voteConfigId);
            const localVarPath = `/vote/heros/{vote_config_id}`
                .replace(`{${"vote_config_id"}}`, encodeURIComponent(String(voteConfigId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
                withCredentials: configuration?.withCredentials
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.VotingApiAxiosParamCreator = VotingApiAxiosParamCreator;
/**
 * VotingApi - functional programming interface
 * @export
 */
const VotingApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.VotingApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get all voting configurations
         * @param {GetVoteConfigQueryDTO} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConfigs(query, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConfigs(query, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['VotingApi.getConfigs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Query to get vote of the current user
         * @param {string} voteConfigId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyVote(voteConfigId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyVote(voteConfigId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['VotingApi.getMyVote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get all vote by hero
         * @param {string} voteConfigId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVotesByHero(voteConfigId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVotesByHero(voteConfigId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['VotingApi.getVotesByHero']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.VotingApiFp = VotingApiFp;
/**
 * VotingApi - factory interface
 * @export
 */
const VotingApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.VotingApiFp)(configuration);
    return {
        /**
         *
         * @summary Get all voting configurations
         * @param {VotingApiGetConfigsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigs(requestParameters = {}, options) {
            return localVarFp.getConfigs(requestParameters.query, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Query to get vote of the current user
         * @param {VotingApiGetMyVoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyVote(requestParameters, options) {
            return localVarFp.getMyVote(requestParameters.voteConfigId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all vote by hero
         * @param {VotingApiGetVotesByHeroRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVotesByHero(requestParameters, options) {
            return localVarFp.getVotesByHero(requestParameters.voteConfigId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.VotingApiFactory = VotingApiFactory;
/**
 * VotingApi - object-oriented interface
 * @export
 * @class VotingApi
 * @extends {BaseAPI}
 */
class VotingApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get all voting configurations
     * @param {VotingApiGetConfigsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VotingApi
     */
    getConfigs(requestParameters = {}, options) {
        return (0, exports.VotingApiFp)(this.configuration).getConfigs(requestParameters.query, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Query to get vote of the current user
     * @param {VotingApiGetMyVoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VotingApi
     */
    getMyVote(requestParameters, options) {
        return (0, exports.VotingApiFp)(this.configuration).getMyVote(requestParameters.voteConfigId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get all vote by hero
     * @param {VotingApiGetVotesByHeroRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VotingApi
     */
    getVotesByHero(requestParameters, options) {
        return (0, exports.VotingApiFp)(this.configuration).getVotesByHero(requestParameters.voteConfigId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.VotingApi = VotingApi;
class Client extends base_1.BaseAPI {
    card;
    hero;
    marketplace;
    player;
    tactics;
    tournaments;
    voting;
    config;
    static instance = null;
    constructor(config) {
        super(config);
        this.config = config;
        this.card = new CardApi(config);
        this.hero = new HeroApi(config);
        this.marketplace = new MarketplaceApi(config);
        this.player = new PlayerApi(config);
        this.tactics = new TacticsApi(config);
        this.tournaments = new TournamentsApi(config);
        this.voting = new VotingApi(config);
        return new Proxy(this, {
            get(target, prop, receiver) {
                const value = target[prop];
                if (typeof value === 'function') {
                    return value.bind(target);
                }
                return value;
            }
        });
    }
    static getInstance(config) {
        if (!Client.instance) {
            Client.instance = new Client(config);
        }
        return Client.instance;
    }
    resetToken(newToken) {
        let token;
        if (newToken) {
            // Use provided token
            token = newToken;
            // Update the config's accessToken
            this.config.accessToken = newToken;
        }
        else {
            token =
                typeof this.config.accessToken === 'function'
                    ? this.config.accessToken()
                    : this.config.accessToken;
        }
        const newConfig = { ...this.config, accessToken: token };
        Client.instance = new Client(newConfig);
        Object.assign(this, Client.instance);
    }
}
exports.Client = Client;
