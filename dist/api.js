"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Fantasy API | PRO
 * The Fantasy API documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HeroApiAxiosParamCreator = exports.CardApi = exports.CardApiFactory = exports.CardApiFp = exports.CardApiAxiosParamCreator = exports.TrendingHeroDTOTrendingReasonEnum = exports.TacticsOrderByDTOUpdatedAtEnum = exports.TacticsOrderByDTOCreatedAtEnum = exports.TacticsOrderByDTOVisibleEnum = exports.TacticsOrderByDTORegistrationOpennedEnum = exports.TacticsOrderByDTOIsRewardsProcessedEnum = exports.TacticsOrderByDTOEthPriceEnum = exports.TacticsOrderByDTOWalletAddressEnum = exports.TacticsOrderByDTOCumulatedWethEnum = exports.TacticsOrderByDTOIsProcessedEnum = exports.TacticsOrderByDTOEndDateEnum = exports.TacticsOrderByDTOStartDateEnum = exports.TacticsOrderByDTOTacticConfigIdEnum = exports.TacticsOrderByDTOIdEnum = exports.TacticsEntryOrderByDTOUpdatedAtEnum = exports.TacticsEntryOrderByDTOCreatedAtEnum = exports.TacticsEntryOrderByDTOAutocompletedAtEnum = exports.TacticsEntryOrderByDTOAutocompletedEnum = exports.TacticsEntryOrderByDTOPreviousRankEnum = exports.TacticsEntryOrderByDTOTicketIdEnum = exports.TacticsEntryOrderByDTOHero5StarsEnum = exports.TacticsEntryOrderByDTOHero4StarsEnum = exports.TacticsEntryOrderByDTOHero3StarsEnum = exports.TacticsEntryOrderByDTOHero2StarsEnum = exports.TacticsEntryOrderByDTOHero1StarsEnum = exports.TacticsEntryOrderByDTOValidateDeckBeforeEnum = exports.TacticsEntryOrderByDTORewardsEnum = exports.TacticsEntryOrderByDTOScoreEnum = exports.TacticsEntryOrderByDTORankEnum = exports.TacticsEntryOrderByDTOHero5IdEnum = exports.TacticsEntryOrderByDTOHero4IdEnum = exports.TacticsEntryOrderByDTOHero3IdEnum = exports.TacticsEntryOrderByDTOHero2IdEnum = exports.TacticsEntryOrderByDTOHero1IdEnum = exports.TacticsEntryOrderByDTOPlayerIdEnum = exports.TacticsEntryOrderByDTOTacticIdEnum = exports.TacticsEntryOrderByDTOIdEnum = exports.StringFilterDTOModeEnum = exports.GetTacticsOptionsDTODistinctEnum = exports.GetTacticsEntriesOptionsDTODistinctEnum = exports.GetLastActivityQueryDTOActivityTypeEnum = exports.GetLastActivityDtoTypeEnum = exports.GetHeroScoresQueryOrderByDTOTweetCountEnum = exports.GetHeroScoresQueryOrderByDTOFantasyScoreEnum = exports.GetHeroScoresQueryHeroesOrderByDTOFollowersCountEnum = void 0;
exports.PlayerApi = exports.PlayerApiFactory = exports.PlayerApiFp = exports.PlayerApiAxiosParamCreator = exports.HeroApi = exports.HeroApiFactory = exports.HeroApiFp = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("./common");
// @ts-ignore
var base_1 = require("./base");
exports.GetHeroScoresQueryHeroesOrderByDTOFollowersCountEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.GetHeroScoresQueryOrderByDTOFantasyScoreEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.GetHeroScoresQueryOrderByDTOTweetCountEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.GetLastActivityDtoTypeEnum = {
    MintPack: 'MINT_PACK',
    BurnCard: 'BURN_CARD',
    LevelUp: 'LEVEL_UP',
    SaveDeck: 'SAVE_DECK',
    Trade: 'TRADE',
    Listing: 'LISTING',
    Bid: 'BID'
};
exports.GetLastActivityQueryDTOActivityTypeEnum = {
    MintPack: 'MINT_PACK',
    BurnCard: 'BURN_CARD',
    LevelUp: 'LEVEL_UP',
    SaveDeck: 'SAVE_DECK',
    Trade: 'TRADE',
    Listing: 'LISTING',
    Bid: 'BID'
};
exports.GetTacticsEntriesOptionsDTODistinctEnum = {
    TacticId: 'tactic_id',
    PlayerId: 'player_id',
    Hero1Id: 'hero1_id',
    Hero2Id: 'hero2_id',
    Hero3Id: 'hero3_id',
    Hero4Id: 'hero4_id',
    Hero5Id: 'hero5_id',
    Rank: 'rank',
    Score: 'score',
    Rewards: 'rewards',
    ValidateDeckBefore: 'validate_deck_before',
    Id: 'id',
    Hero1Stars: 'hero1_stars',
    Hero2Stars: 'hero2_stars',
    Hero3Stars: 'hero3_stars',
    Hero4Stars: 'hero4_stars',
    Hero5Stars: 'hero5_stars',
    TicketId: 'ticket_id',
    PreviousRank: 'previous_rank',
    Autocompleted: 'autocompleted',
    AutocompletedAt: 'autocompleted_at',
    CreatedAt: 'created_at',
    UpdatedAt: 'updated_at'
};
exports.GetTacticsOptionsDTODistinctEnum = {
    Id: 'id',
    TacticConfigId: 'tactic_config_id',
    StartDate: 'start_date',
    EndDate: 'end_date',
    IsProcessed: 'is_processed',
    CumulatedWeth: 'cumulated_weth',
    HasBeenValidated: 'has_been_validated',
    WalletAddress: 'wallet_address',
    EthPrice: 'eth_price',
    IsRewardsProcessed: 'is_rewards_processed',
    RegistrationOpenned: 'registration_openned',
    Visible: 'visible',
    CreatedAt: 'created_at',
    UpdatedAt: 'updated_at'
};
exports.StringFilterDTOModeEnum = {
    Default: 'default',
    Insensitive: 'insensitive'
};
exports.TacticsEntryOrderByDTOIdEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOTacticIdEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOPlayerIdEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOHero1IdEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOHero2IdEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOHero3IdEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOHero4IdEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOHero5IdEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTORankEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOScoreEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTORewardsEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOValidateDeckBeforeEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOHero1StarsEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOHero2StarsEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOHero3StarsEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOHero4StarsEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOHero5StarsEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOTicketIdEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOPreviousRankEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOAutocompletedEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOAutocompletedAtEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOCreatedAtEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsEntryOrderByDTOUpdatedAtEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOIdEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOTacticConfigIdEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOStartDateEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOEndDateEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOIsProcessedEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOCumulatedWethEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOWalletAddressEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOEthPriceEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOIsRewardsProcessedEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTORegistrationOpennedEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOVisibleEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOCreatedAtEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TacticsOrderByDTOUpdatedAtEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.TrendingHeroDTOTrendingReasonEnum = {
    FloorPrice: 'floor_price',
    Views: 'views',
    None: 'none'
};
/**
 * CardApi - axios parameter creator
 * @export
 */
var CardApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllCards: function (page_1, limit_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([page_1, limit_1], args_1, true), void 0, function (page, limit, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/card/all";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration)];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            if (page !== undefined) {
                                localVarQueryParameter['page'] = page;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardById: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getCardById', 'id', id);
                            localVarPath = "/card/by-id/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration)];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} playerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardsByPlayerId: function (playerId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([playerId_1], args_1, true), void 0, function (playerId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'playerId' is not null or undefined
                            (0, common_1.assertParamExists)('getCardsByPlayerId', 'playerId', playerId);
                            localVarPath = "/card/player/{playerId}"
                                .replace("{".concat("playerId", "}"), encodeURIComponent(String(playerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration)];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} heroId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroSupply: function (heroId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([heroId_1], args_1, true), void 0, function (heroId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'heroId' is not null or undefined
                            (0, common_1.assertParamExists)('getHeroSupply', 'heroId', heroId);
                            localVarPath = "/card/supply/{heroId}"
                                .replace("{".concat("heroId", "}"), encodeURIComponent(String(heroId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration)];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.CardApiAxiosParamCreator = CardApiAxiosParamCreator;
/**
 * CardApi - functional programming interface
 * @export
 */
var CardApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.CardApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllCards: function (page, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.findAllCards(page, limit, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CardApi.findAllCards']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardById: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCardById(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CardApi.getCardById']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} playerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardsByPlayerId: function (playerId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCardsByPlayerId(playerId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CardApi.getCardsByPlayerId']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} heroId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroSupply: function (heroId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getHeroSupply(heroId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CardApi.getHeroSupply']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.CardApiFp = CardApiFp;
/**
 * CardApi - factory interface
 * @export
 */
var CardApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.CardApiFp)(configuration);
    return {
        /**
         *
         * @param {CardApiFindAllCardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllCards: function (requestParameters, options) {
            if (requestParameters === void 0) { requestParameters = {}; }
            return localVarFp.findAllCards(requestParameters.page, requestParameters.limit, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {CardApiGetCardByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardById: function (requestParameters, options) {
            return localVarFp.getCardById(requestParameters.id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {CardApiGetCardsByPlayerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardsByPlayerId: function (requestParameters, options) {
            return localVarFp.getCardsByPlayerId(requestParameters.playerId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {CardApiGetHeroSupplyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroSupply: function (requestParameters, options) {
            return localVarFp.getHeroSupply(requestParameters.heroId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.CardApiFactory = CardApiFactory;
/**
 * CardApi - object-oriented interface
 * @export
 * @class CardApi
 * @extends {BaseAPI}
 */
var CardApi = /** @class */ (function (_super) {
    __extends(CardApi, _super);
    function CardApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {CardApiFindAllCardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApi
     */
    CardApi.prototype.findAllCards = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.CardApiFp)(this.configuration).findAllCards(requestParameters.page, requestParameters.limit, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {CardApiGetCardByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApi
     */
    CardApi.prototype.getCardById = function (requestParameters, options) {
        var _this = this;
        return (0, exports.CardApiFp)(this.configuration).getCardById(requestParameters.id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {CardApiGetCardsByPlayerIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApi
     */
    CardApi.prototype.getCardsByPlayerId = function (requestParameters, options) {
        var _this = this;
        return (0, exports.CardApiFp)(this.configuration).getCardsByPlayerId(requestParameters.playerId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {CardApiGetHeroSupplyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApi
     */
    CardApi.prototype.getHeroSupply = function (requestParameters, options) {
        var _this = this;
        return (0, exports.CardApiFp)(this.configuration).getHeroSupply(requestParameters.heroId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CardApi;
}(base_1.BaseAPI));
exports.CardApi = CardApi;
/**
 * HeroApi - axios parameter creator
 * @export
 */
var HeroApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Get all heroes with pagination
         * @param {number} [limit] Limit the number of heroes returned
         * @param {number} [page] Page number for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllHeroes: function (limit_1, page_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([limit_1, page_1], args_1, true), void 0, function (limit, page, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/hero/all";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration)];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (page !== undefined) {
                                localVarQueryParameter['page'] = page;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get heroes by name or handle
         * @param {string} search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroesByHandleOrName: function (search_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([search_1], args_1, true), void 0, function (search, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'search' is not null or undefined
                            (0, common_1.assertParamExists)('getHeroesByHandleOrName', 'search', search);
                            localVarPath = "/hero/search/name";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration)];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            if (search !== undefined) {
                                localVarQueryParameter['search'] = search;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get heroes by IDs
         * @param {Array<string>} ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroesByIds: function (ids_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([ids_1], args_1, true), void 0, function (ids, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'ids' is not null or undefined
                            (0, common_1.assertParamExists)('getHeroesByIds', 'ids', ids);
                            localVarPath = "/hero/search/ids";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration)];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            if (ids) {
                                localVarQueryParameter['ids'] = ids;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.HeroApiAxiosParamCreator = HeroApiAxiosParamCreator;
/**
 * HeroApi - functional programming interface
 * @export
 */
var HeroApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.HeroApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get all heroes with pagination
         * @param {number} [limit] Limit the number of heroes returned
         * @param {number} [page] Page number for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllHeroes: function (limit, page, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllHeroes(limit, page, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['HeroApi.getAllHeroes']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get heroes by name or handle
         * @param {string} search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroesByHandleOrName: function (search, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getHeroesByHandleOrName(search, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['HeroApi.getHeroesByHandleOrName']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get heroes by IDs
         * @param {Array<string>} ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroesByIds: function (ids, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getHeroesByIds(ids, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['HeroApi.getHeroesByIds']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.HeroApiFp = HeroApiFp;
/**
 * HeroApi - factory interface
 * @export
 */
var HeroApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.HeroApiFp)(configuration);
    return {
        /**
         *
         * @summary Get all heroes with pagination
         * @param {HeroApiGetAllHeroesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllHeroes: function (requestParameters, options) {
            if (requestParameters === void 0) { requestParameters = {}; }
            return localVarFp.getAllHeroes(requestParameters.limit, requestParameters.page, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get heroes by name or handle
         * @param {HeroApiGetHeroesByHandleOrNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroesByHandleOrName: function (requestParameters, options) {
            return localVarFp.getHeroesByHandleOrName(requestParameters.search, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get heroes by IDs
         * @param {HeroApiGetHeroesByIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroesByIds: function (requestParameters, options) {
            return localVarFp.getHeroesByIds(requestParameters.ids, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.HeroApiFactory = HeroApiFactory;
/**
 * HeroApi - object-oriented interface
 * @export
 * @class HeroApi
 * @extends {BaseAPI}
 */
var HeroApi = /** @class */ (function (_super) {
    __extends(HeroApi, _super);
    function HeroApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Get all heroes with pagination
     * @param {HeroApiGetAllHeroesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeroApi
     */
    HeroApi.prototype.getAllHeroes = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.HeroApiFp)(this.configuration).getAllHeroes(requestParameters.limit, requestParameters.page, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get heroes by name or handle
     * @param {HeroApiGetHeroesByHandleOrNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeroApi
     */
    HeroApi.prototype.getHeroesByHandleOrName = function (requestParameters, options) {
        var _this = this;
        return (0, exports.HeroApiFp)(this.configuration).getHeroesByHandleOrName(requestParameters.search, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get heroes by IDs
     * @param {HeroApiGetHeroesByIdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeroApi
     */
    HeroApi.prototype.getHeroesByIds = function (requestParameters, options) {
        var _this = this;
        return (0, exports.HeroApiFp)(this.configuration).getHeroesByIds(requestParameters.ids, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return HeroApi;
}(base_1.BaseAPI));
exports.HeroApi = HeroApi;
/**
 * PlayerApi - axios parameter creator
 * @export
 */
var PlayerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Search players by name, address or handle
         * @param {string} search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPlayersBySearch: function (search_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([search_1], args_1, true), void 0, function (search, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'search' is not null or undefined
                            (0, common_1.assertParamExists)('findPlayersBySearch', 'search', search);
                            localVarPath = "/player/search";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration)];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            if (search !== undefined) {
                                localVarQueryParameter['search'] = search;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get all paginated players
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPlayersWithPagination: function (page_1, limit_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([page_1, limit_1], args_1, true), void 0, function (page, limit, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/player/all";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration)];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            if (page !== undefined) {
                                localVarQueryParameter['page'] = page;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.PlayerApiAxiosParamCreator = PlayerApiAxiosParamCreator;
/**
 * PlayerApi - functional programming interface
 * @export
 */
var PlayerApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.PlayerApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Search players by name, address or handle
         * @param {string} search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPlayersBySearch: function (search, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.findPlayersBySearch(search, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlayerApi.findPlayersBySearch']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get all paginated players
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPlayersWithPagination: function (page, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllPlayersWithPagination(page, limit, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlayerApi.getAllPlayersWithPagination']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.PlayerApiFp = PlayerApiFp;
/**
 * PlayerApi - factory interface
 * @export
 */
var PlayerApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.PlayerApiFp)(configuration);
    return {
        /**
         *
         * @summary Search players by name, address or handle
         * @param {PlayerApiFindPlayersBySearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPlayersBySearch: function (requestParameters, options) {
            return localVarFp.findPlayersBySearch(requestParameters.search, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get all paginated players
         * @param {PlayerApiGetAllPlayersWithPaginationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPlayersWithPagination: function (requestParameters, options) {
            if (requestParameters === void 0) { requestParameters = {}; }
            return localVarFp.getAllPlayersWithPagination(requestParameters.page, requestParameters.limit, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.PlayerApiFactory = PlayerApiFactory;
/**
 * PlayerApi - object-oriented interface
 * @export
 * @class PlayerApi
 * @extends {BaseAPI}
 */
var PlayerApi = /** @class */ (function (_super) {
    __extends(PlayerApi, _super);
    function PlayerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Search players by name, address or handle
     * @param {PlayerApiFindPlayersBySearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    PlayerApi.prototype.findPlayersBySearch = function (requestParameters, options) {
        var _this = this;
        return (0, exports.PlayerApiFp)(this.configuration).findPlayersBySearch(requestParameters.search, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get all paginated players
     * @param {PlayerApiGetAllPlayersWithPaginationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    PlayerApi.prototype.getAllPlayersWithPagination = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.PlayerApiFp)(this.configuration).getAllPlayersWithPagination(requestParameters.page, requestParameters.limit, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PlayerApi;
}(base_1.BaseAPI));
exports.PlayerApi = PlayerApi;
//# sourceMappingURL=api.js.map