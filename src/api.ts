/* tslint:disable */
/* eslint-disable */
/**
 * Fantasy API | PRO
 * The Fantasy API documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ActiveQuestDto
 */
export interface ActiveQuestDto {
    /**
     * 
     * @type {string}
     * @memberof ActiveQuestDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ActiveQuestDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ActiveQuestDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ActiveQuestDto
     */
    'quest_type': string;
    /**
     * 
     * @type {string}
     * @memberof ActiveQuestDto
     */
    'period': string;
    /**
     * 
     * @type {boolean}
     * @memberof ActiveQuestDto
     */
    'has_multiple_thresholds': boolean;
    /**
     * 
     * @type {string}
     * @memberof ActiveQuestDto
     */
    'start_date': string;
    /**
     * 
     * @type {string}
     * @memberof ActiveQuestDto
     */
    'end_date'?: string | null;
    /**
     * 
     * @type {Array<ThresholdDto>}
     * @memberof ActiveQuestDto
     */
    'thresholds': Array<ThresholdDto>;
}
/**
 * 
 * @export
 * @interface AddressPoolItem
 */
export interface AddressPoolItem {
    /**
     * Address of the participant
     * @type {string}
     * @memberof AddressPoolItem
     */
    'address': string;
    /**
     * Iteration number of the address
     * @type {number}
     * @memberof AddressPoolItem
     */
    'iteration': number;
}
/**
 * 
 * @export
 * @interface ApiKey
 */
export interface ApiKey {
    /**
     * 
     * @type {string}
     * @memberof ApiKey
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiKey
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiKey
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof ApiKey
     */
    'nb_calls_allowed': number;
    /**
     * 
     * @type {string}
     * @memberof ApiKey
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof ApiKey
     */
    'player_address': string;
    /**
     * 
     * @type {string}
     * @memberof ApiKey
     */
    'telegram_handle': string;
}
/**
 * 
 * @export
 * @interface Auth
 */
export interface Auth {
    /**
     * 
     * @type {string}
     * @memberof Auth
     */
    'accessToken': string;
    /**
     * 
     * @type {Player}
     * @memberof Auth
     */
    'player': Player;
}
/**
 * 
 * @export
 * @interface AuthRefresh
 */
export interface AuthRefresh {
    /**
     * 
     * @type {string}
     * @memberof AuthRefresh
     */
    'accessToken': string;
}
/**
 * 
 * @export
 * @interface BoolFilterDTO
 */
export interface BoolFilterDTO {
    /**
     * 
     * @type {boolean}
     * @memberof BoolFilterDTO
     */
    'equals'?: boolean;
    /**
     * 
     * @type {BoolFilterDTO}
     * @memberof BoolFilterDTO
     */
    'not'?: BoolFilterDTO;
}
/**
 * 
 * @export
 * @interface Card
 */
export interface Card {
    /**
     * 
     * @type {string}
     * @memberof Card
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Card
     */
    'owner': string;
    /**
     * 
     * @type {string}
     * @memberof Card
     */
    'hero_id': string;
    /**
     * 
     * @type {Hero}
     * @memberof Card
     */
    'heroes': Hero;
    /**
     * 
     * @type {number}
     * @memberof Card
     */
    'rarity': number;
    /**
     * 
     * @type {string}
     * @memberof Card
     */
    'hero_rarity_index': string;
    /**
     * 
     * @type {object}
     * @memberof Card
     */
    'token_id': object;
    /**
     * 
     * @type {number}
     * @memberof Card
     */
    'season': number;
    /**
     * 
     * @type {string}
     * @memberof Card
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof Card
     */
    'updated_at': string;
    /**
     * 
     * @type {string}
     * @memberof Card
     */
    'picture': string;
    /**
     * 
     * @type {string}
     * @memberof Card
     */
    'tx_hash'?: string;
    /**
     * 
     * @type {number}
     * @memberof Card
     */
    'blocknumber': number;
    /**
     * 
     * @type {string}
     * @memberof Card
     */
    'timestamp'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Card
     */
    'in_deck'?: boolean;
}
/**
 * 
 * @export
 * @interface CardHeroSwapping
 */
export interface CardHeroSwapping {
    /**
     * Unique identifier for the card hero swapping
     * @type {string}
     * @memberof CardHeroSwapping
     */
    'id': string;
    /**
     * Card ID
     * @type {string}
     * @memberof CardHeroSwapping
     */
    'card_id': string;
    /**
     * Old hero ID
     * @type {string}
     * @memberof CardHeroSwapping
     */
    'old_hero_id': string;
    /**
     * New hero ID
     * @type {string}
     * @memberof CardHeroSwapping
     */
    'new_hero_id': string;
    /**
     * Creation timestamp
     * @type {string}
     * @memberof CardHeroSwapping
     */
    'created_at': string;
    /**
     * Last update timestamp
     * @type {string}
     * @memberof CardHeroSwapping
     */
    'updated_at': string;
    /**
     * Vote configuration ID
     * @type {string}
     * @memberof CardHeroSwapping
     */
    'vote_config_id': string;
    /**
     * Indicates if the swapping is processed
     * @type {boolean}
     * @memberof CardHeroSwapping
     */
    'is_processed': boolean;
    /**
     * Old hero relationship
     * @type {Hero}
     * @memberof CardHeroSwapping
     */
    'old_hero': Hero;
    /**
     * New hero relationship
     * @type {Hero}
     * @memberof CardHeroSwapping
     */
    'new_hero': Hero;
}
/**
 * 
 * @export
 * @interface ClaimDailyQuestResult
 */
export interface ClaimDailyQuestResult {
    /**
     * 
     * @type {boolean}
     * @memberof ClaimDailyQuestResult
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof ClaimDailyQuestResult
     */
    'message': string;
    /**
     * 
     * @type {number}
     * @memberof ClaimDailyQuestResult
     */
    'dailyQuestStreak': number;
    /**
     * 
     * @type {number}
     * @memberof ClaimDailyQuestResult
     */
    'dailyQuestProgress': number;
    /**
     * 
     * @type {string}
     * @memberof ClaimDailyQuestResult
     */
    'nextDueTime': string;
    /**
     * 
     * @type {boolean}
     * @memberof ClaimDailyQuestResult
     */
    'twitterQuestCompleted'?: boolean;
    /**
     * 
     * @type {ClaimDailyQuestResultSelectedPrize}
     * @memberof ClaimDailyQuestResult
     */
    'selectedPrize'?: ClaimDailyQuestResultSelectedPrize;
}
/**
 * The selected prize for the claimed daily quest
 * @export
 * @interface ClaimDailyQuestResultSelectedPrize
 */
export interface ClaimDailyQuestResultSelectedPrize {
    /**
     * 
     * @type {string}
     * @memberof ClaimDailyQuestResultSelectedPrize
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClaimDailyQuestResultSelectedPrize
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClaimDailyQuestResultSelectedPrize
     */
    'text'?: string;
    /**
     * 
     * @type {number}
     * @memberof ClaimDailyQuestResultSelectedPrize
     */
    'probability'?: number;
}
/**
 * 
 * @export
 * @interface ClaimQuest
 */
export interface ClaimQuest {
    /**
     * The ID of the player claiming the reward
     * @type {string}
     * @memberof ClaimQuest
     */
    'playerId': string;
    /**
     * The ID of the quest threshold being claimed
     * @type {string}
     * @memberof ClaimQuest
     */
    'questThresholdId': string;
}
/**
 * 
 * @export
 * @interface ClaimQuestResponse
 */
export interface ClaimQuestResponse {
    /**
     * Indicates if the claim was successful
     * @type {boolean}
     * @memberof ClaimQuestResponse
     */
    'success': boolean;
    /**
     * A message describing the result of the operation
     * @type {string}
     * @memberof ClaimQuestResponse
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface CreateAuthDto
 */
export interface CreateAuthDto {
    /**
     * The Privy ID associated with the user
     * @type {string}
     * @memberof CreateAuthDto
     */
    'privy_id': string;
    /**
     * The wallet public key associated with the user
     * @type {string}
     * @memberof CreateAuthDto
     */
    'wallet': string;
    /**
     * The name of the user
     * @type {string}
     * @memberof CreateAuthDto
     */
    'name': string;
    /**
     * The handle or screen name of the user
     * @type {string}
     * @memberof CreateAuthDto
     */
    'handle': string;
    /**
     * The URL of the user\'s profile picture
     * @type {string}
     * @memberof CreateAuthDto
     */
    'profile_picture': string;
    /**
     * The Twitter ID of the user
     * @type {string}
     * @memberof CreateAuthDto
     */
    'twitter_id': string;
}
/**
 * 
 * @export
 * @interface CreateQuestConfigDto
 */
export interface CreateQuestConfigDto {
    /**
     * 
     * @type {string}
     * @memberof CreateQuestConfigDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateQuestConfigDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof CreateQuestConfigDto
     */
    'quest_type': string;
    /**
     * 
     * @type {string}
     * @memberof CreateQuestConfigDto
     */
    'period': string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateQuestConfigDto
     */
    'has_multiple_thresholds': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateQuestConfigDto
     */
    'active': boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateQuestConfigDto
     */
    'start_date': string;
    /**
     * 
     * @type {string}
     * @memberof CreateQuestConfigDto
     */
    'end_date'?: string | null;
    /**
     * 
     * @type {Array<CreateThresholdDto>}
     * @memberof CreateQuestConfigDto
     */
    'thresholds': Array<CreateThresholdDto>;
}
/**
 * 
 * @export
 * @interface CreateThresholdDto
 */
export interface CreateThresholdDto {
    /**
     * 
     * @type {number}
     * @memberof CreateThresholdDto
     */
    'threshold_value': number;
    /**
     * 
     * @type {string}
     * @memberof CreateThresholdDto
     */
    'reward_type': string;
    /**
     * 
     * @type {number}
     * @memberof CreateThresholdDto
     */
    'reward_amount': number;
}
/**
 * 
 * @export
 * @interface CreateVote
 */
export interface CreateVote {
    /**
     * The ID of the vote configuration
     * @type {string}
     * @memberof CreateVote
     */
    'vote_config_id': string;
    /**
     * The ID of the hero voted for
     * @type {string}
     * @memberof CreateVote
     */
    'hero_id': string;
    /**
     * The number of fan pts use in vote
     * @type {number}
     * @memberof CreateVote
     */
    'fan_count': number;
}
/**
 * 
 * @export
 * @interface CredibilityAverage
 */
export interface CredibilityAverage {
    /**
     * ID of the hero associated with this credibility average
     * @type {string}
     * @memberof CredibilityAverage
     */
    'hero_id': string;
    /**
     * Average credibility score for the hero
     * @type {number}
     * @memberof CredibilityAverage
     */
    'avg_cred_score': number;
    /**
     * Average number of certified views for the hero
     * @type {number}
     * @memberof CredibilityAverage
     */
    'avg_certified_views': number;
}
/**
 * 
 * @export
 * @interface DailyQuestProgress
 */
export interface DailyQuestProgress {
    /**
     * Current progress of the daily quest
     * @type {number}
     * @memberof DailyQuestProgress
     */
    'dailyQuestProgress': number;
    /**
     * Current streak of completed daily quests
     * @type {number}
     * @memberof DailyQuestProgress
     */
    'dailyQuestStreak': number;
    /**
     * Due time for the next daily quest
     * @type {string}
     * @memberof DailyQuestProgress
     */
    'dailyQuestDueTime': string;
    /**
     * Whether the player can claim the daily quest
     * @type {boolean}
     * @memberof DailyQuestProgress
     */
    'can_claim': boolean;
    /**
     * Array of possible prizes for the daily quest
     * @type {Array<DailyQuestProgressPrizesInner>}
     * @memberof DailyQuestProgress
     */
    'prizes': Array<DailyQuestProgressPrizesInner>;
    /**
     * 
     * @type {DailyQuestProgressTwitterQuest}
     * @memberof DailyQuestProgress
     */
    'twitterQuest'?: DailyQuestProgressTwitterQuest;
}
/**
 * 
 * @export
 * @interface DailyQuestProgressPrizesInner
 */
export interface DailyQuestProgressPrizesInner {
    /**
     * 
     * @type {string}
     * @memberof DailyQuestProgressPrizesInner
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DailyQuestProgressPrizesInner
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof DailyQuestProgressPrizesInner
     */
    'text'?: string;
}
/**
 * Twitter quest details if available
 * @export
 * @interface DailyQuestProgressTwitterQuest
 */
export interface DailyQuestProgressTwitterQuest {
    /**
     * Unique identifier for the Twitter quest
     * @type {number}
     * @memberof DailyQuestProgressTwitterQuest
     */
    'id'?: number;
    /**
     * Link to the Twitter post for the quest
     * @type {string}
     * @memberof DailyQuestProgressTwitterQuest
     */
    'twitter_link'?: string;
    /**
     * Type of the Twitter quest
     * @type {string}
     * @memberof DailyQuestProgressTwitterQuest
     */
    'quest_type'?: string;
    /**
     * Additional data for advanced quest features
     * @type {object}
     * @memberof DailyQuestProgressTwitterQuest
     */
    'advance_quest_data'?: object;
}
/**
 * 
 * @export
 * @interface DateTimeFilterDTO
 */
export interface DateTimeFilterDTO {
    /**
     * 
     * @type {string}
     * @memberof DateTimeFilterDTO
     */
    'equals'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DateTimeFilterDTO
     */
    'in'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof DateTimeFilterDTO
     */
    'notIn'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof DateTimeFilterDTO
     */
    'lt'?: string;
    /**
     * 
     * @type {string}
     * @memberof DateTimeFilterDTO
     */
    'lte'?: string;
    /**
     * 
     * @type {string}
     * @memberof DateTimeFilterDTO
     */
    'gt'?: string;
    /**
     * 
     * @type {string}
     * @memberof DateTimeFilterDTO
     */
    'gte'?: string;
    /**
     * 
     * @type {DateTimeFilterDTO}
     * @memberof DateTimeFilterDTO
     */
    'not'?: DateTimeFilterDTO;
}
/**
 * 
 * @export
 * @interface EnrichedTweet
 */
export interface EnrichedTweet {
    /**
     * Unique identifier for the tweet
     * @type {string}
     * @memberof EnrichedTweet
     */
    'post_id': string;
    /**
     * ID of the hero who posted the tweet
     * @type {string}
     * @memberof EnrichedTweet
     */
    'hero_id': string;
    /**
     * Hero
     * @type {TweetHero}
     * @memberof EnrichedTweet
     */
    'hero': TweetHero;
    /**
     * Twitter handle of the hero
     * @type {string}
     * @memberof EnrichedTweet
     */
    'handle': string;
    /**
     * Text for the tweet
     * @type {string}
     * @memberof EnrichedTweet
     */
    'text': string;
    /**
     * Number of views for the tweet
     * @type {number}
     * @memberof EnrichedTweet
     */
    'views': number;
    /**
     * Number of likes for the tweet
     * @type {number}
     * @memberof EnrichedTweet
     */
    'likes': number;
    /**
     * Number of retweets for the tweet
     * @type {number}
     * @memberof EnrichedTweet
     */
    'retweets': number;
    /**
     * Number of quotes for the tweet
     * @type {number}
     * @memberof EnrichedTweet
     */
    'quotes': number;
    /**
     * Number of bookmarks for the tweet
     * @type {number}
     * @memberof EnrichedTweet
     */
    'bookmarks': number;
    /**
     * Number of replies for the tweet
     * @type {number}
     * @memberof EnrichedTweet
     */
    'replies': number;
    /**
     * Last update timestamp of the tweet
     * @type {string}
     * @memberof EnrichedTweet
     */
    'updated_at': string;
    /**
     * Creation timestamp of the tweet
     * @type {string}
     * @memberof EnrichedTweet
     */
    'created_at': string;
    /**
     * Type of the tweet
     * @type {string}
     * @memberof EnrichedTweet
     */
    'type': string;
    /**
     * Number of certified views for the tweet
     * @type {number}
     * @memberof EnrichedTweet
     */
    'certified_views': number;
    /**
     * Number of certified likes for the tweet
     * @type {number}
     * @memberof EnrichedTweet
     */
    'certified_likes': number;
    /**
     * Number of certified retweets for the tweet
     * @type {number}
     * @memberof EnrichedTweet
     */
    'certified_retweets': number;
    /**
     * Caped ratio for the tweet
     * @type {number}
     * @memberof EnrichedTweet
     */
    'caped_ratio': number;
    /**
     * Cred score for the tweet
     * @type {number}
     * @memberof EnrichedTweet
     */
    'cred_score': number;
    /**
     * Deep cred interaction ratio for the tweet
     * @type {number}
     * @memberof EnrichedTweet
     */
    'deep_cred_interaction_ratio': number;
    /**
     * High cred interaction ratio for the tweet
     * @type {number}
     * @memberof EnrichedTweet
     */
    'high_cred_interaction_ratio': number;
    /**
     * Likes database ratio for the tweet
     * @type {number}
     * @memberof EnrichedTweet
     */
    'likes_db_ratio': number;
    /**
     * Replies database ratio for the tweet
     * @type {number}
     * @memberof EnrichedTweet
     */
    'replies_db_ratio': number;
    /**
     * Retweets database ratio for the tweet
     * @type {number}
     * @memberof EnrichedTweet
     */
    'retweets_db_ratio': number;
    /**
     * Quote database ratio for the tweet
     * @type {number}
     * @memberof EnrichedTweet
     */
    'quote_db_ratio': number;
    /**
     * Top interacting users for the tweet
     * @type {object}
     * @memberof EnrichedTweet
     */
    'top_interacting_users': object;
    /**
     * Deletion timestamp of the tweet
     * @type {string}
     * @memberof EnrichedTweet
     */
    'deleted_at'?: string;
    /**
     * Fire score for the tweet
     * @type {number}
     * @memberof EnrichedTweet
     */
    'fire_score': number;
    /**
     * Health score for the tweet
     * @type {number}
     * @memberof EnrichedTweet
     */
    'health_score': number;
    /**
     * Impact score for the tweet
     * @type {number}
     * @memberof EnrichedTweet
     */
    'impact_score': number;
}
/**
 * 
 * @export
 * @interface EntryTacticsConfigDTO
 */
export interface EntryTacticsConfigDTO {
    /**
     * Name of the tactic
     * @type {string}
     * @memberof EntryTacticsConfigDTO
     */
    'name': string;
    /**
     * 
     * @type {EntryTacticsConfigPayoutDTO}
     * @memberof EntryTacticsConfigDTO
     */
    'payout_structure': EntryTacticsConfigPayoutDTO;
}
/**
 * 
 * @export
 * @interface EntryTacticsConfigPayoutDTO
 */
export interface EntryTacticsConfigPayoutDTO {
    /**
     * Price pool
     * @type {number}
     * @memberof EntryTacticsConfigPayoutDTO
     */
    'price_pool': number;
    /**
     * Payout details
     * @type {Array<PayoutObject>}
     * @memberof EntryTacticsConfigPayoutDTO
     */
    'payout': Array<PayoutObject>;
    /**
     * Price pool in gold
     * @type {number}
     * @memberof EntryTacticsConfigPayoutDTO
     */
    'price_pool_gold': number;
    /**
     * Payout details in gold
     * @type {Array<PayoutObject>}
     * @memberof EntryTacticsConfigPayoutDTO
     */
    'payout_gold': Array<PayoutObject>;
    /**
     * Price pool in gold
     * @type {number}
     * @memberof EntryTacticsConfigPayoutDTO
     */
    'price_pool_cards': number;
    /**
     * Payout details in cards
     * @type {Array<PayoutObject>}
     * @memberof EntryTacticsConfigPayoutDTO
     */
    'payout_cards': Array<PayoutObject>;
    /**
     * Price pool in gold
     * @type {number}
     * @memberof EntryTacticsConfigPayoutDTO
     */
    'price_pool_tickets': number;
    /**
     * Payout details in gold
     * @type {Array<PayoutObject>}
     * @memberof EntryTacticsConfigPayoutDTO
     */
    'payout_tickets': Array<PayoutObject>;
}
/**
 * 
 * @export
 * @interface EntryTacticsDTO
 */
export interface EntryTacticsDTO {
    /**
     * Unique identifier for the tactic
     * @type {string}
     * @memberof EntryTacticsDTO
     */
    'id': string;
    /**
     * Start date of the tactic
     * @type {string}
     * @memberof EntryTacticsDTO
     */
    'start_date': string;
    /**
     * End date of the tactic
     * @type {string}
     * @memberof EntryTacticsDTO
     */
    'end_date': string;
    /**
     * ETH price
     * @type {object}
     * @memberof EntryTacticsDTO
     */
    'eth_price': object;
    /**
     * 
     * @type {EntryTacticsConfigDTO}
     * @memberof EntryTacticsDTO
     */
    'config': EntryTacticsConfigDTO;
}
/**
 * 
 * @export
 * @interface EntryTicketsDTO
 */
export interface EntryTicketsDTO {
    /**
     * Unique identifier for the ticket
     * @type {string}
     * @memberof EntryTicketsDTO
     */
    'id': string;
    /**
     * Transaction hash
     * @type {string}
     * @memberof EntryTicketsDTO
     */
    'tx_hash': string;
    /**
     * Indicates if the ticket is used
     * @type {boolean}
     * @memberof EntryTicketsDTO
     */
    'used': boolean;
    /**
     * Creation timestamp
     * @type {string}
     * @memberof EntryTicketsDTO
     */
    'created_at': string;
    /**
     * Last update timestamp
     * @type {string}
     * @memberof EntryTicketsDTO
     */
    'updated_at': string;
    /**
     * 
     * @type {EntryTicketsRewardsDTO}
     * @memberof EntryTicketsDTO
     */
    'tickets_rewards': EntryTicketsRewardsDTO;
}
/**
 * 
 * @export
 * @interface EntryTicketsRewardsDTO
 */
export interface EntryTicketsRewardsDTO {
    /**
     * Reward amount in ETH
     * @type {object}
     * @memberof EntryTicketsRewardsDTO
     */
    'reward_eth': object;
    /**
     * Reward amount in gold
     * @type {object}
     * @memberof EntryTicketsRewardsDTO
     */
    'reward_gold': object;
    /**
     * Reward amount in cards
     * @type {number}
     * @memberof EntryTicketsRewardsDTO
     */
    'reward_cards': number;
    /**
     * Reward amount in tactic tickets
     * @type {number}
     * @memberof EntryTicketsRewardsDTO
     */
    'reward_tickets': number;
}
/**
 * 
 * @export
 * @interface GetEntriesHistoryResponseDTO
 */
export interface GetEntriesHistoryResponseDTO {
    /**
     * Unique identifier for the entry
     * @type {string}
     * @memberof GetEntriesHistoryResponseDTO
     */
    'id': string;
    /**
     * Tactic ID
     * @type {string}
     * @memberof GetEntriesHistoryResponseDTO
     */
    'tactic_id': string;
    /**
     * Rank
     * @type {number}
     * @memberof GetEntriesHistoryResponseDTO
     */
    'rank': number | null;
    /**
     * Score
     * @type {string}
     * @memberof GetEntriesHistoryResponseDTO
     */
    'score': string | null;
    /**
     * Created at
     * @type {string}
     * @memberof GetEntriesHistoryResponseDTO
     */
    'created_at': string;
    /**
     * Updated at
     * @type {string}
     * @memberof GetEntriesHistoryResponseDTO
     */
    'updated_at': string;
    /**
     * 
     * @type {EntryTacticsDTO}
     * @memberof GetEntriesHistoryResponseDTO
     */
    'tactics': EntryTacticsDTO;
    /**
     * 
     * @type {EntryTicketsDTO}
     * @memberof GetEntriesHistoryResponseDTO
     */
    'tickets': EntryTicketsDTO;
}
/**
 * 
 * @export
 * @interface GetHeroScoresQueryDTO
 */
export interface GetHeroScoresQueryDTO {
    /**
     * Search query
     * @type {string}
     * @memberof GetHeroScoresQueryDTO
     */
    'search': string;
    /**
     * 
     * @type {GetHeroScoresQueryOrderByDTO}
     * @memberof GetHeroScoresQueryDTO
     */
    'orderBy'?: GetHeroScoresQueryOrderByDTO;
    /**
     * Pagination arguments
     * @type {PaginationDTO}
     * @memberof GetHeroScoresQueryDTO
     */
    'pagination'?: PaginationDTO;
}
/**
 * 
 * @export
 * @interface GetHeroScoresQueryHeroesOrderByDTO
 */
export interface GetHeroScoresQueryHeroesOrderByDTO {
    /**
     * Order by followers count
     * @type {string}
     * @memberof GetHeroScoresQueryHeroesOrderByDTO
     */
    'followers_count'?: GetHeroScoresQueryHeroesOrderByDTOFollowersCountEnum;
}

export const GetHeroScoresQueryHeroesOrderByDTOFollowersCountEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type GetHeroScoresQueryHeroesOrderByDTOFollowersCountEnum = typeof GetHeroScoresQueryHeroesOrderByDTOFollowersCountEnum[keyof typeof GetHeroScoresQueryHeroesOrderByDTOFollowersCountEnum];

/**
 * 
 * @export
 * @interface GetHeroScoresQueryOrderByDTO
 */
export interface GetHeroScoresQueryOrderByDTO {
    /**
     * Order by heroes data
     * @type {GetHeroScoresQueryHeroesOrderByDTO}
     * @memberof GetHeroScoresQueryOrderByDTO
     */
    'heroes'?: GetHeroScoresQueryHeroesOrderByDTO;
    /**
     * Order by fantasy score
     * @type {string}
     * @memberof GetHeroScoresQueryOrderByDTO
     */
    'fantasy_score'?: GetHeroScoresQueryOrderByDTOFantasyScoreEnum;
    /**
     * Order by current rank
     * @type {string}
     * @memberof GetHeroScoresQueryOrderByDTO
     */
    'tweet_count'?: GetHeroScoresQueryOrderByDTOTweetCountEnum;
}

export const GetHeroScoresQueryOrderByDTOFantasyScoreEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type GetHeroScoresQueryOrderByDTOFantasyScoreEnum = typeof GetHeroScoresQueryOrderByDTOFantasyScoreEnum[keyof typeof GetHeroScoresQueryOrderByDTOFantasyScoreEnum];
export const GetHeroScoresQueryOrderByDTOTweetCountEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type GetHeroScoresQueryOrderByDTOTweetCountEnum = typeof GetHeroScoresQueryOrderByDTOTweetCountEnum[keyof typeof GetHeroScoresQueryOrderByDTOTweetCountEnum];

/**
 * 
 * @export
 * @interface GetLastActivityCardDto
 */
export interface GetLastActivityCardDto {
    /**
     * 
     * @type {string}
     * @memberof GetLastActivityCardDto
     */
    'id': string;
    /**
     * 
     * @type {GetLastActivityHeroDto}
     * @memberof GetLastActivityCardDto
     */
    'hero': GetLastActivityHeroDto;
    /**
     * 
     * @type {string}
     * @memberof GetLastActivityCardDto
     */
    'hero_rarity_index': string;
    /**
     * 
     * @type {number}
     * @memberof GetLastActivityCardDto
     */
    'rarity': number;
    /**
     * 
     * @type {string}
     * @memberof GetLastActivityCardDto
     */
    'picture': string;
    /**
     * 
     * @type {string}
     * @memberof GetLastActivityCardDto
     */
    'token_id': string;
    /**
     * 
     * @type {number}
     * @memberof GetLastActivityCardDto
     */
    'season': number;
}
/**
 * 
 * @export
 * @interface GetLastActivityDto
 */
export interface GetLastActivityDto {
    /**
     * 
     * @type {string}
     * @memberof GetLastActivityDto
     */
    'type': GetLastActivityDtoTypeEnum;
    /**
     * 
     * @type {GetLastActivityPlayerDto}
     * @memberof GetLastActivityDto
     */
    'player': GetLastActivityPlayerDto;
    /**
     * 
     * @type {GetLastActivityPlayerDto}
     * @memberof GetLastActivityDto
     */
    'player_2': GetLastActivityPlayerDto;
    /**
     * 
     * @type {string}
     * @memberof GetLastActivityDto
     */
    'date': string;
    /**
     * 
     * @type {string}
     * @memberof GetLastActivityDto
     */
    'price'?: string;
    /**
     * 
     * @type {GetLastActivityHeroDto}
     * @memberof GetLastActivityDto
     */
    'hero'?: GetLastActivityHeroDto;
    /**
     * 
     * @type {GetLastActivityCardDto}
     * @memberof GetLastActivityDto
     */
    'card'?: GetLastActivityCardDto;
    /**
     * 
     * @type {Array<GetLastActivityCardDto>}
     * @memberof GetLastActivityDto
     */
    'burnt'?: Array<GetLastActivityCardDto>;
}

export const GetLastActivityDtoTypeEnum = {
    MintPack: 'MINT_PACK',
    BurnCard: 'BURN_CARD',
    LevelUp: 'LEVEL_UP',
    SaveDeck: 'SAVE_DECK',
    Trade: 'TRADE',
    Listing: 'LISTING',
    Bid: 'BID'
} as const;

export type GetLastActivityDtoTypeEnum = typeof GetLastActivityDtoTypeEnum[keyof typeof GetLastActivityDtoTypeEnum];

/**
 * 
 * @export
 * @interface GetLastActivityHeroDto
 */
export interface GetLastActivityHeroDto {
    /**
     * 
     * @type {string}
     * @memberof GetLastActivityHeroDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof GetLastActivityHeroDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GetLastActivityHeroDto
     */
    'handle': string;
}
/**
 * 
 * @export
 * @interface GetLastActivityPlayerDto
 */
export interface GetLastActivityPlayerDto {
    /**
     * 
     * @type {string}
     * @memberof GetLastActivityPlayerDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof GetLastActivityPlayerDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GetLastActivityPlayerDto
     */
    'handle': string;
    /**
     * 
     * @type {string}
     * @memberof GetLastActivityPlayerDto
     */
    'profile_picture': string;
}
/**
 * 
 * @export
 * @interface GetLastActivityQueryDTO
 */
export interface GetLastActivityQueryDTO {
    /**
     * Filter by activity type
     * @type {string}
     * @memberof GetLastActivityQueryDTO
     */
    'activityType'?: GetLastActivityQueryDTOActivityTypeEnum;
    /**
     * Pagination arguments
     * @type {PaginationDTO}
     * @memberof GetLastActivityQueryDTO
     */
    'pagination'?: PaginationDTO;
}

export const GetLastActivityQueryDTOActivityTypeEnum = {
    MintPack: 'MINT_PACK',
    BurnCard: 'BURN_CARD',
    LevelUp: 'LEVEL_UP',
    SaveDeck: 'SAVE_DECK',
    Trade: 'TRADE',
    Listing: 'LISTING',
    Bid: 'BID'
} as const;

export type GetLastActivityQueryDTOActivityTypeEnum = typeof GetLastActivityQueryDTOActivityTypeEnum[keyof typeof GetLastActivityQueryDTOActivityTypeEnum];

/**
 * 
 * @export
 * @interface GetLastEthPriceResponse
 */
export interface GetLastEthPriceResponse {
    /**
     * The last recorded Ethereum price
     * @type {object}
     * @memberof GetLastEthPriceResponse
     */
    'eth_price': object;
    /**
     * Unix timestamp of the last recorded Ethereum price
     * @type {string}
     * @memberof GetLastEthPriceResponse
     */
    'timestamp': string;
}
/**
 * 
 * @export
 * @interface GetMyTacticsEntriesResponse
 */
export interface GetMyTacticsEntriesResponse {
    /**
     * Unique identifier for the tactic
     * @type {string}
     * @memberof GetMyTacticsEntriesResponse
     */
    'id': string;
    /**
     * Start date of the tactic
     * @type {string}
     * @memberof GetMyTacticsEntriesResponse
     */
    'start_date': string;
    /**
     * End date of the tactic
     * @type {string}
     * @memberof GetMyTacticsEntriesResponse
     */
    'end_date': string;
    /**
     * Top 3 entries for the given tactics
     * @type {Array<TacticsTopEntries>}
     * @memberof GetMyTacticsEntriesResponse
     */
    'top_entries': Array<TacticsTopEntries>;
    /**
     * Entries for the current player
     * @type {Array<TacticsEntry>}
     * @memberof GetMyTacticsEntriesResponse
     */
    'entries': Array<TacticsEntry>;
    /**
     * Configuration for the given tactics
     * @type {TacticsEntriesConfig}
     * @memberof GetMyTacticsEntriesResponse
     */
    'config': TacticsEntriesConfig;
}
/**
 * 
 * @export
 * @interface GetTacticsChoicesByIdResponse
 */
export interface GetTacticsChoicesByIdResponse {
    /**
     * Unique identifier for the entry
     * @type {string}
     * @memberof GetTacticsChoicesByIdResponse
     */
    'id': string;
    /**
     * Tactic ID
     * @type {string}
     * @memberof GetTacticsChoicesByIdResponse
     */
    'tactic_id': string;
    /**
     * Hero 1 ID
     * @type {string}
     * @memberof GetTacticsChoicesByIdResponse
     */
    'hero1_id': string | null;
    /**
     * Hero 2 ID
     * @type {string}
     * @memberof GetTacticsChoicesByIdResponse
     */
    'hero2_id': string | null;
    /**
     * Hero 3 ID
     * @type {string}
     * @memberof GetTacticsChoicesByIdResponse
     */
    'hero3_id': string | null;
    /**
     * Hero 4 ID
     * @type {string}
     * @memberof GetTacticsChoicesByIdResponse
     */
    'hero4_id': string | null;
    /**
     * Hero 5 ID
     * @type {string}
     * @memberof GetTacticsChoicesByIdResponse
     */
    'hero5_id': string | null;
    /**
     * Validate deck before
     * @type {string}
     * @memberof GetTacticsChoicesByIdResponse
     */
    'validate_deck_before': string;
    /**
     * 
     * @type {Array<TacticsHeroChoiceResponse>}
     * @memberof GetTacticsChoicesByIdResponse
     */
    'hero_choices': Array<TacticsHeroChoiceResponse>;
}
/**
 * 
 * @export
 * @interface GetTacticsConfigOptionsDTO
 */
export interface GetTacticsConfigOptionsDTO {
    /**
     * 
     * @type {TacticsConfigIncludeDTO}
     * @memberof GetTacticsConfigOptionsDTO
     */
    'include'?: TacticsConfigIncludeDTO;
}
/**
 * 
 * @export
 * @interface GetTacticsConfigQueryDTO
 */
export interface GetTacticsConfigQueryDTO {
    /**
     * options for querying
     * @type {GetTacticsConfigOptionsDTO}
     * @memberof GetTacticsConfigQueryDTO
     */
    'options'?: GetTacticsConfigOptionsDTO;
    /**
     * Pagination arguments
     * @type {PaginationDTO}
     * @memberof GetTacticsConfigQueryDTO
     */
    'pagination'?: PaginationDTO;
}
/**
 * 
 * @export
 * @interface GetTacticsEntriesOptionsDTO
 */
export interface GetTacticsEntriesOptionsDTO {
    /**
     * 
     * @type {TacticsEntryIncludeDTO}
     * @memberof GetTacticsEntriesOptionsDTO
     */
    'include'?: TacticsEntryIncludeDTO;
    /**
     * 
     * @type {TacticsEntrySelectDTO}
     * @memberof GetTacticsEntriesOptionsDTO
     */
    'select'?: TacticsEntrySelectDTO;
    /**
     * Champs distincts
     * @type {string}
     * @memberof GetTacticsEntriesOptionsDTO
     */
    'distinct'?: GetTacticsEntriesOptionsDTODistinctEnum;
    /**
     * 
     * @type {Array<TacticsEntryOrderByDTO>}
     * @memberof GetTacticsEntriesOptionsDTO
     */
    'orderBy'?: Array<TacticsEntryOrderByDTO>;
    /**
     * 
     * @type {TacticsEntryWhereDTO}
     * @memberof GetTacticsEntriesOptionsDTO
     */
    'where'?: TacticsEntryWhereDTO;
}

export const GetTacticsEntriesOptionsDTODistinctEnum = {
    TacticId: 'tactic_id',
    PlayerId: 'player_id',
    Hero1Id: 'hero1_id',
    Hero2Id: 'hero2_id',
    Hero3Id: 'hero3_id',
    Hero4Id: 'hero4_id',
    Hero5Id: 'hero5_id',
    Rank: 'rank',
    Score: 'score',
    Rewards: 'rewards',
    ValidateDeckBefore: 'validate_deck_before',
    Id: 'id',
    Hero1Stars: 'hero1_stars',
    Hero2Stars: 'hero2_stars',
    Hero3Stars: 'hero3_stars',
    Hero4Stars: 'hero4_stars',
    Hero5Stars: 'hero5_stars',
    TicketId: 'ticket_id',
    PreviousRank: 'previous_rank',
    Autocompleted: 'autocompleted',
    AutocompletedAt: 'autocompleted_at',
    CreatedAt: 'created_at',
    UpdatedAt: 'updated_at'
} as const;

export type GetTacticsEntriesOptionsDTODistinctEnum = typeof GetTacticsEntriesOptionsDTODistinctEnum[keyof typeof GetTacticsEntriesOptionsDTODistinctEnum];

/**
 * 
 * @export
 * @interface GetTacticsEntriesQueryDTO
 */
export interface GetTacticsEntriesQueryDTO {
    /**
     * Options for querying entries
     * @type {GetTacticsEntriesOptionsDTO}
     * @memberof GetTacticsEntriesQueryDTO
     */
    'options'?: GetTacticsEntriesOptionsDTO;
    /**
     * Should fill hero or not
     * @type {boolean}
     * @memberof GetTacticsEntriesQueryDTO
     */
    'with_hero'?: boolean;
    /**
     * Pagination arguments
     * @type {PaginationDTO}
     * @memberof GetTacticsEntriesQueryDTO
     */
    'pagination'?: PaginationDTO;
}
/**
 * 
 * @export
 * @interface GetTacticsOptionsDTO
 */
export interface GetTacticsOptionsDTO {
    /**
     * 
     * @type {TacticsWhereDTO}
     * @memberof GetTacticsOptionsDTO
     */
    'where'?: TacticsWhereDTO;
    /**
     * Champs distincts
     * @type {Array<string>}
     * @memberof GetTacticsOptionsDTO
     */
    'distinct'?: Array<GetTacticsOptionsDTODistinctEnum>;
    /**
     * 
     * @type {Array<TacticsOrderByDTO>}
     * @memberof GetTacticsOptionsDTO
     */
    'orderBy'?: Array<TacticsOrderByDTO>;
    /**
     * 
     * @type {TacticsIncludeDTO}
     * @memberof GetTacticsOptionsDTO
     */
    'include'?: TacticsIncludeDTO;
}

export const GetTacticsOptionsDTODistinctEnum = {
    Id: 'id',
    TacticConfigId: 'tactic_config_id',
    StartDate: 'start_date',
    EndDate: 'end_date',
    IsProcessed: 'is_processed',
    CumulatedWeth: 'cumulated_weth',
    HasBeenValidated: 'has_been_validated',
    WalletAddress: 'wallet_address',
    EthPrice: 'eth_price',
    IsRewardsProcessed: 'is_rewards_processed',
    RegistrationOpenned: 'registration_openned',
    Visible: 'visible',
    CreatedAt: 'created_at',
    UpdatedAt: 'updated_at'
} as const;

export type GetTacticsOptionsDTODistinctEnum = typeof GetTacticsOptionsDTODistinctEnum[keyof typeof GetTacticsOptionsDTODistinctEnum];

/**
 * 
 * @export
 * @interface GetTacticsQueryDTO
 */
export interface GetTacticsQueryDTO {
    /**
     * options for querying
     * @type {GetTacticsOptionsDTO}
     * @memberof GetTacticsQueryDTO
     */
    'options'?: GetTacticsOptionsDTO;
    /**
     * Query with total entry or not
     * @type {boolean}
     * @memberof GetTacticsQueryDTO
     */
    'count_entry'?: boolean;
    /**
     * Query with total personal entry or not
     * @type {boolean}
     * @memberof GetTacticsQueryDTO
     */
    'count_personal_entries'?: boolean;
    /**
     * Get currently gains for the player (if logged in)
     * @type {boolean}
     * @memberof GetTacticsQueryDTO
     */
    'include_gains'?: boolean;
    /**
     * Pagination arguments
     * @type {PaginationDTO}
     * @memberof GetTacticsQueryDTO
     */
    'pagination'?: PaginationDTO;
}
/**
 * 
 * @export
 * @interface GetTicketsNewRewardsResponseDTO
 */
export interface GetTicketsNewRewardsResponseDTO {
    /**
     * Unique identifier for the ticket
     * @type {string}
     * @memberof GetTicketsNewRewardsResponseDTO
     */
    'id': string;
    /**
     * 
     * @type {TicketsNewRewardsEntryDTO}
     * @memberof GetTicketsNewRewardsResponseDTO
     */
    'entry': TicketsNewRewardsEntryDTO;
    /**
     * 
     * @type {TicketsNewRewardsRewardsDTO}
     * @memberof GetTicketsNewRewardsResponseDTO
     */
    'tickets_rewards': TicketsNewRewardsRewardsDTO;
}
/**
 * 
 * @export
 * @interface GetTicketsWithEntryResponseDTO
 */
export interface GetTicketsWithEntryResponseDTO {
    /**
     * Unique identifier for the ticket
     * @type {string}
     * @memberof GetTicketsWithEntryResponseDTO
     */
    'id': string;
    /**
     * 
     * @type {TicketsWithEntryDTO}
     * @memberof GetTicketsWithEntryResponseDTO
     */
    'entry': TicketsWithEntryDTO;
    /**
     * 
     * @type {TicketsWithEntryRewardsDTO}
     * @memberof GetTicketsWithEntryResponseDTO
     */
    'tickets_rewards': TicketsWithEntryRewardsDTO;
}
/**
 * 
 * @export
 * @interface GetTotalMoneyDistributedDTO
 */
export interface GetTotalMoneyDistributedDTO {
    /**
     * 
     * @type {number}
     * @memberof GetTotalMoneyDistributedDTO
     */
    'total': number;
}
/**
 * 
 * @export
 * @interface GetTotalTicketsGainsResponseDTO
 */
export interface GetTotalTicketsGainsResponseDTO {
    /**
     * Total ETH rewards
     * @type {number}
     * @memberof GetTotalTicketsGainsResponseDTO
     */
    'reward_eth': number;
    /**
     * Total gold rewards
     * @type {number}
     * @memberof GetTotalTicketsGainsResponseDTO
     */
    'reward_gold': number;
    /**
     * Total cards rewards
     * @type {number}
     * @memberof GetTotalTicketsGainsResponseDTO
     */
    'reward_cards': number;
    /**
     * Total tactic tickets rewards
     * @type {number}
     * @memberof GetTotalTicketsGainsResponseDTO
     */
    'reward_tickets': number;
}
/**
 * 
 * @export
 * @interface GetVoteConfigQueryDTO
 */
export interface GetVoteConfigQueryDTO {
    /**
     * Include only visible vote configurations
     * @type {boolean}
     * @memberof GetVoteConfigQueryDTO
     */
    'only_visible'?: boolean;
    /**
     * Pagination arguments
     * @type {PaginationDTO}
     * @memberof GetVoteConfigQueryDTO
     */
    'pagination'?: PaginationDTO;
}
/**
 * 
 * @export
 * @interface Hero
 */
export interface Hero {
    /**
     * Unique identifier for the hero
     * @type {string}
     * @memberof Hero
     */
    'id': string;
    /**
     * Handle of the hero
     * @type {string}
     * @memberof Hero
     */
    'handle': string;
    /**
     * Name of the hero
     * @type {string}
     * @memberof Hero
     */
    'name': string;
    /**
     * Previous rank of the hero
     * @type {number}
     * @memberof Hero
     */
    'previous_rank': number;
    /**
     * Indicates if the hero is a player
     * @type {boolean}
     * @memberof Hero
     */
    'is_player': boolean;
    /**
     * Indicates if the hero is blue verified
     * @type {boolean}
     * @memberof Hero
     */
    'is_blue_verified': boolean;
    /**
     * Indicates if the hero has a default profile image
     * @type {boolean}
     * @memberof Hero
     */
    'default_profile_image': boolean;
    /**
     * Description of the hero
     * @type {string}
     * @memberof Hero
     */
    'description'?: string;
    /**
     * Count of fast followers
     * @type {number}
     * @memberof Hero
     */
    'fast_followers_count': number;
    /**
     * Count of favourites
     * @type {number}
     * @memberof Hero
     */
    'favourites_count': number;
    /**
     * Count of followers
     * @type {number}
     * @memberof Hero
     */
    'followers_count': number;
    /**
     * Count of friends
     * @type {number}
     * @memberof Hero
     */
    'friends_count': number;
    /**
     * Listed count
     * @type {number}
     * @memberof Hero
     */
    'listed_count': number;
    /**
     * Location of the hero
     * @type {string}
     * @memberof Hero
     */
    'location'?: string;
    /**
     * Media count
     * @type {number}
     * @memberof Hero
     */
    'media_count': number;
    /**
     * Indicates if the hero is possibly sensitive
     * @type {boolean}
     * @memberof Hero
     */
    'possibly_sensitive': boolean;
    /**
     * URL of the profile banner
     * @type {string}
     * @memberof Hero
     */
    'profile_banner_url'?: string;
    /**
     * URL of the profile image in HTTPS
     * @type {string}
     * @memberof Hero
     */
    'profile_image_url_https'?: string;
    /**
     * Indicates if the hero has a banner
     * @type {boolean}
     * @memberof Hero
     */
    'has_banner': boolean;
    /**
     * Indicates if the hero is verified
     * @type {boolean}
     * @memberof Hero
     */
    'verified': boolean;
    /**
     * Creation timestamp
     * @type {string}
     * @memberof Hero
     */
    'created_at': string;
    /**
     * Last update timestamp
     * @type {string}
     * @memberof Hero
     */
    'updated_at': string;
    /**
     * Count of statuses
     * @type {number}
     * @memberof Hero
     */
    'statuses_count': number;
    /**
     * Stars of the hero
     * @type {number}
     * @memberof Hero
     */
    'stars': number;
    /**
     * Player address of the hero
     * @type {string}
     * @memberof Hero
     */
    'player_address'?: string;
    /**
     * Indicates if the hero can be packed
     * @type {boolean}
     * @memberof Hero
     */
    'can_be_packed': boolean;
    /**
     * Previous stars of the hero
     * @type {number}
     * @memberof Hero
     */
    'previous_stars': number;
    /**
     * Star gain of the hero
     * @type {number}
     * @memberof Hero
     */
    'star_gain'?: number;
    /**
     * List of hero_scores
     * @type {Array<OmitTypeClass>}
     * @memberof Hero
     */
    'tactic_scores': Array<OmitTypeClass>;
    /**
     * Volume of trade on hero (optional)
     * @type {number}
     * @memberof Hero
     */
    'volume'?: number;
    /**
     * Last trade on hero (optional)
     * @type {number}
     * @memberof Hero
     */
    'last_sale'?: number;
    /**
     * Floor price of hero (optional)
     * @type {number}
     * @memberof Hero
     */
    'floor'?: number;
    /**
     * Votes from voting module
     * @type {Array<OmitTypeClass>}
     * @memberof Hero
     */
    'votes'?: Array<OmitTypeClass>;
    /**
     * Status of the hero
     * @type {string}
     * @memberof Hero
     */
    'status': string;
    /**
     * Credibility score
     * @type {CredibilityAverage}
     * @memberof Hero
     */
    'credibility_average': CredibilityAverage;
}
/**
 * 
 * @export
 * @interface HeroSupplyDto
 */
export interface HeroSupplyDto {
    /**
     * 
     * @type {number}
     * @memberof HeroSupplyDto
     */
    'rarity': number;
    /**
     * 
     * @type {number}
     * @memberof HeroSupplyDto
     */
    'supply': number;
}
/**
 * 
 * @export
 * @interface HeroWithTacticScores
 */
export interface HeroWithTacticScores {
    /**
     * Handle of the hero
     * @type {string}
     * @memberof HeroWithTacticScores
     */
    'handle': string;
    /**
     * Number of followers the hero has
     * @type {number}
     * @memberof HeroWithTacticScores
     */
    'followers_count'?: number;
    /**
     * Number of stars the hero has
     * @type {number}
     * @memberof HeroWithTacticScores
     */
    'stars': number;
    /**
     * 
     * @type {Array<TacticsHeroScoreResponse>}
     * @memberof HeroWithTacticScores
     */
    'tactic_scores': Array<TacticsHeroScoreResponse>;
}
/**
 * 
 * @export
 * @interface HeroWithVotesCount
 */
export interface HeroWithVotesCount {
    /**
     * Unique identifier for the hero
     * @type {string}
     * @memberof HeroWithVotesCount
     */
    'id': string;
    /**
     * Handle of the hero
     * @type {string}
     * @memberof HeroWithVotesCount
     */
    'handle': string;
    /**
     * Name of the hero
     * @type {string}
     * @memberof HeroWithVotesCount
     */
    'name': string;
    /**
     * Previous rank of the hero
     * @type {number}
     * @memberof HeroWithVotesCount
     */
    'previous_rank': number;
    /**
     * Indicates if the hero is a player
     * @type {boolean}
     * @memberof HeroWithVotesCount
     */
    'is_player': boolean;
    /**
     * Indicates if the hero is blue verified
     * @type {boolean}
     * @memberof HeroWithVotesCount
     */
    'is_blue_verified': boolean;
    /**
     * Indicates if the hero has a default profile image
     * @type {boolean}
     * @memberof HeroWithVotesCount
     */
    'default_profile_image': boolean;
    /**
     * Description of the hero
     * @type {string}
     * @memberof HeroWithVotesCount
     */
    'description'?: string;
    /**
     * Count of fast followers
     * @type {number}
     * @memberof HeroWithVotesCount
     */
    'fast_followers_count': number;
    /**
     * Count of favourites
     * @type {number}
     * @memberof HeroWithVotesCount
     */
    'favourites_count': number;
    /**
     * Count of followers
     * @type {number}
     * @memberof HeroWithVotesCount
     */
    'followers_count': number;
    /**
     * Count of friends
     * @type {number}
     * @memberof HeroWithVotesCount
     */
    'friends_count': number;
    /**
     * Listed count
     * @type {number}
     * @memberof HeroWithVotesCount
     */
    'listed_count': number;
    /**
     * Location of the hero
     * @type {string}
     * @memberof HeroWithVotesCount
     */
    'location'?: string;
    /**
     * Media count
     * @type {number}
     * @memberof HeroWithVotesCount
     */
    'media_count': number;
    /**
     * Indicates if the hero is possibly sensitive
     * @type {boolean}
     * @memberof HeroWithVotesCount
     */
    'possibly_sensitive': boolean;
    /**
     * URL of the profile banner
     * @type {string}
     * @memberof HeroWithVotesCount
     */
    'profile_banner_url'?: string;
    /**
     * URL of the profile image in HTTPS
     * @type {string}
     * @memberof HeroWithVotesCount
     */
    'profile_image_url_https'?: string;
    /**
     * Indicates if the hero has a banner
     * @type {boolean}
     * @memberof HeroWithVotesCount
     */
    'has_banner': boolean;
    /**
     * Indicates if the hero is verified
     * @type {boolean}
     * @memberof HeroWithVotesCount
     */
    'verified': boolean;
    /**
     * Creation timestamp
     * @type {string}
     * @memberof HeroWithVotesCount
     */
    'created_at': string;
    /**
     * Last update timestamp
     * @type {string}
     * @memberof HeroWithVotesCount
     */
    'updated_at': string;
    /**
     * Count of statuses
     * @type {number}
     * @memberof HeroWithVotesCount
     */
    'statuses_count': number;
    /**
     * Stars of the hero
     * @type {number}
     * @memberof HeroWithVotesCount
     */
    'stars': number;
    /**
     * Player address of the hero
     * @type {string}
     * @memberof HeroWithVotesCount
     */
    'player_address'?: string;
    /**
     * Indicates if the hero can be packed
     * @type {boolean}
     * @memberof HeroWithVotesCount
     */
    'can_be_packed': boolean;
    /**
     * Previous stars of the hero
     * @type {number}
     * @memberof HeroWithVotesCount
     */
    'previous_stars': number;
    /**
     * Star gain of the hero
     * @type {number}
     * @memberof HeroWithVotesCount
     */
    'star_gain'?: number;
    /**
     * List of hero_scores
     * @type {Array<OmitTypeClass>}
     * @memberof HeroWithVotesCount
     */
    'tactic_scores': Array<OmitTypeClass>;
    /**
     * Volume of trade on hero (optional)
     * @type {number}
     * @memberof HeroWithVotesCount
     */
    'volume'?: number;
    /**
     * Last trade on hero (optional)
     * @type {number}
     * @memberof HeroWithVotesCount
     */
    'last_sale'?: number;
    /**
     * Floor price of hero (optional)
     * @type {number}
     * @memberof HeroWithVotesCount
     */
    'floor'?: number;
    /**
     * Status of the hero
     * @type {string}
     * @memberof HeroWithVotesCount
     */
    'status': string;
    /**
     * Credibility score
     * @type {CredibilityAverage}
     * @memberof HeroWithVotesCount
     */
    'credibility_average': CredibilityAverage;
    /**
     * Votes from voting module
     * @type {Array<VoteWithoutInclude>}
     * @memberof HeroWithVotesCount
     */
    'votes'?: Array<VoteWithoutInclude>;
    /**
     * Number of votes for the hero
     * @type {number}
     * @memberof HeroWithVotesCount
     */
    'fan_count': number;
    /**
     * Average of the last 4 scores for the hero
     * @type {number}
     * @memberof HeroWithVotesCount
     */
    'last_4_scores_avg': number;
}
/**
 * 
 * @export
 * @interface MetaDTO
 */
export interface MetaDTO {
    /**
     * Total number of items
     * @type {number}
     * @memberof MetaDTO
     */
    'total': number;
    /**
     * Last page number
     * @type {number}
     * @memberof MetaDTO
     */
    'lastPage': number;
    /**
     * Current page number
     * @type {number}
     * @memberof MetaDTO
     */
    'currentPage': number;
    /**
     * Number of items per page
     * @type {number}
     * @memberof MetaDTO
     */
    'perPage': number;
    /**
     * Previous page number
     * @type {number}
     * @memberof MetaDTO
     */
    'prev': number | null;
    /**
     * Next page number
     * @type {number}
     * @memberof MetaDTO
     */
    'next': number | null;
}
/**
 * 
 * @export
 * @interface NumberFilterDTO
 */
export interface NumberFilterDTO {
    /**
     * 
     * @type {number}
     * @memberof NumberFilterDTO
     */
    'equals'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof NumberFilterDTO
     */
    'in'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof NumberFilterDTO
     */
    'notIn'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof NumberFilterDTO
     */
    'lt'?: number;
    /**
     * 
     * @type {number}
     * @memberof NumberFilterDTO
     */
    'lte'?: number;
    /**
     * 
     * @type {number}
     * @memberof NumberFilterDTO
     */
    'gt'?: number;
    /**
     * 
     * @type {number}
     * @memberof NumberFilterDTO
     */
    'gte'?: number;
    /**
     * 
     * @type {NumberFilterDTO}
     * @memberof NumberFilterDTO
     */
    'not'?: NumberFilterDTO;
}
/**
 * 
 * @export
 * @interface OmitTypeClass
 */
export interface OmitTypeClass {
    /**
     * Tactic ID
     * @type {string}
     * @memberof OmitTypeClass
     */
    'tactic_id': string;
    /**
     * Hero ID
     * @type {string}
     * @memberof OmitTypeClass
     */
    'hero_id': string;
    /**
     * Stars
     * @type {number}
     * @memberof OmitTypeClass
     */
    'stars': number;
    /**
     * Fantasy score
     * @type {object}
     * @memberof OmitTypeClass
     */
    'fantasy_score': object;
    /**
     * Hero score ID
     * @type {string}
     * @memberof OmitTypeClass
     */
    'id': string;
    /**
     * Tweet count
     * @type {number}
     * @memberof OmitTypeClass
     */
    'tweet_count': number | null;
    /**
     * Current rank
     * @type {number}
     * @memberof OmitTypeClass
     */
    'current_rank': number | null;
    /**
     * Previous rank
     * @type {number}
     * @memberof OmitTypeClass
     */
    'previous_rank': number | null;
    /**
     * Views
     * @type {number}
     * @memberof OmitTypeClass
     */
    'views': number | null;
    /**
     * Updated at
     * @type {string}
     * @memberof OmitTypeClass
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface PaginatedCardResult
 */
export interface PaginatedCardResult {
    /**
     * Data items
     * @type {Array<Card>}
     * @memberof PaginatedCardResult
     */
    'data': Array<Card>;
    /**
     * Pagination metadata
     * @type {MetaDTO}
     * @memberof PaginatedCardResult
     */
    'meta': MetaDTO;
}
/**
 * 
 * @export
 * @interface PaginatedEnrichedTweetResult
 */
export interface PaginatedEnrichedTweetResult {
    /**
     * Data items
     * @type {Array<EnrichedTweet>}
     * @memberof PaginatedEnrichedTweetResult
     */
    'data': Array<EnrichedTweet>;
    /**
     * Pagination metadata
     * @type {MetaDTO}
     * @memberof PaginatedEnrichedTweetResult
     */
    'meta': MetaDTO;
}
/**
 * 
 * @export
 * @interface PaginatedGetLastActivityDtoResult
 */
export interface PaginatedGetLastActivityDtoResult {
    /**
     * Data items
     * @type {Array<GetLastActivityDto>}
     * @memberof PaginatedGetLastActivityDtoResult
     */
    'data': Array<GetLastActivityDto>;
    /**
     * Pagination metadata
     * @type {MetaDTO}
     * @memberof PaginatedGetLastActivityDtoResult
     */
    'meta': MetaDTO;
}
/**
 * 
 * @export
 * @interface PaginatedHeroResult
 */
export interface PaginatedHeroResult {
    /**
     * Data items
     * @type {Array<Hero>}
     * @memberof PaginatedHeroResult
     */
    'data': Array<Hero>;
    /**
     * Pagination metadata
     * @type {MetaDTO}
     * @memberof PaginatedHeroResult
     */
    'meta': MetaDTO;
}
/**
 * 
 * @export
 * @interface PaginatedPlayerResult
 */
export interface PaginatedPlayerResult {
    /**
     * Data items
     * @type {Array<Player>}
     * @memberof PaginatedPlayerResult
     */
    'data': Array<Player>;
    /**
     * Pagination metadata
     * @type {MetaDTO}
     * @memberof PaginatedPlayerResult
     */
    'meta': MetaDTO;
}
/**
 * 
 * @export
 * @interface PaginatedTacticsConfigResult
 */
export interface PaginatedTacticsConfigResult {
    /**
     * Data items
     * @type {Array<TacticsConfig>}
     * @memberof PaginatedTacticsConfigResult
     */
    'data': Array<TacticsConfig>;
    /**
     * Pagination metadata
     * @type {MetaDTO}
     * @memberof PaginatedTacticsConfigResult
     */
    'meta': MetaDTO;
}
/**
 * 
 * @export
 * @interface PaginatedTacticsEntryResult
 */
export interface PaginatedTacticsEntryResult {
    /**
     * Data items
     * @type {Array<TacticsEntry>}
     * @memberof PaginatedTacticsEntryResult
     */
    'data': Array<TacticsEntry>;
    /**
     * Pagination metadata
     * @type {MetaDTO}
     * @memberof PaginatedTacticsEntryResult
     */
    'meta': MetaDTO;
}
/**
 * 
 * @export
 * @interface PaginatedTacticsHeroScoreResult
 */
export interface PaginatedTacticsHeroScoreResult {
    /**
     * Data items
     * @type {Array<TacticsHeroScore>}
     * @memberof PaginatedTacticsHeroScoreResult
     */
    'data': Array<TacticsHeroScore>;
    /**
     * Pagination metadata
     * @type {MetaDTO}
     * @memberof PaginatedTacticsHeroScoreResult
     */
    'meta': MetaDTO;
}
/**
 * 
 * @export
 * @interface PaginatedTacticsResult
 */
export interface PaginatedTacticsResult {
    /**
     * Data items
     * @type {Array<Tactics>}
     * @memberof PaginatedTacticsResult
     */
    'data': Array<Tactics>;
    /**
     * Pagination metadata
     * @type {MetaDTO}
     * @memberof PaginatedTacticsResult
     */
    'meta': MetaDTO;
}
/**
 * 
 * @export
 * @interface PaginatedTrendingHeroDTOResult
 */
export interface PaginatedTrendingHeroDTOResult {
    /**
     * Data items
     * @type {Array<TrendingHeroDTO>}
     * @memberof PaginatedTrendingHeroDTOResult
     */
    'data': Array<TrendingHeroDTO>;
    /**
     * Pagination metadata
     * @type {MetaDTO}
     * @memberof PaginatedTrendingHeroDTOResult
     */
    'meta': MetaDTO;
}
/**
 * 
 * @export
 * @interface PaginatedVoteConfigResult
 */
export interface PaginatedVoteConfigResult {
    /**
     * Data items
     * @type {Array<VoteConfig>}
     * @memberof PaginatedVoteConfigResult
     */
    'data': Array<VoteConfig>;
    /**
     * Pagination metadata
     * @type {MetaDTO}
     * @memberof PaginatedVoteConfigResult
     */
    'meta': MetaDTO;
}
/**
 * 
 * @export
 * @interface PaginationDTO
 */
export interface PaginationDTO {
    /**
     * Page number
     * @type {number}
     * @memberof PaginationDTO
     */
    'page'?: number;
    /**
     * Number of items per page
     * @type {number}
     * @memberof PaginationDTO
     */
    'limit'?: number;
}
/**
 * 
 * @export
 * @interface PayoutObject
 */
export interface PayoutObject {
    /**
     * The end value
     * @type {number}
     * @memberof PayoutObject
     */
    'end': number;
    /**
     * The start value
     * @type {number}
     * @memberof PayoutObject
     */
    'start': number;
    /**
     * The payout amount
     * @type {number}
     * @memberof PayoutObject
     */
    'payout': number;
}
/**
 * 
 * @export
 * @interface PayoutStructure
 */
export interface PayoutStructure {
    /**
     * ID of the payout structure
     * @type {string}
     * @memberof PayoutStructure
     */
    'id': string;
    /**
     * Entry amount
     * @type {number}
     * @memberof PayoutStructure
     */
    'entry_price_tickets': number;
    /**
     * Maximum tickets
     * @type {number}
     * @memberof PayoutStructure
     */
    'max_tickets': number;
    /**
     * Price pool
     * @type {number}
     * @memberof PayoutStructure
     */
    'price_pool': number;
    /**
     * Type of the payout structure
     * @type {string}
     * @memberof PayoutStructure
     */
    'type': string;
    /**
     * Payout details
     * @type {Array<PayoutObject>}
     * @memberof PayoutStructure
     */
    'payout': Array<PayoutObject>;
    /**
     * Creation date
     * @type {string}
     * @memberof PayoutStructure
     */
    'created_at': string;
    /**
     * Price pool in gold
     * @type {number}
     * @memberof PayoutStructure
     */
    'price_pool_gold': number;
    /**
     * Payout details in gold
     * @type {Array<PayoutObject>}
     * @memberof PayoutStructure
     */
    'payout_gold': Array<PayoutObject>;
    /**
     * Price pool in gold
     * @type {number}
     * @memberof PayoutStructure
     */
    'price_pool_cards': number;
    /**
     * Payout details in cards
     * @type {Array<PayoutObject>}
     * @memberof PayoutStructure
     */
    'payout_cards': Array<PayoutObject>;
    /**
     * Price pool in gold
     * @type {number}
     * @memberof PayoutStructure
     */
    'price_pool_tickets': number;
    /**
     * Payout details in gold
     * @type {Array<PayoutObject>}
     * @memberof PayoutStructure
     */
    'payout_tickets': Array<PayoutObject>;
}
/**
 * 
 * @export
 * @interface PickTypeClass
 */
export interface PickTypeClass {
    /**
     * 
     * @type {string}
     * @memberof PickTypeClass
     */
    'handle': string;
}
/**
 * 
 * @export
 * @interface Player
 */
export interface Player {
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    'handle': string;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    'profile_picture': string;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    'twitter_id': string;
    /**
     * 
     * @type {number}
     * @memberof Player
     */
    'fantasy_points': number;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    'updated_at': string;
    /**
     * 
     * @type {number}
     * @memberof Player
     */
    'fantasy_points_referrals': number;
    /**
     * 
     * @type {number}
     * @memberof Player
     */
    'stars': number;
    /**
     * 
     * @type {number}
     * @memberof Player
     */
    'league': number;
    /**
     * 
     * @type {boolean}
     * @memberof Player
     */
    'is_hero': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Player
     */
    'is_onboarding_done': boolean;
    /**
     * Gold as a Decimal value
     * @type {object}
     * @memberof Player
     */
    'gold': object;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    'tactics_referral_settings_id': string;
}
/**
 * 
 * @export
 * @interface QuestConfig
 */
export interface QuestConfig {
    /**
     * 
     * @type {string}
     * @memberof QuestConfig
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof QuestConfig
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof QuestConfig
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof QuestConfig
     */
    'quest_type': string;
    /**
     * 
     * @type {string}
     * @memberof QuestConfig
     */
    'period': string;
    /**
     * 
     * @type {boolean}
     * @memberof QuestConfig
     */
    'has_multiple_thresholds': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof QuestConfig
     */
    'active': boolean;
    /**
     * 
     * @type {string}
     * @memberof QuestConfig
     */
    'start_date': string;
    /**
     * 
     * @type {string}
     * @memberof QuestConfig
     */
    'end_date'?: string | null;
    /**
     * 
     * @type {Array<QuestThreshold>}
     * @memberof QuestConfig
     */
    'thresholds': Array<QuestThreshold>;
    /**
     * 
     * @type {string}
     * @memberof QuestConfig
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof QuestConfig
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface QuestProgressDto
 */
export interface QuestProgressDto {
    /**
     * 
     * @type {string}
     * @memberof QuestProgressDto
     */
    'quest_id': string;
    /**
     * 
     * @type {string}
     * @memberof QuestProgressDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof QuestProgressDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof QuestProgressDto
     */
    'quest_type': string;
    /**
     * 
     * @type {string}
     * @memberof QuestProgressDto
     */
    'period': string;
    /**
     * 
     * @type {boolean}
     * @memberof QuestProgressDto
     */
    'active': boolean;
    /**
     * 
     * @type {string}
     * @memberof QuestProgressDto
     */
    'start_date': string;
    /**
     * 
     * @type {string}
     * @memberof QuestProgressDto
     */
    'end_date': string | null;
    /**
     * 
     * @type {number}
     * @memberof QuestProgressDto
     */
    'player_progress': number;
    /**
     * 
     * @type {ThresholdDto}
     * @memberof QuestProgressDto
     */
    'next_threshold': ThresholdDto;
    /**
     * 
     * @type {{ [key: string]: QuestProgressDtoCompletedThresholdsValue; }}
     * @memberof QuestProgressDto
     */
    'completed_thresholds': { [key: string]: QuestProgressDtoCompletedThresholdsValue; };
    /**
     * 
     * @type {Array<ThresholdDto>}
     * @memberof QuestProgressDto
     */
    'unclaimed_thresholds': Array<ThresholdDto>;
}
/**
 * 
 * @export
 * @interface QuestProgressDtoCompletedThresholdsValue
 */
export interface QuestProgressDtoCompletedThresholdsValue {
    /**
     * 
     * @type {string}
     * @memberof QuestProgressDtoCompletedThresholdsValue
     */
    'completed_at'?: string;
}
/**
 * 
 * @export
 * @interface QuestThreshold
 */
export interface QuestThreshold {
    /**
     * 
     * @type {string}
     * @memberof QuestThreshold
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof QuestThreshold
     */
    'quest_id': string;
    /**
     * 
     * @type {number}
     * @memberof QuestThreshold
     */
    'threshold_value': number;
    /**
     * 
     * @type {string}
     * @memberof QuestThreshold
     */
    'reward_type': string;
    /**
     * 
     * @type {number}
     * @memberof QuestThreshold
     */
    'reward_amount': number;
    /**
     * 
     * @type {string}
     * @memberof QuestThreshold
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof QuestThreshold
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface StringFilterDTO
 */
export interface StringFilterDTO {
    /**
     * 
     * @type {string}
     * @memberof StringFilterDTO
     */
    'equals'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof StringFilterDTO
     */
    'in'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof StringFilterDTO
     */
    'notIn'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof StringFilterDTO
     */
    'lt'?: string;
    /**
     * 
     * @type {string}
     * @memberof StringFilterDTO
     */
    'lte'?: string;
    /**
     * 
     * @type {string}
     * @memberof StringFilterDTO
     */
    'gt'?: string;
    /**
     * 
     * @type {string}
     * @memberof StringFilterDTO
     */
    'gte'?: string;
    /**
     * 
     * @type {string}
     * @memberof StringFilterDTO
     */
    'contains'?: string;
    /**
     * 
     * @type {string}
     * @memberof StringFilterDTO
     */
    'startsWith'?: string;
    /**
     * 
     * @type {string}
     * @memberof StringFilterDTO
     */
    'endsWith'?: string;
    /**
     * 
     * @type {string}
     * @memberof StringFilterDTO
     */
    'mode'?: StringFilterDTOModeEnum;
    /**
     * 
     * @type {StringFilterDTO}
     * @memberof StringFilterDTO
     */
    'not'?: StringFilterDTO;
}

export const StringFilterDTOModeEnum = {
    Default: 'default',
    Insensitive: 'insensitive'
} as const;

export type StringFilterDTOModeEnum = typeof StringFilterDTOModeEnum[keyof typeof StringFilterDTOModeEnum];

/**
 * 
 * @export
 * @interface Tactics
 */
export interface Tactics {
    /**
     * Unique identifier for the tactic
     * @type {string}
     * @memberof Tactics
     */
    'id': string;
    /**
     * Identifier for the tactic configuration
     * @type {string}
     * @memberof Tactics
     */
    'tactic_config_id': string;
    /**
     * Start date of the tactic
     * @type {string}
     * @memberof Tactics
     */
    'start_date': string;
    /**
     * End date of the tactic
     * @type {string}
     * @memberof Tactics
     */
    'end_date': string;
    /**
     * Whether the tactic is processed
     * @type {boolean}
     * @memberof Tactics
     */
    'is_processed': boolean;
    /**
     * Cumulated WETH amount
     * @type {object}
     * @memberof Tactics
     */
    'cumulated_weth': object;
    /**
     * Wallet address
     * @type {string}
     * @memberof Tactics
     */
    'wallet_address': string;
    /**
     * ETH price
     * @type {object}
     * @memberof Tactics
     */
    'eth_price': object;
    /**
     * Whether the rewards are processed
     * @type {boolean}
     * @memberof Tactics
     */
    'is_rewards_processed': boolean;
    /**
     * Whether the registration is opened
     * @type {boolean}
     * @memberof Tactics
     */
    'registration_openned': boolean;
    /**
     * Whether the tactic is visible
     * @type {boolean}
     * @memberof Tactics
     */
    'visible': boolean;
    /**
     * Creation timestamp
     * @type {string}
     * @memberof Tactics
     */
    'created_at': string;
    /**
     * Last update timestamp
     * @type {string}
     * @memberof Tactics
     */
    'updated_at': string;
    /**
     * Tactic has been validated ?
     * @type {boolean}
     * @memberof Tactics
     */
    'has_been_validated': boolean;
    /**
     * Total entries in tactic
     * @type {number}
     * @memberof Tactics
     */
    'total_players': number;
    /**
     * Total personal entries in tactic
     * @type {number}
     * @memberof Tactics
     */
    'total_personal_entries': number;
    /**
     * Total gains for the player
     * @type {GetTotalTicketsGainsResponseDTO}
     * @memberof Tactics
     */
    'gains': GetTotalTicketsGainsResponseDTO;
    /**
     * 
     * @type {TacticsConfig}
     * @memberof Tactics
     */
    'config'?: TacticsConfig | null;
}
/**
 * Config for the tactic
 * @export
 * @interface TacticsConfig
 */
export interface TacticsConfig {
    /**
     * Unique identifier for the config
     * @type {string}
     * @memberof TacticsConfig
     */
    'id': string;
    /**
     * Name of the tactic
     * @type {string}
     * @memberof TacticsConfig
     */
    'name': string;
    /**
     * Duration of the tactic in hours
     * @type {number}
     * @memberof TacticsConfig
     */
    'duration': number;
    /**
     * Entry price as a Decimal value
     * @type {object}
     * @memberof TacticsConfig
     */
    'entry_price': object;
    /**
     * Flat fee as a Decimal value
     * @type {object}
     * @memberof TacticsConfig
     */
    'flat_fee': object;
    /**
     * Payout model for the tactic
     * @type {string}
     * @memberof TacticsConfig
     */
    'payout_model': string;
    /**
     * Flags for additional configuration
     * @type {object}
     * @memberof TacticsConfig
     */
    'flags': object;
    /**
     * Maximum stars for the tactic
     * @type {number}
     * @memberof TacticsConfig
     */
    'max_stars': number;
    /**
     * Whether the tactic is activated
     * @type {boolean}
     * @memberof TacticsConfig
     */
    'activated': boolean;
    /**
     * Addresses pool as an array of objects
     * @type {Array<AddressPoolItem>}
     * @memberof TacticsConfig
     */
    'addresses_pool': Array<AddressPoolItem>;
    /**
     * Identifier for the payout structure
     * @type {string}
     * @memberof TacticsConfig
     */
    'payout_structure_id': string;
    /**
     * Start hour for the tactic
     * @type {number}
     * @memberof TacticsConfig
     */
    'start_hour': number;
    /**
     * Whether to create a new tactic
     * @type {boolean}
     * @memberof TacticsConfig
     */
    'create_new_tactic': boolean;
    /**
     * 
     * @type {TacticsConfigPayoutStructure}
     * @memberof TacticsConfig
     */
    'payout_structure'?: TacticsConfigPayoutStructure | null;
    /**
     * Created at
     * @type {string}
     * @memberof TacticsConfig
     */
    'created_at': string;
    /**
     * Created at
     * @type {string}
     * @memberof TacticsConfig
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface TacticsConfigIncludeDTO
 */
export interface TacticsConfigIncludeDTO {
    /**
     * Include payout structure
     * @type {boolean}
     * @memberof TacticsConfigIncludeDTO
     */
    'payout_structure'?: boolean;
}
/**
 * Payout structure details
 * @export
 * @interface TacticsConfigPayoutStructure
 */
export interface TacticsConfigPayoutStructure {
    /**
     * ID of the payout structure
     * @type {string}
     * @memberof TacticsConfigPayoutStructure
     */
    'id': string;
    /**
     * Entry amount
     * @type {number}
     * @memberof TacticsConfigPayoutStructure
     */
    'entry_price_tickets': number;
    /**
     * Maximum tickets
     * @type {number}
     * @memberof TacticsConfigPayoutStructure
     */
    'max_tickets': number;
    /**
     * Price pool
     * @type {number}
     * @memberof TacticsConfigPayoutStructure
     */
    'price_pool': number;
    /**
     * Type of the payout structure
     * @type {string}
     * @memberof TacticsConfigPayoutStructure
     */
    'type': string;
    /**
     * Payout details
     * @type {Array<PayoutObject>}
     * @memberof TacticsConfigPayoutStructure
     */
    'payout': Array<PayoutObject>;
    /**
     * Creation date
     * @type {string}
     * @memberof TacticsConfigPayoutStructure
     */
    'created_at': string;
    /**
     * Price pool in gold
     * @type {number}
     * @memberof TacticsConfigPayoutStructure
     */
    'price_pool_gold': number;
    /**
     * Payout details in gold
     * @type {Array<PayoutObject>}
     * @memberof TacticsConfigPayoutStructure
     */
    'payout_gold': Array<PayoutObject>;
    /**
     * Price pool in gold
     * @type {number}
     * @memberof TacticsConfigPayoutStructure
     */
    'price_pool_cards': number;
    /**
     * Payout details in cards
     * @type {Array<PayoutObject>}
     * @memberof TacticsConfigPayoutStructure
     */
    'payout_cards': Array<PayoutObject>;
    /**
     * Price pool in gold
     * @type {number}
     * @memberof TacticsConfigPayoutStructure
     */
    'price_pool_tickets': number;
    /**
     * Payout details in gold
     * @type {Array<PayoutObject>}
     * @memberof TacticsConfigPayoutStructure
     */
    'payout_tickets': Array<PayoutObject>;
}
/**
 * 
 * @export
 * @interface TacticsEntriesConfig
 */
export interface TacticsEntriesConfig {
    /**
     * Name of the tactic
     * @type {string}
     * @memberof TacticsEntriesConfig
     */
    'name': string;
    /**
     * Payout Structure
     * @type {TacticsEntriesConfigPayoutStructure}
     * @memberof TacticsEntriesConfig
     */
    'payout_structure': TacticsEntriesConfigPayoutStructure;
}
/**
 * 
 * @export
 * @interface TacticsEntriesConfigPayoutStructure
 */
export interface TacticsEntriesConfigPayoutStructure {
    /**
     * Entry amount
     * @type {number}
     * @memberof TacticsEntriesConfigPayoutStructure
     */
    'entry_price_tickets': number;
    /**
     * Price pool
     * @type {number}
     * @memberof TacticsEntriesConfigPayoutStructure
     */
    'price_pool': number;
    /**
     * Payout details
     * @type {Array<PayoutObject>}
     * @memberof TacticsEntriesConfigPayoutStructure
     */
    'payout': Array<PayoutObject>;
    /**
     * Price pool in gold
     * @type {number}
     * @memberof TacticsEntriesConfigPayoutStructure
     */
    'price_pool_gold': number;
    /**
     * Payout details in gold
     * @type {Array<PayoutObject>}
     * @memberof TacticsEntriesConfigPayoutStructure
     */
    'payout_gold': Array<PayoutObject>;
    /**
     * Price pool in gold
     * @type {number}
     * @memberof TacticsEntriesConfigPayoutStructure
     */
    'price_pool_cards': number;
    /**
     * Payout details in cards
     * @type {Array<PayoutObject>}
     * @memberof TacticsEntriesConfigPayoutStructure
     */
    'payout_cards': Array<PayoutObject>;
    /**
     * Price pool in gold
     * @type {number}
     * @memberof TacticsEntriesConfigPayoutStructure
     */
    'price_pool_tickets': number;
    /**
     * Payout details in gold
     * @type {Array<PayoutObject>}
     * @memberof TacticsEntriesConfigPayoutStructure
     */
    'payout_tickets': Array<PayoutObject>;
}
/**
 * 
 * @export
 * @interface TacticsEntry
 */
export interface TacticsEntry {
    /**
     * Unique identifier for the entry
     * @type {string}
     * @memberof TacticsEntry
     */
    'id': string;
    /**
     * Tactic ID
     * @type {string}
     * @memberof TacticsEntry
     */
    'tactic_id': string;
    /**
     * Player ID
     * @type {string}
     * @memberof TacticsEntry
     */
    'player_id': string;
    /**
     * Hero 1 ID
     * @type {string}
     * @memberof TacticsEntry
     */
    'hero1_id': string | null;
    /**
     * Hero 2 ID
     * @type {string}
     * @memberof TacticsEntry
     */
    'hero2_id': string | null;
    /**
     * Hero 3 ID
     * @type {string}
     * @memberof TacticsEntry
     */
    'hero3_id': string | null;
    /**
     * Hero 4 ID
     * @type {string}
     * @memberof TacticsEntry
     */
    'hero4_id': string | null;
    /**
     * Hero 5 ID
     * @type {string}
     * @memberof TacticsEntry
     */
    'hero5_id': string | null;
    /**
     * Rank
     * @type {number}
     * @memberof TacticsEntry
     */
    'rank': number | null;
    /**
     * Score
     * @type {string}
     * @memberof TacticsEntry
     */
    'score': string | null;
    /**
     * Rewards
     * @type {object}
     * @memberof TacticsEntry
     */
    'rewards': object | null;
    /**
     * Validate deck before
     * @type {string}
     * @memberof TacticsEntry
     */
    'validate_deck_before': string;
    /**
     * Hero 1 stars
     * @type {number}
     * @memberof TacticsEntry
     */
    'hero1_stars': number | null;
    /**
     * Hero 2 stars
     * @type {number}
     * @memberof TacticsEntry
     */
    'hero2_stars': number | null;
    /**
     * Hero 3 stars
     * @type {number}
     * @memberof TacticsEntry
     */
    'hero3_stars': number | null;
    /**
     * Hero 4 stars
     * @type {number}
     * @memberof TacticsEntry
     */
    'hero4_stars': number | null;
    /**
     * Hero 5 stars
     * @type {number}
     * @memberof TacticsEntry
     */
    'hero5_stars': number | null;
    /**
     * Ticket ID
     * @type {string}
     * @memberof TacticsEntry
     */
    'ticket_id': string;
    /**
     * Previous rank
     * @type {number}
     * @memberof TacticsEntry
     */
    'previous_rank': number | null;
    /**
     * Autocompleted
     * @type {boolean}
     * @memberof TacticsEntry
     */
    'autocompleted': boolean;
    /**
     * Autocompleted at
     * @type {string}
     * @memberof TacticsEntry
     */
    'autocompleted_at': string | null;
    /**
     * Created at
     * @type {string}
     * @memberof TacticsEntry
     */
    'created_at': string;
    /**
     * Updated at
     * @type {string}
     * @memberof TacticsEntry
     */
    'updated_at': string;
    /**
     * 
     * @type {TacticsEntryPlayers}
     * @memberof TacticsEntry
     */
    'players'?: TacticsEntryPlayers | null;
    /**
     * 
     * @type {TacticsEntryTickets}
     * @memberof TacticsEntry
     */
    'tickets'?: TacticsEntryTickets | null;
    /**
     * Heroes concerned by heroX_id
     * @type {Array<Hero>}
     * @memberof TacticsEntry
     */
    'heroes': Array<Hero>;
    /**
     * Choices done for the given entry
     * @type {Array<TacticsHeroChoice>}
     * @memberof TacticsEntry
     */
    'hero_choices': Array<TacticsHeroChoice>;
}
/**
 * 
 * @export
 * @interface TacticsEntryIncludeDTO
 */
export interface TacticsEntryIncludeDTO {
    /**
     * Include hero_choices
     * @type {boolean}
     * @memberof TacticsEntryIncludeDTO
     */
    'hero_choices'?: boolean;
    /**
     * Include players
     * @type {boolean}
     * @memberof TacticsEntryIncludeDTO
     */
    'players'?: boolean;
    /**
     * Include tickets
     * @type {boolean}
     * @memberof TacticsEntryIncludeDTO
     */
    'tickets'?: boolean;
}
/**
 * 
 * @export
 * @interface TacticsEntryOrderByDTO
 */
export interface TacticsEntryOrderByDTO {
    /**
     * 
     * @type {string}
     * @memberof TacticsEntryOrderByDTO
     */
    'id'?: TacticsEntryOrderByDTOIdEnum;
    /**
     * 
     * @type {string}
     * @memberof TacticsEntryOrderByDTO
     */
    'tactic_id'?: TacticsEntryOrderByDTOTacticIdEnum;
    /**
     * 
     * @type {string}
     * @memberof TacticsEntryOrderByDTO
     */
    'player_id'?: TacticsEntryOrderByDTOPlayerIdEnum;
    /**
     * 
     * @type {string}
     * @memberof TacticsEntryOrderByDTO
     */
    'hero1_id'?: TacticsEntryOrderByDTOHero1IdEnum;
    /**
     * 
     * @type {string}
     * @memberof TacticsEntryOrderByDTO
     */
    'hero2_id'?: TacticsEntryOrderByDTOHero2IdEnum;
    /**
     * 
     * @type {string}
     * @memberof TacticsEntryOrderByDTO
     */
    'hero3_id'?: TacticsEntryOrderByDTOHero3IdEnum;
    /**
     * 
     * @type {string}
     * @memberof TacticsEntryOrderByDTO
     */
    'hero4_id'?: TacticsEntryOrderByDTOHero4IdEnum;
    /**
     * 
     * @type {string}
     * @memberof TacticsEntryOrderByDTO
     */
    'hero5_id'?: TacticsEntryOrderByDTOHero5IdEnum;
    /**
     * 
     * @type {string}
     * @memberof TacticsEntryOrderByDTO
     */
    'rank'?: TacticsEntryOrderByDTORankEnum;
    /**
     * 
     * @type {string}
     * @memberof TacticsEntryOrderByDTO
     */
    'score'?: TacticsEntryOrderByDTOScoreEnum;
    /**
     * 
     * @type {string}
     * @memberof TacticsEntryOrderByDTO
     */
    'rewards'?: TacticsEntryOrderByDTORewardsEnum;
    /**
     * 
     * @type {string}
     * @memberof TacticsEntryOrderByDTO
     */
    'validate_deck_before'?: TacticsEntryOrderByDTOValidateDeckBeforeEnum;
    /**
     * 
     * @type {string}
     * @memberof TacticsEntryOrderByDTO
     */
    'hero1_stars'?: TacticsEntryOrderByDTOHero1StarsEnum;
    /**
     * 
     * @type {string}
     * @memberof TacticsEntryOrderByDTO
     */
    'hero2_stars'?: TacticsEntryOrderByDTOHero2StarsEnum;
    /**
     * 
     * @type {string}
     * @memberof TacticsEntryOrderByDTO
     */
    'hero3_stars'?: TacticsEntryOrderByDTOHero3StarsEnum;
    /**
     * 
     * @type {string}
     * @memberof TacticsEntryOrderByDTO
     */
    'hero4_stars'?: TacticsEntryOrderByDTOHero4StarsEnum;
    /**
     * 
     * @type {string}
     * @memberof TacticsEntryOrderByDTO
     */
    'hero5_stars'?: TacticsEntryOrderByDTOHero5StarsEnum;
    /**
     * 
     * @type {string}
     * @memberof TacticsEntryOrderByDTO
     */
    'ticket_id'?: TacticsEntryOrderByDTOTicketIdEnum;
    /**
     * 
     * @type {string}
     * @memberof TacticsEntryOrderByDTO
     */
    'previous_rank'?: TacticsEntryOrderByDTOPreviousRankEnum;
    /**
     * 
     * @type {string}
     * @memberof TacticsEntryOrderByDTO
     */
    'autocompleted'?: TacticsEntryOrderByDTOAutocompletedEnum;
    /**
     * 
     * @type {string}
     * @memberof TacticsEntryOrderByDTO
     */
    'autocompleted_at'?: TacticsEntryOrderByDTOAutocompletedAtEnum;
    /**
     * 
     * @type {string}
     * @memberof TacticsEntryOrderByDTO
     */
    'created_at'?: TacticsEntryOrderByDTOCreatedAtEnum;
    /**
     * 
     * @type {string}
     * @memberof TacticsEntryOrderByDTO
     */
    'updated_at'?: TacticsEntryOrderByDTOUpdatedAtEnum;
}

export const TacticsEntryOrderByDTOIdEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsEntryOrderByDTOIdEnum = typeof TacticsEntryOrderByDTOIdEnum[keyof typeof TacticsEntryOrderByDTOIdEnum];
export const TacticsEntryOrderByDTOTacticIdEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsEntryOrderByDTOTacticIdEnum = typeof TacticsEntryOrderByDTOTacticIdEnum[keyof typeof TacticsEntryOrderByDTOTacticIdEnum];
export const TacticsEntryOrderByDTOPlayerIdEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsEntryOrderByDTOPlayerIdEnum = typeof TacticsEntryOrderByDTOPlayerIdEnum[keyof typeof TacticsEntryOrderByDTOPlayerIdEnum];
export const TacticsEntryOrderByDTOHero1IdEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsEntryOrderByDTOHero1IdEnum = typeof TacticsEntryOrderByDTOHero1IdEnum[keyof typeof TacticsEntryOrderByDTOHero1IdEnum];
export const TacticsEntryOrderByDTOHero2IdEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsEntryOrderByDTOHero2IdEnum = typeof TacticsEntryOrderByDTOHero2IdEnum[keyof typeof TacticsEntryOrderByDTOHero2IdEnum];
export const TacticsEntryOrderByDTOHero3IdEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsEntryOrderByDTOHero3IdEnum = typeof TacticsEntryOrderByDTOHero3IdEnum[keyof typeof TacticsEntryOrderByDTOHero3IdEnum];
export const TacticsEntryOrderByDTOHero4IdEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsEntryOrderByDTOHero4IdEnum = typeof TacticsEntryOrderByDTOHero4IdEnum[keyof typeof TacticsEntryOrderByDTOHero4IdEnum];
export const TacticsEntryOrderByDTOHero5IdEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsEntryOrderByDTOHero5IdEnum = typeof TacticsEntryOrderByDTOHero5IdEnum[keyof typeof TacticsEntryOrderByDTOHero5IdEnum];
export const TacticsEntryOrderByDTORankEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsEntryOrderByDTORankEnum = typeof TacticsEntryOrderByDTORankEnum[keyof typeof TacticsEntryOrderByDTORankEnum];
export const TacticsEntryOrderByDTOScoreEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsEntryOrderByDTOScoreEnum = typeof TacticsEntryOrderByDTOScoreEnum[keyof typeof TacticsEntryOrderByDTOScoreEnum];
export const TacticsEntryOrderByDTORewardsEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsEntryOrderByDTORewardsEnum = typeof TacticsEntryOrderByDTORewardsEnum[keyof typeof TacticsEntryOrderByDTORewardsEnum];
export const TacticsEntryOrderByDTOValidateDeckBeforeEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsEntryOrderByDTOValidateDeckBeforeEnum = typeof TacticsEntryOrderByDTOValidateDeckBeforeEnum[keyof typeof TacticsEntryOrderByDTOValidateDeckBeforeEnum];
export const TacticsEntryOrderByDTOHero1StarsEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsEntryOrderByDTOHero1StarsEnum = typeof TacticsEntryOrderByDTOHero1StarsEnum[keyof typeof TacticsEntryOrderByDTOHero1StarsEnum];
export const TacticsEntryOrderByDTOHero2StarsEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsEntryOrderByDTOHero2StarsEnum = typeof TacticsEntryOrderByDTOHero2StarsEnum[keyof typeof TacticsEntryOrderByDTOHero2StarsEnum];
export const TacticsEntryOrderByDTOHero3StarsEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsEntryOrderByDTOHero3StarsEnum = typeof TacticsEntryOrderByDTOHero3StarsEnum[keyof typeof TacticsEntryOrderByDTOHero3StarsEnum];
export const TacticsEntryOrderByDTOHero4StarsEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsEntryOrderByDTOHero4StarsEnum = typeof TacticsEntryOrderByDTOHero4StarsEnum[keyof typeof TacticsEntryOrderByDTOHero4StarsEnum];
export const TacticsEntryOrderByDTOHero5StarsEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsEntryOrderByDTOHero5StarsEnum = typeof TacticsEntryOrderByDTOHero5StarsEnum[keyof typeof TacticsEntryOrderByDTOHero5StarsEnum];
export const TacticsEntryOrderByDTOTicketIdEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsEntryOrderByDTOTicketIdEnum = typeof TacticsEntryOrderByDTOTicketIdEnum[keyof typeof TacticsEntryOrderByDTOTicketIdEnum];
export const TacticsEntryOrderByDTOPreviousRankEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsEntryOrderByDTOPreviousRankEnum = typeof TacticsEntryOrderByDTOPreviousRankEnum[keyof typeof TacticsEntryOrderByDTOPreviousRankEnum];
export const TacticsEntryOrderByDTOAutocompletedEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsEntryOrderByDTOAutocompletedEnum = typeof TacticsEntryOrderByDTOAutocompletedEnum[keyof typeof TacticsEntryOrderByDTOAutocompletedEnum];
export const TacticsEntryOrderByDTOAutocompletedAtEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsEntryOrderByDTOAutocompletedAtEnum = typeof TacticsEntryOrderByDTOAutocompletedAtEnum[keyof typeof TacticsEntryOrderByDTOAutocompletedAtEnum];
export const TacticsEntryOrderByDTOCreatedAtEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsEntryOrderByDTOCreatedAtEnum = typeof TacticsEntryOrderByDTOCreatedAtEnum[keyof typeof TacticsEntryOrderByDTOCreatedAtEnum];
export const TacticsEntryOrderByDTOUpdatedAtEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsEntryOrderByDTOUpdatedAtEnum = typeof TacticsEntryOrderByDTOUpdatedAtEnum[keyof typeof TacticsEntryOrderByDTOUpdatedAtEnum];

/**
 * Players linked to entry
 * @export
 * @interface TacticsEntryPlayers
 */
export interface TacticsEntryPlayers {
    /**
     * 
     * @type {string}
     * @memberof TacticsEntryPlayers
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof TacticsEntryPlayers
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TacticsEntryPlayers
     */
    'handle': string;
    /**
     * 
     * @type {string}
     * @memberof TacticsEntryPlayers
     */
    'profile_picture': string;
    /**
     * 
     * @type {string}
     * @memberof TacticsEntryPlayers
     */
    'twitter_id': string;
    /**
     * 
     * @type {number}
     * @memberof TacticsEntryPlayers
     */
    'fantasy_points': number;
    /**
     * 
     * @type {string}
     * @memberof TacticsEntryPlayers
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof TacticsEntryPlayers
     */
    'updated_at': string;
    /**
     * 
     * @type {number}
     * @memberof TacticsEntryPlayers
     */
    'fantasy_points_referrals': number;
    /**
     * 
     * @type {number}
     * @memberof TacticsEntryPlayers
     */
    'stars': number;
    /**
     * 
     * @type {number}
     * @memberof TacticsEntryPlayers
     */
    'league': number;
    /**
     * 
     * @type {boolean}
     * @memberof TacticsEntryPlayers
     */
    'is_hero': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TacticsEntryPlayers
     */
    'is_onboarding_done': boolean;
    /**
     * Gold as a Decimal value
     * @type {object}
     * @memberof TacticsEntryPlayers
     */
    'gold': object;
    /**
     * 
     * @type {string}
     * @memberof TacticsEntryPlayers
     */
    'tactics_referral_settings_id': string;
}
/**
 * 
 * @export
 * @interface TacticsEntrySelectDTO
 */
export interface TacticsEntrySelectDTO {
    /**
     * 
     * @type {boolean}
     * @memberof TacticsEntrySelectDTO
     */
    'id'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TacticsEntrySelectDTO
     */
    'tactic_id'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TacticsEntrySelectDTO
     */
    'player_id'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TacticsEntrySelectDTO
     */
    'hero1_id'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TacticsEntrySelectDTO
     */
    'hero2_id'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TacticsEntrySelectDTO
     */
    'hero3_id'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TacticsEntrySelectDTO
     */
    'hero4_id'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TacticsEntrySelectDTO
     */
    'hero5_id'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TacticsEntrySelectDTO
     */
    'rank'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TacticsEntrySelectDTO
     */
    'score'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TacticsEntrySelectDTO
     */
    'rewards'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TacticsEntrySelectDTO
     */
    'validate_deck_before'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TacticsEntrySelectDTO
     */
    'hero1_stars'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TacticsEntrySelectDTO
     */
    'hero2_stars'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TacticsEntrySelectDTO
     */
    'hero3_stars'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TacticsEntrySelectDTO
     */
    'hero4_stars'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TacticsEntrySelectDTO
     */
    'hero5_stars'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TacticsEntrySelectDTO
     */
    'ticket_id'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TacticsEntrySelectDTO
     */
    'previous_rank'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TacticsEntrySelectDTO
     */
    'autocompleted'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TacticsEntrySelectDTO
     */
    'autocompleted_at'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TacticsEntrySelectDTO
     */
    'created_at'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TacticsEntrySelectDTO
     */
    'updated_at'?: boolean;
}
/**
 * Tickets linked to entry
 * @export
 * @interface TacticsEntryTickets
 */
export interface TacticsEntryTickets {
    /**
     * Unique identifier for the ticket
     * @type {string}
     * @memberof TacticsEntryTickets
     */
    'id': string;
    /**
     * Identifier for the player
     * @type {string}
     * @memberof TacticsEntryTickets
     */
    'player_id': string;
    /**
     * Array of tactic configuration IDs
     * @type {Array<string>}
     * @memberof TacticsEntryTickets
     */
    'tactic_config_ids': Array<string>;
    /**
     * Transaction hash
     * @type {string}
     * @memberof TacticsEntryTickets
     */
    'tx_hash': string;
    /**
     * Indicates if the ticket is used
     * @type {boolean}
     * @memberof TacticsEntryTickets
     */
    'used': boolean;
    /**
     * Identifier for the payout structure
     * @type {string}
     * @memberof TacticsEntryTickets
     */
    'payout_structure_id': string;
    /**
     * Creation timestamp
     * @type {string}
     * @memberof TacticsEntryTickets
     */
    'created_at': string;
    /**
     * Last update timestamp
     * @type {string}
     * @memberof TacticsEntryTickets
     */
    'updated_at': string;
    /**
     * List of tickets rewards
     * @type {Array<TacticsTicketRewards>}
     * @memberof TacticsEntryTickets
     */
    'rewards': Array<TacticsTicketRewards>;
    /**
     * Tactics entry associated with the ticket
     * @type {TacticsEntry}
     * @memberof TacticsEntryTickets
     */
    'entry': TacticsEntry;
    /**
     * Id of the referrer player
     * @type {string}
     * @memberof TacticsEntryTickets
     */
    'referred_by_id': string;
    /**
     * Referrer of the ticket
     * @type {Player}
     * @memberof TacticsEntryTickets
     */
    'referrer': Player;
}
/**
 * 
 * @export
 * @interface TacticsEntryWhereDTO
 */
export interface TacticsEntryWhereDTO {
    /**
     * 
     * @type {Array<TacticsEntryWhereDTO>}
     * @memberof TacticsEntryWhereDTO
     */
    'AND'?: Array<TacticsEntryWhereDTO>;
    /**
     * 
     * @type {Array<TacticsEntryWhereDTO>}
     * @memberof TacticsEntryWhereDTO
     */
    'OR'?: Array<TacticsEntryWhereDTO>;
    /**
     * 
     * @type {Array<TacticsEntryWhereDTO>}
     * @memberof TacticsEntryWhereDTO
     */
    'NOT'?: Array<TacticsEntryWhereDTO>;
    /**
     * 
     * @type {TacticsEntryWhereDTOId}
     * @memberof TacticsEntryWhereDTO
     */
    'id'?: TacticsEntryWhereDTOId | null;
    /**
     * 
     * @type {TacticsEntryWhereDTOId}
     * @memberof TacticsEntryWhereDTO
     */
    'tactic_id'?: TacticsEntryWhereDTOId | null;
    /**
     * 
     * @type {TacticsEntryWhereDTOId}
     * @memberof TacticsEntryWhereDTO
     */
    'player_id'?: TacticsEntryWhereDTOId | null;
    /**
     * 
     * @type {TacticsEntryWhereDTOId}
     * @memberof TacticsEntryWhereDTO
     */
    'hero1_id'?: TacticsEntryWhereDTOId | null;
    /**
     * 
     * @type {TacticsEntryWhereDTOId}
     * @memberof TacticsEntryWhereDTO
     */
    'hero2_id'?: TacticsEntryWhereDTOId | null;
    /**
     * 
     * @type {TacticsEntryWhereDTOId}
     * @memberof TacticsEntryWhereDTO
     */
    'hero3_id'?: TacticsEntryWhereDTOId | null;
    /**
     * 
     * @type {TacticsEntryWhereDTOId}
     * @memberof TacticsEntryWhereDTO
     */
    'hero4_id'?: TacticsEntryWhereDTOId | null;
    /**
     * 
     * @type {TacticsEntryWhereDTOId}
     * @memberof TacticsEntryWhereDTO
     */
    'hero5_id'?: TacticsEntryWhereDTOId | null;
    /**
     * 
     * @type {TacticsEntryWhereDTORank}
     * @memberof TacticsEntryWhereDTO
     */
    'rank'?: TacticsEntryWhereDTORank | null;
    /**
     * 
     * @type {TacticsEntryWhereDTORank}
     * @memberof TacticsEntryWhereDTO
     */
    'score'?: TacticsEntryWhereDTORank | null;
    /**
     * 
     * @type {TacticsEntryWhereDTOValidateDeckBefore}
     * @memberof TacticsEntryWhereDTO
     */
    'validate_deck_before'?: TacticsEntryWhereDTOValidateDeckBefore;
    /**
     * 
     * @type {TacticsEntryWhereDTORank}
     * @memberof TacticsEntryWhereDTO
     */
    'hero1_stars'?: TacticsEntryWhereDTORank | null;
    /**
     * 
     * @type {TacticsEntryWhereDTORank}
     * @memberof TacticsEntryWhereDTO
     */
    'hero2_stars'?: TacticsEntryWhereDTORank | null;
    /**
     * 
     * @type {TacticsEntryWhereDTORank}
     * @memberof TacticsEntryWhereDTO
     */
    'hero3_stars'?: TacticsEntryWhereDTORank | null;
    /**
     * 
     * @type {TacticsEntryWhereDTORank}
     * @memberof TacticsEntryWhereDTO
     */
    'hero4_stars'?: TacticsEntryWhereDTORank | null;
    /**
     * 
     * @type {TacticsEntryWhereDTORank}
     * @memberof TacticsEntryWhereDTO
     */
    'hero5_stars'?: TacticsEntryWhereDTORank | null;
    /**
     * 
     * @type {TacticsEntryWhereDTOId}
     * @memberof TacticsEntryWhereDTO
     */
    'ticket_id'?: TacticsEntryWhereDTOId | null;
    /**
     * 
     * @type {TacticsEntryWhereDTORank}
     * @memberof TacticsEntryWhereDTO
     */
    'previous_rank'?: TacticsEntryWhereDTORank | null;
    /**
     * 
     * @type {TacticsEntryWhereDTOAutocompleted}
     * @memberof TacticsEntryWhereDTO
     */
    'autocompleted'?: TacticsEntryWhereDTOAutocompleted;
    /**
     * 
     * @type {TacticsEntryWhereDTOValidateDeckBefore}
     * @memberof TacticsEntryWhereDTO
     */
    'autocompleted_at'?: TacticsEntryWhereDTOValidateDeckBefore;
    /**
     * 
     * @type {TacticsEntryWhereDTOValidateDeckBefore}
     * @memberof TacticsEntryWhereDTO
     */
    'created_at'?: TacticsEntryWhereDTOValidateDeckBefore;
    /**
     * 
     * @type {TacticsEntryWhereDTOUpdatedAt}
     * @memberof TacticsEntryWhereDTO
     */
    'updated_at'?: TacticsEntryWhereDTOUpdatedAt;
}
/**
 * @type TacticsEntryWhereDTOAutocompleted
 * @export
 */
export type TacticsEntryWhereDTOAutocompleted = BoolFilterDTO | boolean;

/**
 * @type TacticsEntryWhereDTOId
 * @export
 */
export type TacticsEntryWhereDTOId = StringFilterDTO | string;

/**
 * @type TacticsEntryWhereDTORank
 * @export
 */
export type TacticsEntryWhereDTORank = NumberFilterDTO | number;

/**
 * @type TacticsEntryWhereDTOUpdatedAt
 * @export
 */
export type TacticsEntryWhereDTOUpdatedAt = DateTimeFilterDTO;

/**
 * @type TacticsEntryWhereDTOValidateDeckBefore
 * @export
 */
export type TacticsEntryWhereDTOValidateDeckBefore = DateTimeFilterDTO | string;

/**
 * 
 * @export
 * @interface TacticsHeroChoice
 */
export interface TacticsHeroChoice {
    /**
     * Tactic ID
     * @type {string}
     * @memberof TacticsHeroChoice
     */
    'tactic_id': string;
    /**
     * Hero score ID
     * @type {string}
     * @memberof TacticsHeroChoice
     */
    'hero_id': string;
    /**
     * Tactic entry ID
     * @type {string}
     * @memberof TacticsHeroChoice
     */
    'tactic_entry_id': string;
    /**
     * Hero score linked to hero choice
     * @type {TacticsHeroScore}
     * @memberof TacticsHeroChoice
     */
    'hero_scores': TacticsHeroScore;
    /**
     * Hero info
     * @type {Hero}
     * @memberof TacticsHeroChoice
     */
    'heroes': Hero;
}
/**
 * 
 * @export
 * @interface TacticsHeroChoiceResponse
 */
export interface TacticsHeroChoiceResponse {
    /**
     * Hero score ID
     * @type {string}
     * @memberof TacticsHeroChoiceResponse
     */
    'hero_id': string;
    /**
     * 
     * @type {HeroWithTacticScores}
     * @memberof TacticsHeroChoiceResponse
     */
    'hero': HeroWithTacticScores;
}
/**
 * 
 * @export
 * @interface TacticsHeroScore
 */
export interface TacticsHeroScore {
    /**
     * Tactic ID
     * @type {string}
     * @memberof TacticsHeroScore
     */
    'tactic_id': string;
    /**
     * Hero ID
     * @type {string}
     * @memberof TacticsHeroScore
     */
    'hero_id': string;
    /**
     * Stars
     * @type {number}
     * @memberof TacticsHeroScore
     */
    'stars': number;
    /**
     * Fantasy score
     * @type {object}
     * @memberof TacticsHeroScore
     */
    'fantasy_score': object;
    /**
     * Hero score ID
     * @type {string}
     * @memberof TacticsHeroScore
     */
    'id': string;
    /**
     * Tweet count
     * @type {number}
     * @memberof TacticsHeroScore
     */
    'tweet_count': number | null;
    /**
     * Current rank
     * @type {number}
     * @memberof TacticsHeroScore
     */
    'current_rank': number | null;
    /**
     * Previous rank
     * @type {number}
     * @memberof TacticsHeroScore
     */
    'previous_rank': number | null;
    /**
     * Views
     * @type {number}
     * @memberof TacticsHeroScore
     */
    'views': number | null;
    /**
     * Updated at
     * @type {string}
     * @memberof TacticsHeroScore
     */
    'updated_at': string;
    /**
     * Hero choices linked to hero score
     * @type {Array<TacticsHeroChoice>}
     * @memberof TacticsHeroScore
     */
    'hero_choices': Array<TacticsHeroChoice>;
    /**
     * Hero details linked to hero score
     * @type {Hero}
     * @memberof TacticsHeroScore
     */
    'heroes': Hero;
}
/**
 * 
 * @export
 * @interface TacticsHeroScoreResponse
 */
export interface TacticsHeroScoreResponse {
    /**
     * Current rank of the hero
     * @type {number}
     * @memberof TacticsHeroScoreResponse
     */
    'current_rank': number;
    /**
     * Fantasy score of the hero
     * @type {object}
     * @memberof TacticsHeroScoreResponse
     */
    'fantasy_score': object;
    /**
     * Number of views for the hero
     * @type {number}
     * @memberof TacticsHeroScoreResponse
     */
    'views': number;
    /**
     * Number of tweets mentioning the hero
     * @type {number}
     * @memberof TacticsHeroScoreResponse
     */
    'tweet_count': number;
}
/**
 * 
 * @export
 * @interface TacticsIncludeDTO
 */
export interface TacticsIncludeDTO {
    /**
     * 
     * @type {TacticsIncludeDTOConfig}
     * @memberof TacticsIncludeDTO
     */
    'config'?: TacticsIncludeDTOConfig;
}
/**
 * @type TacticsIncludeDTOConfig
 * Include config with payout_structure (or just config when config = true)
 * @export
 */
export type TacticsIncludeDTOConfig = GetTacticsConfigOptionsDTO | boolean;

/**
 * 
 * @export
 * @interface TacticsOrderByDTO
 */
export interface TacticsOrderByDTO {
    /**
     * 
     * @type {string}
     * @memberof TacticsOrderByDTO
     */
    'id'?: TacticsOrderByDTOIdEnum;
    /**
     * 
     * @type {string}
     * @memberof TacticsOrderByDTO
     */
    'tactic_config_id'?: TacticsOrderByDTOTacticConfigIdEnum;
    /**
     * 
     * @type {string}
     * @memberof TacticsOrderByDTO
     */
    'start_date'?: TacticsOrderByDTOStartDateEnum;
    /**
     * 
     * @type {string}
     * @memberof TacticsOrderByDTO
     */
    'end_date'?: TacticsOrderByDTOEndDateEnum;
    /**
     * 
     * @type {string}
     * @memberof TacticsOrderByDTO
     */
    'is_processed'?: TacticsOrderByDTOIsProcessedEnum;
    /**
     * 
     * @type {string}
     * @memberof TacticsOrderByDTO
     */
    'cumulated_weth'?: TacticsOrderByDTOCumulatedWethEnum;
    /**
     * 
     * @type {string}
     * @memberof TacticsOrderByDTO
     */
    'wallet_address'?: TacticsOrderByDTOWalletAddressEnum;
    /**
     * 
     * @type {string}
     * @memberof TacticsOrderByDTO
     */
    'eth_price'?: TacticsOrderByDTOEthPriceEnum;
    /**
     * 
     * @type {string}
     * @memberof TacticsOrderByDTO
     */
    'is_rewards_processed'?: TacticsOrderByDTOIsRewardsProcessedEnum;
    /**
     * 
     * @type {string}
     * @memberof TacticsOrderByDTO
     */
    'registration_openned'?: TacticsOrderByDTORegistrationOpennedEnum;
    /**
     * 
     * @type {string}
     * @memberof TacticsOrderByDTO
     */
    'visible'?: TacticsOrderByDTOVisibleEnum;
    /**
     * 
     * @type {string}
     * @memberof TacticsOrderByDTO
     */
    'created_at'?: TacticsOrderByDTOCreatedAtEnum;
    /**
     * 
     * @type {string}
     * @memberof TacticsOrderByDTO
     */
    'updated_at'?: TacticsOrderByDTOUpdatedAtEnum;
}

export const TacticsOrderByDTOIdEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsOrderByDTOIdEnum = typeof TacticsOrderByDTOIdEnum[keyof typeof TacticsOrderByDTOIdEnum];
export const TacticsOrderByDTOTacticConfigIdEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsOrderByDTOTacticConfigIdEnum = typeof TacticsOrderByDTOTacticConfigIdEnum[keyof typeof TacticsOrderByDTOTacticConfigIdEnum];
export const TacticsOrderByDTOStartDateEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsOrderByDTOStartDateEnum = typeof TacticsOrderByDTOStartDateEnum[keyof typeof TacticsOrderByDTOStartDateEnum];
export const TacticsOrderByDTOEndDateEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsOrderByDTOEndDateEnum = typeof TacticsOrderByDTOEndDateEnum[keyof typeof TacticsOrderByDTOEndDateEnum];
export const TacticsOrderByDTOIsProcessedEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsOrderByDTOIsProcessedEnum = typeof TacticsOrderByDTOIsProcessedEnum[keyof typeof TacticsOrderByDTOIsProcessedEnum];
export const TacticsOrderByDTOCumulatedWethEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsOrderByDTOCumulatedWethEnum = typeof TacticsOrderByDTOCumulatedWethEnum[keyof typeof TacticsOrderByDTOCumulatedWethEnum];
export const TacticsOrderByDTOWalletAddressEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsOrderByDTOWalletAddressEnum = typeof TacticsOrderByDTOWalletAddressEnum[keyof typeof TacticsOrderByDTOWalletAddressEnum];
export const TacticsOrderByDTOEthPriceEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsOrderByDTOEthPriceEnum = typeof TacticsOrderByDTOEthPriceEnum[keyof typeof TacticsOrderByDTOEthPriceEnum];
export const TacticsOrderByDTOIsRewardsProcessedEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsOrderByDTOIsRewardsProcessedEnum = typeof TacticsOrderByDTOIsRewardsProcessedEnum[keyof typeof TacticsOrderByDTOIsRewardsProcessedEnum];
export const TacticsOrderByDTORegistrationOpennedEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsOrderByDTORegistrationOpennedEnum = typeof TacticsOrderByDTORegistrationOpennedEnum[keyof typeof TacticsOrderByDTORegistrationOpennedEnum];
export const TacticsOrderByDTOVisibleEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsOrderByDTOVisibleEnum = typeof TacticsOrderByDTOVisibleEnum[keyof typeof TacticsOrderByDTOVisibleEnum];
export const TacticsOrderByDTOCreatedAtEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsOrderByDTOCreatedAtEnum = typeof TacticsOrderByDTOCreatedAtEnum[keyof typeof TacticsOrderByDTOCreatedAtEnum];
export const TacticsOrderByDTOUpdatedAtEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type TacticsOrderByDTOUpdatedAtEnum = typeof TacticsOrderByDTOUpdatedAtEnum[keyof typeof TacticsOrderByDTOUpdatedAtEnum];

/**
 * 
 * @export
 * @interface TacticsTicket
 */
export interface TacticsTicket {
    /**
     * Unique identifier for the ticket
     * @type {string}
     * @memberof TacticsTicket
     */
    'id': string;
    /**
     * Identifier for the player
     * @type {string}
     * @memberof TacticsTicket
     */
    'player_id': string;
    /**
     * Array of tactic configuration IDs
     * @type {Array<string>}
     * @memberof TacticsTicket
     */
    'tactic_config_ids': Array<string>;
    /**
     * Transaction hash
     * @type {string}
     * @memberof TacticsTicket
     */
    'tx_hash': string;
    /**
     * Indicates if the ticket is used
     * @type {boolean}
     * @memberof TacticsTicket
     */
    'used': boolean;
    /**
     * Identifier for the payout structure
     * @type {string}
     * @memberof TacticsTicket
     */
    'payout_structure_id': string;
    /**
     * Creation timestamp
     * @type {string}
     * @memberof TacticsTicket
     */
    'created_at': string;
    /**
     * Last update timestamp
     * @type {string}
     * @memberof TacticsTicket
     */
    'updated_at': string;
    /**
     * List of tickets rewards
     * @type {Array<TacticsTicketRewards>}
     * @memberof TacticsTicket
     */
    'rewards': Array<TacticsTicketRewards>;
    /**
     * Tactics entry associated with the ticket
     * @type {TacticsEntry}
     * @memberof TacticsTicket
     */
    'entry': TacticsEntry;
    /**
     * Id of the referrer player
     * @type {string}
     * @memberof TacticsTicket
     */
    'referred_by_id': string;
    /**
     * Referrer of the ticket
     * @type {Player}
     * @memberof TacticsTicket
     */
    'referrer': Player;
}
/**
 * 
 * @export
 * @interface TacticsTicketRewards
 */
export interface TacticsTicketRewards {
    /**
     * Unique identifier for the ticket
     * @type {string}
     * @memberof TacticsTicketRewards
     */
    'ticket_id': string;
    /**
     * Reward amount in ETH
     * @type {object}
     * @memberof TacticsTicketRewards
     */
    'reward_eth': object;
    /**
     * Reward amount in gold
     * @type {object}
     * @memberof TacticsTicketRewards
     */
    'reward_gold': object;
    /**
     * Reward amount in cards
     * @type {number}
     * @memberof TacticsTicketRewards
     */
    'reward_cards': number;
    /**
     * Reward amount in tactic tickets
     * @type {number}
     * @memberof TacticsTicketRewards
     */
    'reward_tickets': number;
    /**
     * Unique identifier for the tactic
     * @type {string}
     * @memberof TacticsTicketRewards
     */
    'tactic_id': string;
    /**
     * Whether the reward has been claimed
     * @type {boolean}
     * @memberof TacticsTicketRewards
     */
    'claimed': boolean;
    /**
     * Creation timestamp
     * @type {string}
     * @memberof TacticsTicketRewards
     */
    'created_at': string;
    /**
     * Whether the reward has been sent
     * @type {boolean}
     * @memberof TacticsTicketRewards
     */
    'is_sent': boolean;
}
/**
 * 
 * @export
 * @interface TacticsTopEntries
 */
export interface TacticsTopEntries {
    /**
     * Entry
     * @type {PickTypeClass}
     * @memberof TacticsTopEntries
     */
    'players': PickTypeClass;
    /**
     * Rank of the entry
     * @type {number}
     * @memberof TacticsTopEntries
     */
    'rank': number;
    /**
     * Score of the entry
     * @type {object}
     * @memberof TacticsTopEntries
     */
    'score': object;
}
/**
 * 
 * @export
 * @interface TacticsWhereDTO
 */
export interface TacticsWhereDTO {
    /**
     * 
     * @type {TacticsWhereDTOStartDate}
     * @memberof TacticsWhereDTO
     */
    'start_date'?: TacticsWhereDTOStartDate;
    /**
     * 
     * @type {TacticsWhereDTOStartDate}
     * @memberof TacticsWhereDTO
     */
    'end_date'?: TacticsWhereDTOStartDate;
    /**
     * 
     * @type {TacticsWhereDTOVisible}
     * @memberof TacticsWhereDTO
     */
    'visible'?: TacticsWhereDTOVisible;
    /**
     * 
     * @type {TacticsWhereDTOTacticConfigId}
     * @memberof TacticsWhereDTO
     */
    'tactic_config_id'?: TacticsWhereDTOTacticConfigId;
}
/**
 * @type TacticsWhereDTOStartDate
 * @export
 */
export type TacticsWhereDTOStartDate = DateTimeFilterDTO | string;

/**
 * @type TacticsWhereDTOTacticConfigId
 * @export
 */
export type TacticsWhereDTOTacticConfigId = StringFilterDTO | string;

/**
 * @type TacticsWhereDTOVisible
 * @export
 */
export type TacticsWhereDTOVisible = BoolFilterDTO | boolean;

/**
 * 
 * @export
 * @interface ThresholdDto
 */
export interface ThresholdDto {
    /**
     * 
     * @type {number}
     * @memberof ThresholdDto
     */
    'threshold_value': number;
    /**
     * 
     * @type {string}
     * @memberof ThresholdDto
     */
    'reward_type': string;
    /**
     * 
     * @type {number}
     * @memberof ThresholdDto
     */
    'reward_amount': number;
    /**
     * 
     * @type {string}
     * @memberof ThresholdDto
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface TicketsNewRewardsEntryDTO
 */
export interface TicketsNewRewardsEntryDTO {
    /**
     * Rank
     * @type {number}
     * @memberof TicketsNewRewardsEntryDTO
     */
    'rank': number | null;
    /**
     * Score
     * @type {string}
     * @memberof TicketsNewRewardsEntryDTO
     */
    'score': string | null;
}
/**
 * 
 * @export
 * @interface TicketsNewRewardsRewardsDTO
 */
export interface TicketsNewRewardsRewardsDTO {
    /**
     * Reward amount in ETH
     * @type {object}
     * @memberof TicketsNewRewardsRewardsDTO
     */
    'reward_eth': object;
    /**
     * Reward amount in gold
     * @type {object}
     * @memberof TicketsNewRewardsRewardsDTO
     */
    'reward_gold': object;
    /**
     * Reward amount in cards
     * @type {number}
     * @memberof TicketsNewRewardsRewardsDTO
     */
    'reward_cards': number;
    /**
     * Reward amount in tactic tickets
     * @type {number}
     * @memberof TicketsNewRewardsRewardsDTO
     */
    'reward_tickets': number;
    /**
     * 
     * @type {TicketsNewRewardsTacticsDTO}
     * @memberof TicketsNewRewardsRewardsDTO
     */
    'tactics': TicketsNewRewardsTacticsDTO;
}
/**
 * 
 * @export
 * @interface TicketsNewRewardsTacticsConfigDTO
 */
export interface TicketsNewRewardsTacticsConfigDTO {
    /**
     * 
     * @type {TicketsNewRewardsTacticsConfigPayoutDTO}
     * @memberof TicketsNewRewardsTacticsConfigDTO
     */
    'payout_structure': TicketsNewRewardsTacticsConfigPayoutDTO;
}
/**
 * 
 * @export
 * @interface TicketsNewRewardsTacticsConfigPayoutDTO
 */
export interface TicketsNewRewardsTacticsConfigPayoutDTO {
    /**
     * Payout details
     * @type {Array<PayoutObject>}
     * @memberof TicketsNewRewardsTacticsConfigPayoutDTO
     */
    'payout': Array<PayoutObject>;
}
/**
 * 
 * @export
 * @interface TicketsNewRewardsTacticsDTO
 */
export interface TicketsNewRewardsTacticsDTO {
    /**
     * Unique identifier for the tactic
     * @type {string}
     * @memberof TicketsNewRewardsTacticsDTO
     */
    'id': string;
    /**
     * 
     * @type {TicketsNewRewardsTacticsConfigDTO}
     * @memberof TicketsNewRewardsTacticsDTO
     */
    'config': TicketsNewRewardsTacticsConfigDTO;
}
/**
 * 
 * @export
 * @interface TicketsWithEntryDTO
 */
export interface TicketsWithEntryDTO {
    /**
     * Rank
     * @type {number}
     * @memberof TicketsWithEntryDTO
     */
    'rank': number | null;
    /**
     * Score
     * @type {string}
     * @memberof TicketsWithEntryDTO
     */
    'score': string | null;
    /**
     * 
     * @type {TicketsWithEntryTactic}
     * @memberof TicketsWithEntryDTO
     */
    'tactics': TicketsWithEntryTactic;
}
/**
 * 
 * @export
 * @interface TicketsWithEntryRewardsDTO
 */
export interface TicketsWithEntryRewardsDTO {
    /**
     * Reward amount in ETH
     * @type {object}
     * @memberof TicketsWithEntryRewardsDTO
     */
    'reward_eth': object;
    /**
     * Reward amount in gold
     * @type {object}
     * @memberof TicketsWithEntryRewardsDTO
     */
    'reward_gold': object;
    /**
     * Reward amount in cards
     * @type {number}
     * @memberof TicketsWithEntryRewardsDTO
     */
    'reward_cards': number;
    /**
     * Reward amount in tactic tickets
     * @type {number}
     * @memberof TicketsWithEntryRewardsDTO
     */
    'reward_tickets': number;
}
/**
 * 
 * @export
 * @interface TicketsWithEntryTactic
 */
export interface TicketsWithEntryTactic {
    /**
     * Unique identifier for the tactic
     * @type {string}
     * @memberof TicketsWithEntryTactic
     */
    'id': string;
    /**
     * Start date of the tactic
     * @type {string}
     * @memberof TicketsWithEntryTactic
     */
    'start_date': string;
    /**
     * End date of the tactic
     * @type {string}
     * @memberof TicketsWithEntryTactic
     */
    'end_date': string;
    /**
     * ETH price
     * @type {object}
     * @memberof TicketsWithEntryTactic
     */
    'eth_price': object;
    /**
     * 
     * @type {TicketsWithEntryTacticsConfigDTO}
     * @memberof TicketsWithEntryTactic
     */
    'config': TicketsWithEntryTacticsConfigDTO;
}
/**
 * 
 * @export
 * @interface TicketsWithEntryTacticsConfigDTO
 */
export interface TicketsWithEntryTacticsConfigDTO {
    /**
     * Unique identifier for the config
     * @type {string}
     * @memberof TicketsWithEntryTacticsConfigDTO
     */
    'id': string;
    /**
     * Name of the tactic
     * @type {string}
     * @memberof TicketsWithEntryTacticsConfigDTO
     */
    'name': string;
    /**
     * 
     * @type {TicketsWithEntryTacticsConfigPayoutDTO}
     * @memberof TicketsWithEntryTacticsConfigDTO
     */
    'payout_structure': TicketsWithEntryTacticsConfigPayoutDTO;
}
/**
 * 
 * @export
 * @interface TicketsWithEntryTacticsConfigPayoutDTO
 */
export interface TicketsWithEntryTacticsConfigPayoutDTO {
    /**
     * Price pool
     * @type {number}
     * @memberof TicketsWithEntryTacticsConfigPayoutDTO
     */
    'price_pool': number;
    /**
     * Payout details
     * @type {Array<PayoutObject>}
     * @memberof TicketsWithEntryTacticsConfigPayoutDTO
     */
    'payout': Array<PayoutObject>;
    /**
     * Price pool in gold
     * @type {number}
     * @memberof TicketsWithEntryTacticsConfigPayoutDTO
     */
    'price_pool_gold': number;
    /**
     * Payout details in gold
     * @type {Array<PayoutObject>}
     * @memberof TicketsWithEntryTacticsConfigPayoutDTO
     */
    'payout_gold': Array<PayoutObject>;
    /**
     * Price pool in gold
     * @type {number}
     * @memberof TicketsWithEntryTacticsConfigPayoutDTO
     */
    'price_pool_cards': number;
    /**
     * Payout details in cards
     * @type {Array<PayoutObject>}
     * @memberof TicketsWithEntryTacticsConfigPayoutDTO
     */
    'payout_cards': Array<PayoutObject>;
    /**
     * Price pool in gold
     * @type {number}
     * @memberof TicketsWithEntryTacticsConfigPayoutDTO
     */
    'price_pool_tickets': number;
    /**
     * Payout details in gold
     * @type {Array<PayoutObject>}
     * @memberof TicketsWithEntryTacticsConfigPayoutDTO
     */
    'payout_tickets': Array<PayoutObject>;
}
/**
 * 
 * @export
 * @interface TrendingHeroDTO
 */
export interface TrendingHeroDTO {
    /**
     * The unique identifier of the hero
     * @type {string}
     * @memberof TrendingHeroDTO
     */
    'id': string;
    /**
     * The handle of the hero
     * @type {string}
     * @memberof TrendingHeroDTO
     */
    'handle': string;
    /**
     * The name of the hero
     * @type {string}
     * @memberof TrendingHeroDTO
     */
    'name': string;
    /**
     * The URL of the hero\'s profile image
     * @type {string}
     * @memberof TrendingHeroDTO
     */
    'profile_image_url_https': string;
    /**
     * The price change over the last 24 hours in ETH
     * @type {string}
     * @memberof TrendingHeroDTO
     */
    'oneDayChange': string;
    /**
     * The percentage price change over the last 24 hours
     * @type {string}
     * @memberof TrendingHeroDTO
     */
    'oneDayChangePercent': string;
    /**
     * The price change over the last 7 days in ETH
     * @type {string}
     * @memberof TrendingHeroDTO
     */
    'sevenDayChange': string;
    /**
     * The percentage price change over the last 7 days
     * @type {string}
     * @memberof TrendingHeroDTO
     */
    'sevenDayChangePercent': string;
    /**
     * The total trading volume for this hero in ETH
     * @type {string}
     * @memberof TrendingHeroDTO
     */
    'totalVolume': string;
    /**
     * The current price of the hero in ETH
     * @type {string}
     * @memberof TrendingHeroDTO
     */
    'currentPrice': string;
    /**
     * The change in tweet views over the last 24 hours
     * @type {number}
     * @memberof TrendingHeroDTO
     */
    'views24hChange': number;
    /**
     * The change in tweet views over the last 7 days
     * @type {number}
     * @memberof TrendingHeroDTO
     */
    'views7dChange': number;
    /**
     * The change in tweet views over 24h in percentage
     * @type {string}
     * @memberof TrendingHeroDTO
     */
    'viewsChangePercent': string;
    /**
     * The total supply of the hero (excluding address 0x0...)
     * @type {number}
     * @memberof TrendingHeroDTO
     */
    'supply': number;
    /**
     * The number of listed cards for this hero
     * @type {number}
     * @memberof TrendingHeroDTO
     */
    'listedCards': number;
    /**
     * The number of heroes currently in deck
     * @type {number}
     * @memberof TrendingHeroDTO
     */
    'inDeck': number;
    /**
     * The trending score of the hero
     * @type {string}
     * @memberof TrendingHeroDTO
     */
    'trendingScore': string;
    /**
     * 
     * @type {string}
     * @memberof TrendingHeroDTO
     */
    'trendingReason': TrendingHeroDTOTrendingReasonEnum;
}

export const TrendingHeroDTOTrendingReasonEnum = {
    FloorPrice: 'floor_price',
    Views: 'views',
    None: 'none'
} as const;

export type TrendingHeroDTOTrendingReasonEnum = typeof TrendingHeroDTOTrendingReasonEnum[keyof typeof TrendingHeroDTOTrendingReasonEnum];

/**
 * 
 * @export
 * @interface TweetHero
 */
export interface TweetHero {
    /**
     * Handle of the hero
     * @type {string}
     * @memberof TweetHero
     */
    'handle': string;
    /**
     * Name of the hero
     * @type {string}
     * @memberof TweetHero
     */
    'name': string;
    /**
     * URL of the profile image in HTTPS
     * @type {string}
     * @memberof TweetHero
     */
    'profile_image_url_https'?: string;
    /**
     * Credibility score
     * @type {CredibilityAverage}
     * @memberof TweetHero
     */
    'credibility_average': CredibilityAverage;
}
/**
 * 
 * @export
 * @interface Vote
 */
export interface Vote {
    /**
     * The unique identifier of the vote
     * @type {string}
     * @memberof Vote
     */
    'id': string;
    /**
     * The ID of the player who cast the vote
     * @type {string}
     * @memberof Vote
     */
    'player_id': string;
    /**
     * The ID of the vote configuration
     * @type {string}
     * @memberof Vote
     */
    'vote_config_id': string;
    /**
     * The ID of the hero voted for
     * @type {string}
     * @memberof Vote
     */
    'hero_id': string;
    /**
     * The number of fan pts use in vote
     * @type {number}
     * @memberof Vote
     */
    'fan_count': number;
    /**
     * The timestamp when the vote was created
     * @type {string}
     * @memberof Vote
     */
    'created_at': string;
    /**
     * 
     * @type {Player}
     * @memberof Vote
     */
    'player': Player;
    /**
     * 
     * @type {VoteConfig}
     * @memberof Vote
     */
    'vote_config': VoteConfig;
    /**
     * 
     * @type {Hero}
     * @memberof Vote
     */
    'hero': Hero;
}
/**
 * 
 * @export
 * @interface VoteConfig
 */
export interface VoteConfig {
    /**
     * Vote ID
     * @type {string}
     * @memberof VoteConfig
     */
    'id': string;
    /**
     * Vote title
     * @type {string}
     * @memberof VoteConfig
     */
    'title': string;
    /**
     * Vote picture URL
     * @type {string}
     * @memberof VoteConfig
     */
    'picture_desktop': string;
    /**
     * Vote picture URL
     * @type {string}
     * @memberof VoteConfig
     */
    'picture_mobile': string;
    /**
     * Vote description
     * @type {string}
     * @memberof VoteConfig
     */
    'description': string;
    /**
     * Start time of the vote
     * @type {string}
     * @memberof VoteConfig
     */
    'start_time': string;
    /**
     * End time of the vote
     * @type {string}
     * @memberof VoteConfig
     */
    'end_time': string;
    /**
     * Is the vote open for voting?
     * @type {boolean}
     * @memberof VoteConfig
     */
    'is_visible': boolean;
    /**
     * List of vote heroes
     * @type {Array<VoteHeroSelection>}
     * @memberof VoteConfig
     */
    'vote_heroes': Array<VoteHeroSelection>;
    /**
     * Number of votes
     * @type {number}
     * @memberof VoteConfig
     */
    'distinctPlayers'?: number | null;
    /**
     * Total fan points for the vote
     * @type {number}
     * @memberof VoteConfig
     */
    'totalFanPoints'?: number | null;
}
/**
 * 
 * @export
 * @interface VoteHeroSelection
 */
export interface VoteHeroSelection {
    /**
     * The unique identifier of the vote hero selection
     * @type {string}
     * @memberof VoteHeroSelection
     */
    'id': string;
    /**
     * The ID of the hero the player selected
     * @type {string}
     * @memberof VoteHeroSelection
     */
    'hero_id': string;
    /**
     * Last 4 Tournament scores average
     * @type {number}
     * @memberof VoteHeroSelection
     */
    'last_4_scores_avg': number;
    /**
     * The ID of the vote configuration
     * @type {string}
     * @memberof VoteHeroSelection
     */
    'vote_config_id': string;
    /**
     * Config of the vote hero selection
     * @type {VoteConfig}
     * @memberof VoteHeroSelection
     */
    'config': VoteConfig;
    /**
     * Hero of the vote hero selection
     * @type {Hero}
     * @memberof VoteHeroSelection
     */
    'hero': Hero;
}
/**
 * 
 * @export
 * @interface VoteWithoutInclude
 */
export interface VoteWithoutInclude {
    /**
     * The unique identifier of the vote
     * @type {string}
     * @memberof VoteWithoutInclude
     */
    'id': string;
    /**
     * The ID of the player who cast the vote
     * @type {string}
     * @memberof VoteWithoutInclude
     */
    'player_id': string;
    /**
     * The ID of the vote configuration
     * @type {string}
     * @memberof VoteWithoutInclude
     */
    'vote_config_id': string;
    /**
     * The ID of the hero voted for
     * @type {string}
     * @memberof VoteWithoutInclude
     */
    'hero_id': string;
    /**
     * The number of fan pts use in vote
     * @type {number}
     * @memberof VoteWithoutInclude
     */
    'fan_count': number;
    /**
     * The timestamp when the vote was created
     * @type {string}
     * @memberof VoteWithoutInclude
     */
    'created_at': string;
}

/**
 * CardApi - axios parameter creator
 * @export
 */
export const CardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllCards: async (page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/card/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCardById', 'id', id)
            const localVarPath = `/card/by-id/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} playerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardsByPlayerId: async (playerId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playerId' is not null or undefined
            assertParamExists('getCardsByPlayerId', 'playerId', playerId)
            const localVarPath = `/card/player/{playerId}`
                .replace(`{${"playerId"}}`, encodeURIComponent(String(playerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} heroId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroSupply: async (heroId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'heroId' is not null or undefined
            assertParamExists('getHeroSupply', 'heroId', heroId)
            const localVarPath = `/card/supply/{heroId}`
                .replace(`{${"heroId"}}`, encodeURIComponent(String(heroId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CardApi - functional programming interface
 * @export
 */
export const CardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CardApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAllCards(page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedCardResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAllCards(page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CardApi.findAllCards']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCardById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Card>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCardById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CardApi.getCardById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} playerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCardsByPlayerId(playerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Card>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCardsByPlayerId(playerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CardApi.getCardsByPlayerId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} heroId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHeroSupply(heroId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HeroSupplyDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHeroSupply(heroId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CardApi.getHeroSupply']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CardApi - factory interface
 * @export
 */
export const CardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CardApiFp(configuration)
    return {
        /**
         * 
         * @param {CardApiFindAllCardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllCards(requestParameters: CardApiFindAllCardsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedCardResult> {
            return localVarFp.findAllCards(requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CardApiGetCardByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardById(requestParameters: CardApiGetCardByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<Card> {
            return localVarFp.getCardById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CardApiGetCardsByPlayerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardsByPlayerId(requestParameters: CardApiGetCardsByPlayerIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<Card>> {
            return localVarFp.getCardsByPlayerId(requestParameters.playerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CardApiGetHeroSupplyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroSupply(requestParameters: CardApiGetHeroSupplyRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<HeroSupplyDto>> {
            return localVarFp.getHeroSupply(requestParameters.heroId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for findAllCards operation in CardApi.
 * @export
 * @interface CardApiFindAllCardsRequest
 */
export interface CardApiFindAllCardsRequest {
    /**
     * Page number
     * @type {number}
     * @memberof CardApiFindAllCards
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof CardApiFindAllCards
     */
    readonly limit?: number
}

/**
 * Request parameters for getCardById operation in CardApi.
 * @export
 * @interface CardApiGetCardByIdRequest
 */
export interface CardApiGetCardByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof CardApiGetCardById
     */
    readonly id: string
}

/**
 * Request parameters for getCardsByPlayerId operation in CardApi.
 * @export
 * @interface CardApiGetCardsByPlayerIdRequest
 */
export interface CardApiGetCardsByPlayerIdRequest {
    /**
     * 
     * @type {string}
     * @memberof CardApiGetCardsByPlayerId
     */
    readonly playerId: string
}

/**
 * Request parameters for getHeroSupply operation in CardApi.
 * @export
 * @interface CardApiGetHeroSupplyRequest
 */
export interface CardApiGetHeroSupplyRequest {
    /**
     * 
     * @type {string}
     * @memberof CardApiGetHeroSupply
     */
    readonly heroId: string
}

/**
 * CardApi - object-oriented interface
 * @export
 * @class CardApi
 * @extends {BaseAPI}
 */
export class CardApi extends BaseAPI {
    /**
     * 
     * @param {CardApiFindAllCardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApi
     */
    public findAllCards(requestParameters: CardApiFindAllCardsRequest = {}, options?: RawAxiosRequestConfig) {
        return CardApiFp(this.configuration).findAllCards(requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CardApiGetCardByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApi
     */
    public getCardById(requestParameters: CardApiGetCardByIdRequest, options?: RawAxiosRequestConfig) {
        return CardApiFp(this.configuration).getCardById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CardApiGetCardsByPlayerIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApi
     */
    public getCardsByPlayerId(requestParameters: CardApiGetCardsByPlayerIdRequest, options?: RawAxiosRequestConfig) {
        return CardApiFp(this.configuration).getCardsByPlayerId(requestParameters.playerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CardApiGetHeroSupplyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApi
     */
    public getHeroSupply(requestParameters: CardApiGetHeroSupplyRequest, options?: RawAxiosRequestConfig) {
        return CardApiFp(this.configuration).getHeroSupply(requestParameters.heroId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * HeroApi - axios parameter creator
 * @export
 */
export const HeroApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all heroes with pagination
         * @param {number} [limit] Limit the number of heroes returned
         * @param {number} [page] Page number for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllHeroes: async (limit?: number, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/hero/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get heroes by name or handle
         * @param {string} search 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroesByHandleOrName: async (search: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'search' is not null or undefined
            assertParamExists('getHeroesByHandleOrName', 'search', search)
            const localVarPath = `/hero/search/name`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get heroes by IDs
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroesByIds: async (ids: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('getHeroesByIds', 'ids', ids)
            const localVarPath = `/hero/search/ids`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HeroApi - functional programming interface
 * @export
 */
export const HeroApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HeroApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all heroes with pagination
         * @param {number} [limit] Limit the number of heroes returned
         * @param {number} [page] Page number for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllHeroes(limit?: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedHeroResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllHeroes(limit, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HeroApi.getAllHeroes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get heroes by name or handle
         * @param {string} search 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHeroesByHandleOrName(search: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Hero>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHeroesByHandleOrName(search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HeroApi.getHeroesByHandleOrName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get heroes by IDs
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHeroesByIds(ids: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Hero>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHeroesByIds(ids, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HeroApi.getHeroesByIds']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HeroApi - factory interface
 * @export
 */
export const HeroApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HeroApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all heroes with pagination
         * @param {HeroApiGetAllHeroesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllHeroes(requestParameters: HeroApiGetAllHeroesRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedHeroResult> {
            return localVarFp.getAllHeroes(requestParameters.limit, requestParameters.page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get heroes by name or handle
         * @param {HeroApiGetHeroesByHandleOrNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroesByHandleOrName(requestParameters: HeroApiGetHeroesByHandleOrNameRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<Hero>> {
            return localVarFp.getHeroesByHandleOrName(requestParameters.search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get heroes by IDs
         * @param {HeroApiGetHeroesByIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroesByIds(requestParameters: HeroApiGetHeroesByIdsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<Hero>> {
            return localVarFp.getHeroesByIds(requestParameters.ids, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAllHeroes operation in HeroApi.
 * @export
 * @interface HeroApiGetAllHeroesRequest
 */
export interface HeroApiGetAllHeroesRequest {
    /**
     * Limit the number of heroes returned
     * @type {number}
     * @memberof HeroApiGetAllHeroes
     */
    readonly limit?: number

    /**
     * Page number for pagination
     * @type {number}
     * @memberof HeroApiGetAllHeroes
     */
    readonly page?: number
}

/**
 * Request parameters for getHeroesByHandleOrName operation in HeroApi.
 * @export
 * @interface HeroApiGetHeroesByHandleOrNameRequest
 */
export interface HeroApiGetHeroesByHandleOrNameRequest {
    /**
     * 
     * @type {string}
     * @memberof HeroApiGetHeroesByHandleOrName
     */
    readonly search: string
}

/**
 * Request parameters for getHeroesByIds operation in HeroApi.
 * @export
 * @interface HeroApiGetHeroesByIdsRequest
 */
export interface HeroApiGetHeroesByIdsRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof HeroApiGetHeroesByIds
     */
    readonly ids: Array<string>
}

/**
 * HeroApi - object-oriented interface
 * @export
 * @class HeroApi
 * @extends {BaseAPI}
 */
export class HeroApi extends BaseAPI {
    /**
     * 
     * @summary Get all heroes with pagination
     * @param {HeroApiGetAllHeroesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeroApi
     */
    public getAllHeroes(requestParameters: HeroApiGetAllHeroesRequest = {}, options?: RawAxiosRequestConfig) {
        return HeroApiFp(this.configuration).getAllHeroes(requestParameters.limit, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get heroes by name or handle
     * @param {HeroApiGetHeroesByHandleOrNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeroApi
     */
    public getHeroesByHandleOrName(requestParameters: HeroApiGetHeroesByHandleOrNameRequest, options?: RawAxiosRequestConfig) {
        return HeroApiFp(this.configuration).getHeroesByHandleOrName(requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get heroes by IDs
     * @param {HeroApiGetHeroesByIdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeroApi
     */
    public getHeroesByIds(requestParameters: HeroApiGetHeroesByIdsRequest, options?: RawAxiosRequestConfig) {
        return HeroApiFp(this.configuration).getHeroesByIds(requestParameters.ids, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PlayerApi - axios parameter creator
 * @export
 */
export const PlayerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Search players by name, address or handle
         * @param {string} search 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPlayersBySearch: async (search: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'search' is not null or undefined
            assertParamExists('findPlayersBySearch', 'search', search)
            const localVarPath = `/player/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all paginated players
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPlayersWithPagination: async (page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/player/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlayerApi - functional programming interface
 * @export
 */
export const PlayerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlayerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Search players by name, address or handle
         * @param {string} search 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findPlayersBySearch(search: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Player>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findPlayersBySearch(search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlayerApi.findPlayersBySearch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all paginated players
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPlayersWithPagination(page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedPlayerResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPlayersWithPagination(page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlayerApi.getAllPlayersWithPagination']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PlayerApi - factory interface
 * @export
 */
export const PlayerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlayerApiFp(configuration)
    return {
        /**
         * 
         * @summary Search players by name, address or handle
         * @param {PlayerApiFindPlayersBySearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPlayersBySearch(requestParameters: PlayerApiFindPlayersBySearchRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<Player>> {
            return localVarFp.findPlayersBySearch(requestParameters.search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all paginated players
         * @param {PlayerApiGetAllPlayersWithPaginationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPlayersWithPagination(requestParameters: PlayerApiGetAllPlayersWithPaginationRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedPlayerResult> {
            return localVarFp.getAllPlayersWithPagination(requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for findPlayersBySearch operation in PlayerApi.
 * @export
 * @interface PlayerApiFindPlayersBySearchRequest
 */
export interface PlayerApiFindPlayersBySearchRequest {
    /**
     * 
     * @type {string}
     * @memberof PlayerApiFindPlayersBySearch
     */
    readonly search: string
}

/**
 * Request parameters for getAllPlayersWithPagination operation in PlayerApi.
 * @export
 * @interface PlayerApiGetAllPlayersWithPaginationRequest
 */
export interface PlayerApiGetAllPlayersWithPaginationRequest {
    /**
     * Page number
     * @type {number}
     * @memberof PlayerApiGetAllPlayersWithPagination
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof PlayerApiGetAllPlayersWithPagination
     */
    readonly limit?: number
}

/**
 * PlayerApi - object-oriented interface
 * @export
 * @class PlayerApi
 * @extends {BaseAPI}
 */
export class PlayerApi extends BaseAPI {
    /**
     * 
     * @summary Search players by name, address or handle
     * @param {PlayerApiFindPlayersBySearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public findPlayersBySearch(requestParameters: PlayerApiFindPlayersBySearchRequest, options?: RawAxiosRequestConfig) {
        return PlayerApiFp(this.configuration).findPlayersBySearch(requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all paginated players
     * @param {PlayerApiGetAllPlayersWithPaginationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public getAllPlayersWithPagination(requestParameters: PlayerApiGetAllPlayersWithPaginationRequest = {}, options?: RawAxiosRequestConfig) {
        return PlayerApiFp(this.configuration).getAllPlayersWithPagination(requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}



